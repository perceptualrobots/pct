# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_hierarchy.ipynb (unless otherwise specified).

__all__ = ['PCTHierarchy']

# Cell
import numpy as np
from .nodes import PCTNode
from .functions import Variable
from .functions import UniqueNamer

# Cell
class PCTHierarchy():
    "A hierarchical perceptual control system, of PCTNodes."
    def __init__(self, rows=1, cols=1, name="pcthierarchy", links="single", history=False, **pargs):
        self.links_built = False
        UniqueNamer.getInstance().clear()
        self.name=UniqueNamer.getInstance().get_name(name)

        self.hierarchy = []
        print(self.hierarchy)
        for r in range(rows):
            col_list=[]
            for c in range(cols):
                if links == "dense":
                    perc = WeightedSum(weights=np.ones(cols))
                    node = PCTNode(perception=perc, name=f'row{r}col{c}')
                else:
                    node = PCTNode(name=f'row{r}col{c}')
                self.handle_links(node, r, c, links)
                col_list.append(node)

            self.hierarchy.append(col_list)


    def handle_links(self, node, row, col, links_type):
        if row == 0 or links_type == None:
            return

        if links_type == "single":
            node.add_link("perception", self.hierarchy[row-1][col].get_function("perception"))

        if links_type == "dense":
            for column in range(len(self.hierarchy[row-1])):
                node.add_link("perception", self.hierarchy[row-1][column].get_function("perception"))

    def get_config(self):
        config = {"type": type(self).__name__,
                    "name": self.name}

        levels = {}
        for row in range(len(self.hierarchy)):
            level ={'level':row}
            columns={}
            for col in range(len(self.hierarchy[row])):
                column={'col':col}
                nodeconfig = self.hierarchy[row][col].get_config()
                #print(nodeconfig)
                column['node']=nodeconfig
                #print(column)
                columns[f'col{col}']=column
            level['nodes']=columns
            levels[f'level{row}']=level
        config['levels']=levels
        return config
