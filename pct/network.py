# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/11_network.ipynb.

# %% auto 0
__all__ = ['Server', 'Client']

# %% ../nbs/11_network.ipynb 2
import socket
import json

# %% ../nbs/11_network.ipynb 3
class Server():
    def __init__(self, host='localhost', port=6666 , buf_size=1024):
        self.buf_size = buf_size
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((host, port))
            s.listen()
            print(f"Waiting for connection on {host}:{port}")
            self.connection, addr = s.accept()
            print(f"Connected by {addr}")
        self.open=True
            
    def get(self):
        data = self.connection.recv(self.buf_size)
        return data.decode()
    
    def put(self, data):
        d = str.encode(data)
        self.connection.sendall(d)

    def get_dict(self):
        data = self.connection.recv(self.buf_size)
        dict = eval(data.decode())
        return dict
    
    def put_dict(self, dict):
        json_object = json.dumps(dict, indent = 4) 
        d = str.encode(json_object)
        self.connection.sendall(d)

    def isOpen(self):
        return self.open

    def finish(self):
        self.open = False

    def close(self):
        self.open=False
        self.connection.close()
        print('Closed server connection')

# %% ../nbs/11_network.ipynb 4
class Client():
    
    def __init__(self, host='localhost', port=6666 , buf_size=1024):
        self.buf_size = buf_size
        self.connection = socket.create_connection((host,port))
        self.open=True
    
    def get(self):
        data = self.connection.recv(self.buf_size)
        return data.decode()
    
    def put(self, data):
        d = str.encode(data)
        self.connection.sendall(d)

    def get_dict(self):
        data = self.connection.recv(self.buf_size)
        dict = eval(data.decode())
        return dict
    
    def put_dict(self, dict):
        json_object = json.dumps(dict, indent = 4) 
        d = str.encode(json_object)
        self.connection.sendall(d)

    def isOpen(self):
        return self.open

    def finish(self):
        self.open = False
        
    def close(self):
        self.connection.close()
        print('Closed client connection')

