# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_functions.ipynb (unless otherwise specified).

__all__ = ['BaseFunction', 'Constant', 'Subtract', 'Proportional', 'Integration', 'PCTNode']

# Cell
from abc import ABC, abstractmethod

# Cell
class BaseFunction(ABC):
    "Base class of a PCT function."
    def __init__(self):
        self.output = np.zeros(1)
        self.links = []

    @abstractmethod
    def __call__(self):
        pass

    def set_output(self, output):
        self.output= output

    def get_output(self):
        return self.output

    def add_link(self, linkfn):
        self.links.append(linkfn)


# Cell
class Constant(BaseFunction):
    "A function that returns a constant value."
    def __init__(self, constant):
        super().__init__()
        self.output = constant

    def __call__(self):
        return self.output

# Cell
class Subtract(BaseFunction):
    "A function that subtracts one value from another."
    def __init__(self):
        super().__init__()

    def __call__(self):
        self.output = self.links[0].get_output()-self.links[1].get_output()
        return self.output

# Cell
class Proportional(BaseFunction):
    "Proportional function."
    def __init__(self, gain):
        super().__init__()
        self.gain = gain

    def __call__(self):
        self.output = input * self.gain
        return self.output

# Cell
class Integration(BaseFunction):
    "Integration function."
    def __init__(self, gain, slow):
        super().__init__()
        self.gain = gain
        self.slow = slow

    def __call__(self):
        input = self.links[0].get_output()
        self.output = self.output +  ((input * self.gain) - self.output)/self.slow
        return self.output


# Cell
class PCTNode():
    "A single PCT controller."
    def __init__(self, perception, name="pctnode"):
        self.name=name
        self.perceptionCollection = [perception]
        reference = Constant(1)
        self.referenceCollection = [reference]
        comparator = Subtract()
        self.comparatorCollection = [comparator]
        self.outputCollection = [Integration(75, 100)]

    def __call__(self):
        for perceptionFunction in self.perceptionCollection:
            perceptionFunction()

        for referenceFunction in self.referenceCollection:
            referenceFunction()

        self.comparatorCollection[0].add_link(self.referenceCollection[-1])
        self.comparatorCollection[0].add_link(self.perceptionCollection[-1])

        for comparatorFunction in self.comparatorCollection:
            comparatorFunction()

        self.outputCollection[0].add_link(self.comparatorCollection[-1])
        for outputFunction in self.outputCollection:
            outputFunction()

        self.output = self.outputCollection[-1]()
        return self.output

    def get_output_function(self):
        return self.outputCollection[-1]

    def summary(self):
        print(self.name, type(self).__name__)
        print("----------------------------")
