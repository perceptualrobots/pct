# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06_architectures.ipynb (unless otherwise specified).

__all__ = ['BaseArchitecture', 'ProportionalArchitecture']

# Cell
import gym
import random
import os
from abc import ABC, abstractmethod
from .hierarchy import PCTHierarchy

# Cell
class BaseArchitecture(ABC):
    "Base class of an array architecture. This class is not used direclty by developers, but defines the functionality common to all."
    def __init__(self, name, config):
        self.config = config
        self.hpct = PCTHierarchy()

    def __call__(self):
        level0 = self.config['level0']
        print(level0)



# Cell
class ProportionalArchitecture(BaseArchitecture):
    "Proportional Architecture"
    def __init__(self, name="proportional", config=None, **cargs):
        super().__init__(name, config)


    def level0config(self):
        numColumnsThisLevel = self.grid[0]
        # inputs
        iwts=[]
        for i in range(self.num_inputs):
            iwt = [random.randint(0, 1) for iter in range(numColumnsThisLevel)]
            iwts.append(iwt)

        # outputs
        owts=[]
        for i in range(numColumnsThisLevel):
            owts.append(random.uniform(0,100))

        # actions
        actwts = []
        for i in range(self.num_actions):
            awt = [random.randint(0, 1) for iter in range(numColumnsThisLevel)]
            actwts.append(awt)

        lwts=[]
        lwts.append(iwts)
        lwts.append(owts)
        lwts.append(actwts)

        return lwts

    def levelnconfig(self, numColumnsThisLevel, numColumnsPreviousLevel):
        print(numColumnsThisLevel,    numColumnsPreviousLevel)
        # inputs
        iwts=[]
        for i in range(numColumnsThisLevel):
            iwt = [random.randint(0, 1) for iter in range(numColumnsPreviousLevel)]
            iwts.append(iwt)

        # outputs
        owts=[]
        for i in range(numColumnsThisLevel):
            owts.append(random.uniform(0,1))


        # lower refs
        rwts = []
        for i in range(numColumnsPreviousLevel):
            rwt = [random.uniform(-100, 100) for iter in range(numColumnsThisLevel)]
            rwts.append(rwt)

        lwts=[]
        lwts.append(iwts)
        lwts.append(owts)
        lwts.append(rwts)

        return lwts


    def leveltopconfig(self, top_references, numColumnsPreviousLevel):

        numColumnsThisLevel=len(top_references)
        # inputs
        iwts=[]
        for i in range(numColumnsThisLevel):
            iwt = [random.randint(0, 1) for iter in range(numColumnsPreviousLevel)]
            iwts.append(iwt)

        # outputs
        owts=[]
        for i in range(numColumnsThisLevel):
            owts.append(random.uniform(0,1))


        # lower refs
        rwts = []
        for i in range(numColumnsPreviousLevel):
            rwt = [random.uniform(-100, 100) for iter in range(numColumnsThisLevel)]
            rwts.append(rwt)

        lwts=[]
        lwts.append(iwts)
        lwts.append(owts)
        lwts.append(rwts)
        lwts.append(top_references)

        return lwts

