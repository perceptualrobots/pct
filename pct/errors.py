# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/07_errors.ipynb (unless otherwise specified).

__all__ = ['BaseErrorType', 'RootSumSquaredError', 'BaseErrorCollector', 'TotalError']

# Cell

from .hierarchy import PCTHierarchy
from abc import ABC, abstractmethod


# Cell
class BaseErrorType(ABC):
    "Base class of a type error response. This class is not used direclty by developers, but defines the interface common to all."
    def __init__(self):
        self.error_response=0

    @abstractmethod
    def __call__(self):
        pass

    def get_error_response(self):
        return self.error_response

# Cell
class RootSumSquaredError(BaseErrorType):
    "The square root of the sum of the square of the errors."
    def __init__(self):
        self.sum=0

    def __call__(self, error):
        self.sum+=error*error
        self.error_response=np.sqrt(self.sum)

# Cell
class BaseErrorCollector(ABC):
    "Base class of an error collector. This class is not used direclty by developers, but defines the interface common to all."
    def __init__(self, limit,error_response):
        self.limit=limit
        self.limit_exceeded=False
        self.error_response=error_response

    def error(self):
        return self.error_response.get_error_response()

    def add_error_data(self, level, col, data=[]):
        for datum in data:
            self.error_response(datum)


    def is_limit_exceeded(self):
        return self.limit_exceeded



# Cell
class TotalError(BaseErrorCollector):
    "A class to collect all the errors of the control system run."
    'Parameters:'
    'x - the initial limit of the range for an individual'

    def __init__(self, limit=1000, error_response=None, **cargs):
        super().__init__(limit, error_response)

    def add_data(self, hpct=None):
        for level in range(len(hpct.hierarchy)):
             for col in range(len(hpct.hierarchy[level])):
                  node  = hpct.hierarchy[level][col]
                  self.add_error_data(level, col, [node.get_function("comparator").get_value()])
                  if self.error_response.get_error_response() > self.limit:
                      self.limit_exceeded=True
                      return