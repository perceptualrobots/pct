# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/13_microgrid.ipynb.

# %% auto 0
__all__ = ['MicroGridEnvPlus']

# %% ../nbs/13_microgrid.ipynb 3
import random
import gym.spaces as spaces
import numpy as np
from drl_microgrid_ems.tcl_env_dqn import MicroGridEnv, DEFAULT_ITERATIONS, DEFAULT_NUM_TCLS, DEFAULT_NUM_LOADS, DEFAULT_PRICES, DEFAULT_TEMPERATURS, BASE_LOAD, PRICE_TIERS, Generation, Grid, MAX_GENERATION


# %% ../nbs/13_microgrid.ipynb 4
class MicroGridEnvPlus(MicroGridEnv):
    def __init__(self, **kwargs):
        """
        Overriding MicroGridEnv.
        """

    def initialise(self, properties=None, **kwargs):
        if 'initial_seed' in properties:
            random.seed(properties['initial_seed'])
        # Get number of iterations and TCLs from the 
        # parameters (we have to define it through kwargs because 
        # of how Gym works...)
        if 'iterations' in properties:
            self.iterations = properties['iterations']
        else:
            self.iterations = kwargs.get("iterations", DEFAULT_ITERATIONS)
        self.num_tcls = kwargs.get("num_tcls", DEFAULT_NUM_TCLS)
        self.num_loads = kwargs.get("num_loads", DEFAULT_NUM_LOADS)
        self.prices = kwargs.get("prices", DEFAULT_PRICES)
        self.temperatures = kwargs.get("temperatures", DEFAULT_TEMPERATURS)
        self.base_load = kwargs.get("base_load", BASE_LOAD)
        self.price_tiers = kwargs.get("price_tiers", PRICE_TIERS)

        # The current day: pick randomly
        if 'initial_day' in properties:
            self.day = properties['initial_day']
        else:
            self.day = random.randint(0,10)
        # self.day = 8
        # self.day = 55
        # The current timestep
        self.time_step = 0

        # The cluster of TCLs to be controlled.
        # These will be created in reset()
        self.tcls_parameters = []
        self.tcls = []
        # The cluster of loads.
        # These will be created in reset()
        self.loads_parameters = []
        self.loads = []

        self.generation = Generation(MAX_GENERATION)
        self.grid = Grid()

        for i in range(self.num_tcls):
            self.tcls_parameters.append(self._create_tcl_parameters())

        for i in range(self.num_loads):
            self.loads_parameters.append(self._create_load_parameters())

        self.action_space = spaces.Discrete(80)
        
        # Observations: A vector of TCLs SoCs + loads +battery soc+ power generation + price + temperature + time of day
        self.observation_space = spaces.Box(low=-100, high=100, dtype=np.float32, 
                    shape=(1  + 7,))

           
    

# %% ../nbs/13_microgrid.ipynb 5
#| export

  
