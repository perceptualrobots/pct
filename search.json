[
  {
    "objectID": "yaw_module.html",
    "href": "yaw_module.html",
    "title": "Yaw Module",
    "section": "",
    "text": "source\n\nget_yaw_count\n\n get_yaw_count (nacelle_position_diff)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nnacelle_position_diff\nPandas series of nacelle position increment\n\n\n\nReturns\nnumber of yaw actuations\n\n\n\n\n\nsource\n\n\nget_time_yawing\n\n get_time_yawing (nacelle_position_diff)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nnacelle_position_diff\nPandas series of nacelle position increment\n\n\n\nReturns\ntime spent yawing in percent\n\n\n\n\n\nsource\n\n\noriented_angle\n\n oriented_angle (angle)\n\n\n\n\n\nType\nDetails\n\n\n\n\nangle\n\n\n\n\nReturns\noriented angle in range [-180,179]\n\n\n\n\n\nsource\n\n\nget_dataset_from_simu\n\n get_dataset_from_simu (path='dataset.csv', cycle_period=10,\n                        rolling_average_duration=20)\n\nreturns output dataset obtained of CYCA-S\n\nsource\n\n\nget_properties\n\n get_properties (properties)\n\n\nsource\n\n\nget_indexes\n\n get_indexes (model_params, properties)\n\n\nsource\n\n\ntest_trad_control\n\n test_trad_control (wind_timeseries, wind_timeseries_not_agg, agg, start,\n                    end, experiment=None, datatype='baseline_simu',\n                    outdir=None)\n\ntest CYCA-S and CYCA-L\n\nsource\n\n\nYawEnv\n\n YawEnv ()\n\n*The main OpenAI Gym class. It encapsulates an environment with arbitrary behind-the-scenes dynamics. An environment can be partially or fully observed.\nThe main API methods that users of this class need to know are:\nstep\nreset\nrender\nclose\nseed\nAnd set the following attributes:\naction_space: The Space object corresponding to valid actions\nobservation_space: The Space object corresponding to valid observations\nreward_range: A tuple corresponding to the min and max possible rewards\nNote: a default reward range set to [-inf,+inf] already exists. Set it if you want a narrower range.\nThe methods are accessed publicly as “step”, “reset”, etc…*\n\nsource\n\n\nget_comparaison_metrics\n\n get_comparaison_metrics (wind_direction, power_control, power_simu,\n                          res_model, res_baseline_simu, yaw_rate,\n                          yaw_power, width_bin)\n\n\nsource\n\n\ntest_model_wind\n\n test_model_wind (wind_timeseries, start_index, stop_index, ancestors,\n                  filter_duration, yaw_parameters, experiment=None,\n                  datatype='test')\n\ntest RLYCA\n\nsource\n\n\ntest_hpct_wind\n\n test_hpct_wind (file=None, plots=None, history=None, verbose=None,\n                 outdir=None, early=None, environment_properties=None,\n                 start_index=None, stop_index=None, experiment=None,\n                 datatype='test', draw_file=None, model_file=None,\n                 log_testing_to_experiment=False,\n                 log_experiment_figure=False, min=None, hierarchy=None)\n\ntest RLYCA",
    "crumbs": [
      "Yaw Module"
    ]
  },
  {
    "objectID": "pctexamples_usage.html",
    "href": "pctexamples_usage.html",
    "title": "PCT Examples Usage",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nfrom pct.pctexamples import PCTExamples\n\n\nWind Turbine\n\n# Example of how to use the PCTExamples class\npct = PCTExamples('testfiles/WindTurbine/ga--1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f.properties', history=True, additional_props={'keep_history':True})\npct.results(args={'comparisons':True, 'comparisons_print_plots':False}, environment_properties={'keep_history':True, 'range': 'test'})\n# pct.summary()\n# pct.run(100)\nprint('*** keys', pct.get_history_keys())\nhistory_data = pct.set_history_data()\nfig = pct.plot_single(plot={'plot_items': {'RL0C0sm': 'Ref', 'PL0C0sm': 'Perc'}, 'title': 'Level 0'}, history_data=history_data)\n\n{'series': 'steady', 'zero_threshold': 1, 'reward_type': 'power', 'keep_history': True}\n2025-01-07 20:04:53.939897 21956 Start\nScore=-1362.401 power=1362.401\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_logs': 6.907099999999999, 'angle covered_trad_baseline_logs': 27.30000000000004, 'yaw count_trad_baseline_logs': 5, 'time_yawing_trad_baseline_logs': 0.43004300430043}\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_simu': 6.5231, 'angle covered_trad_baseline_simu': 53.46000000000012, 'yaw count_trad_baseline_simu': 15, 'time_yawing_trad_baseline_simu': 2.0502050205020503}\n{'start_index': 1100, 'stop_index': 2100, 'power_trad': 1360.8065024307061, 'power_no_loss': 1394.8282594711568, 'power_control': 1362.4014711179545, 'average yaw error': 5.716155999999999, 'average reward': -1362.401471117955, 'angle covered': 33.0, 'yaw count': 5, 'time_yawing': 1.1011011011011012}\naverage_yaw_error_decrease_base=17.24\naverage_yaw_error_decrease_simu=12.37\nenergy_gain = 0.12\nnet_energy_gain = 0.14\n2025-01-07 20:05:02.450897 21956 End\nElapsed time: 8.51\n*** keys ['WindTurbine', 'reward', 'IYE', 'IWD', 'IWS', 'Action1sgsm', 'RL0C0sm', 'PL0C0sm', 'CL0C0', 'OL0C0sm', 'RL1C0sm', 'PL1C0sm', 'CL1C0', 'OL1C0sm', 'RL1C1sm', 'PL1C1sm', 'CL1C1', 'OL1C1sm', 'RL2C0sm', 'PL2C0sm', 'CL2C0', 'OL2C0sm', 'RL2C1sm', 'PL2C1sm', 'CL2C1', 'OL2C1sm', 'RL2C2sm', 'PL2C2sm', 'CL2C2', 'OL2C2sm', 'RL3C0v', 'PL3C0sm', 'CL3C0', 'OL3C0sm', 'RL3C1v', 'PL3C1sm', 'CL3C1', 'OL3C1sm']\n\n\n\npct.draw( figsize=(10,10), font_size=6, funcdata=True, with_edge_labels=True, node_size=200)\n\n\n\n\n\n\n\n\n\nimport os\nif os.name == 'nt':\n    from IPython.display import Image, display\n    image_path = '/tmp/WindTurbine/test/steady/testfiles/WindTurbine/ga--1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f/res-test.png'\n    display(Image(filename=image_path))\n\n\n\n\n\n\n\n\n\n\nMountain Car\n\n# Example of how to use the PCTExamples class\npct = PCTExamples('testfiles/MountainCar/ga-000.331-s032-2x2-m004-cdf7cc1497ad143c0b04a3d9e72ab783.properties', early_termination=True, history=True, render=True)\n# pct.summary()\npct.run(steps=500)#, render=True)\n\nFalse\n\n\n\npct.close()\n\n\nprint(pct.get_history_keys())\nhistory_data = pct.set_history_data()\n# pct.plot_history(plots='scEdges', title_prefix='')\nfig = pct.plot_single(plot= {'plot_items': {'PL1C0': 'Actual Position', 'RL1C0': 'Target Position'}, 'title': 'L1C0'}, history_data=history_data)\n\n['MountainCarContinuousV0', 'reward', 'IP', 'IV', 'Action1', 'RL0C0', 'PL0C0', 'CL0C0', 'OL0C0', 'RL0C1', 'PL0C1', 'CL0C1', 'OL0C1', 'RL1C0', 'PL1C0', 'CL1C0', 'OL1C0']\n\n\n\npct.draw( figsize=(10,10), font_size=6, funcdata=True, with_edge_labels=True, node_size=200)\n\n\n\n\n\n\n\n\n\nprint(pct.get_config_file_contents())\n\n# Date 2023-07-01 19:05:33.641404\n# Result\n# Best individual\nraw = grid: [2, 1]\nenv: [['MountainCarContinuousV0'], [0], [1]] act: [[1, 1]]\nlevel0 \ncol: 0 ref: [[3.672], 0.171] per: [[1], 0.04] out: [[-0.678], 0.011]\ncol: 1 ref: [[2.245], 0.79] per: [[1], 0.236] out: [[1.76], 0.841]\nlevel1 \ncol: 0 ref: [[0.45]] per: [[1], 0.764] out: [[1.291], 0.54]\n\nconfig = {'type': 'Individual', 'name': 'pcthierarchy', 'pre': {'pre0': {'type': 'MountainCarContinuousV0', 'name': 'MountainCarContinuousV0', 'value': [0.0, 0.0, 0.0], 'links': {0: 'Action1'}, 'env_name': 'MountainCarContinuous-v0', 'reward': 0, 'done': True, 'info': {}}, 'pre1': {'type': 'IndexedParameter', 'name': 'IP', 'value': 0.0, 'links': {0: 'MountainCarContinuousV0'}, 'index': 0}, 'pre2': {'type': 'IndexedParameter', 'name': 'IV', 'value': 0.0, 'links': {0: 'MountainCarContinuousV0'}, 'index': 1}}, 'levels': {'level0': {'level': 0, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'L0C0', 'refcoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'RL0C0', 'value': -0.0, 'links': {0: 'OL1C0'}, 'weights': [3.6717124436775688], 'smooth_factor': 0.1712586159619749}}, 'percoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'PL0C0', 'value': 0.0, 'links': {0: 'IV'}, 'weights': [1], 'smooth_factor': 0.04005348677671297}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'CL0C0', 'value': -0.0, 'links': {0: 'RL0C0', 1: 'PL0C0'}}}, 'outcoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'OL0C0', 'value': 0.0, 'links': {0: 'CL0C0'}, 'weights': [-0.6781355729427617], 'smooth_factor': 0.010880609316351283}}}}, 'col1': {'col': 1, 'node': {'type': 'PCTNode', 'name': 'L0C1', 'refcoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'RL0C1', 'value': -0.0, 'links': {0: 'OL1C0'}, 'weights': [2.244745806835832], 'smooth_factor': 0.7897479531723087}}, 'percoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'PL0C1', 'value': 0.0, 'links': {0: 'IV'}, 'weights': [1], 'smooth_factor': 0.2361147455074499}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'CL0C1', 'value': -0.0, 'links': {0: 'RL0C1', 1: 'PL0C1'}}}, 'outcoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'OL0C1', 'value': -0.0, 'links': {0: 'CL0C1'}, 'weights': [1.7601945162568398], 'smooth_factor': 0.8412594680381309}}}}}}, 'level1': {'level': 1, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'L1C0', 'refcoll': {'0': {'type': 'EAConstant', 'name': 'RL1C0', 'value': 0.45, 'links': {}}}, 'percoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'PL1C0', 'value': 0.0, 'links': {0: 'IP'}, 'weights': [1], 'smooth_factor': 0.7641976478636343}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'CL1C0', 'value': -0.0, 'links': {0: 'RL1C0', 1: 'PL1C0'}}}, 'outcoll': {'0': {'type': 'EASmoothWeightedSum', 'name': 'OL1C0', 'value': -0.0, 'links': {0: 'CL1C0'}, 'weights': [1.2912361488002317], 'smooth_factor': 0.5399395563852809}}}}}}}, 'post': {'post0': {'type': 'EAWeightedSum', 'name': 'Action1', 'value': -0.0, 'links': {0: 'OL0C0', 1: 'OL0C1'}, 'weights': [1, 1]}}}\nscore = 0.33099\n# Time  0.0584\n\n### Description:\n\ndesc = MC08-ReferencedInputsError-RootMeanSquareError-Mode04\n\n### Environment parameters\n\n# Full list of input indexes from environment\n# List of input indexes from environment for zero level if not full\n# List of input indexes from environment for top level# List of reference values\n# Number of actions\n# Display names for environment inputs\n\nenv_name = MountainCarContinuousV0\nenv_inputs_indexes = [0, 1]\nzerolevel_inputs_indexes = [1]\ntoplevel_inputs_indexes = [0]\nreferences = [0.45]\nnum_actions = 1\nenv_inputs_names = [IP,IV]\nenvironment_properties={}\n\n### Configurable parameters\n\n# Randomisation seed to reproduce results\n# Size of population\n# Number of generations\n# Probability that an attribute will be mutated\n# Probability that the structure will be mutated\n# Number of runs of environment\n# Lower limit of float values\n# Upper limit of float values\n# Initial limit of levels\n# Initial limit of columns\n# Lower limit of levels\n# Lower limit of columns\n# Limit of error on which to terminate individual evaluation\n# Probability for crossover\n# Probability for mutating an individual\n# Number of times the evaulation is run (with different random seeds)\n# Type of errors collected\n# Error function\n\nseed = 32\npop_size = 100\ngens = 10\nattr_mut_pb = 1\nstructurepb = 0\nruns = 500\nlower_float = -1\nupper_float = 1\nmax_levels_limit = 2\nmax_columns_limit = 2\nearly_termination = False\nmin_levels_limit = 2\nmin_columns_limit = 2\nerror_limit = 100\np_crossover = 0.9\np_mutation = 0.5\nnevals = 1\nerror_collector_type = ReferencedInputsError\nerror_response_type = RootMeanSquareError\n\n### Additional properties\n\nproperty1 = error:referenced_inputs,0&0.45\n\n### Structure\n\n# modes - pattern of nodes at particular levels, zero, n, top and zerotop\n# the mode numbers refer to:\n# 0 - per:bin-ws, ref:flt-ws, com:sub, out:flt-ws\n\nmode = 4\n\n\n\n\n\n# ###  gen  pop      min       mean        max   mut muts  timing\n###    0  100    0.841      0.972      1.107 \n###    1  100    0.625      0.969      1.218   51%   0%   0.106\n###    2  100    0.524      0.932      1.219   55%   0%   0.051\n###    3  100    0.520      0.841      1.220   49%   0%   0.055\n###    4  100    0.520      0.795      1.220   49%   0%   0.051\n###    5  100    0.398      0.785      1.219   53%   0%   0.054\n###    6  100    0.342      0.770      1.218   46%   0%   0.054\n###    7  100    0.342      0.746      1.218   48%   0%   0.051\n###    8  100    0.331      0.706      1.218   53%   0%   0.054\n###    9  100    0.331      0.731      1.218   56%   0%   0.054\n###   10  100    0.331      0.677      1.219   53%   0%   0.053\n# Best Score: 0.33099\n# Best Ind: [[[['MountainCarContinuousV0'], [0], [1]], [[1, 1]]], [[[[[3.6717124436775688], 0.1712586159619749]], [[[1], 0.04005348677671297]], [[[-0.6781355729427617], 0.010880609316351283]]], [[[[2.244745806835832], 0.7897479531723087]], [[[1], 0.2361147455074499]], [[[1.7601945162568398], 0.8412594680381309]]]], [[[[0.45]], [[[1], 0.7641976478636343]], [[[1.2912361488002317], 0.5399395563852809]]]]]\n# Mean time:  0.058",
    "crumbs": [
      "PCT Examples Usage"
    ]
  },
  {
    "objectID": "environment_processing.html",
    "href": "environment_processing.html",
    "title": "Environment processing",
    "section": "",
    "text": "source\n\n\n\n wind_turbine_results (environment_properties=None, experiment=None,\n                       root=None, wt='WindTurbine', verbose=None,\n                       early=None, min=None, comparisons=False,\n                       comparisons_print_plots=False, property_dir=None,\n                       property_file=None, plots=None,\n                       log_testing_to_experiment=False, hierarchy=None)",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#wind-turbine-results",
    "href": "environment_processing.html#wind-turbine-results",
    "title": "Environment processing",
    "section": "",
    "text": "source\n\n\n\n wind_turbine_results (environment_properties=None, experiment=None,\n                       root=None, wt='WindTurbine', verbose=None,\n                       early=None, min=None, comparisons=False,\n                       comparisons_print_plots=False, property_dir=None,\n                       property_file=None, plots=None,\n                       log_testing_to_experiment=False, hierarchy=None)",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#environmentprocessingfactory",
    "href": "environment_processing.html#environmentprocessingfactory",
    "title": "Environment processing",
    "section": "EnvironmentProcessingFactory",
    "text": "EnvironmentProcessingFactory\n\nsource\n\nEnvironmentProcessingFactory\n\n EnvironmentProcessingFactory ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#baseenvironmentprocessing",
    "href": "environment_processing.html#baseenvironmentprocessing",
    "title": "Environment processing",
    "section": "BaseEnvironmentProcessing",
    "text": "BaseEnvironmentProcessing\n\nsource\n\nBaseEnvironmentProcessing\n\n BaseEnvironmentProcessing ()\n\nBase class of environment processing.",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#windturbineenvironmentprocessing",
    "href": "environment_processing.html#windturbineenvironmentprocessing",
    "title": "Environment processing",
    "section": "WindTurbineEnvironmentProcessing",
    "text": "WindTurbineEnvironmentProcessing\n\nsource\n\nWindTurbineEnvironmentProcessing\n\n WindTurbineEnvironmentProcessing ()\n\nWindTurbine environment processing.",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#dummyenvironmentprocessing",
    "href": "environment_processing.html#dummyenvironmentprocessing",
    "title": "Environment processing",
    "section": "DummyEnvironmentProcessing",
    "text": "DummyEnvironmentProcessing\n\nsource\n\nDummyEnvironmentProcessing\n\n DummyEnvironmentProcessing ()\n\nDummy environment processing.",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#genericenvironmentprocessing",
    "href": "environment_processing.html#genericenvironmentprocessing",
    "title": "Environment processing",
    "section": "GenericEnvironmentProcessing",
    "text": "GenericEnvironmentProcessing\n\nsource\n\nGenericEnvironmentProcessing\n\n GenericEnvironmentProcessing ()\n\nGeneric environment processing.",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#genericgymenvironmentprocessing",
    "href": "environment_processing.html#genericgymenvironmentprocessing",
    "title": "Environment processing",
    "section": "GenericGymEnvironmentProcessing",
    "text": "GenericGymEnvironmentProcessing\n\nsource\n\nGenericGymEnvironmentProcessing\n\n GenericGymEnvironmentProcessing ()\n\nGenericGym environment processing.",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#arcenvironmentprocessing",
    "href": "environment_processing.html#arcenvironmentprocessing",
    "title": "Environment processing",
    "section": "ARCEnvironmentProcessing",
    "text": "ARCEnvironmentProcessing\n\nsource\n\nARCEnvironmentProcessing\n\n ARCEnvironmentProcessing ()\n\nARC environment processing.",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environment_processing.html#arc-test",
    "href": "environment_processing.html#arc-test",
    "title": "Environment processing",
    "section": "ARC Test",
    "text": "ARC Test\n\nenv_name = 'ARC'\nargs={'file': 'ARC0701-FitnessError-CurrentError-Mode00', 'seed':1, 'drive':'G:\\\\My Drive\\\\', 'max': False, 'verbosed': {'display_env': True, 'hpct_verbose': False}}\nenv_proc = EnvironmentProcessingFactory.createEnvironmentProcessing(f'{env_name}EnvironmentProcessing')\nenv_proc.set_properties(args=args)\nws=env_proc.get_workspace()\nname = env_proc.get_experiment_name()\nprint(ws, name)\n\narc-challenge 0701-01\n\n\n\n#env_proc.results(filepath='G:\\\\My Drive\\\\data\\\\ga\\\\ARC\\\\FitnessError-MovingSumError-Mode07\\\\ga-000.000-s001-1x1-m007-ARC0009-1e1867dd3cfb6967b085ac003458aa46.properties')\n# env_proc.results(filepath='testfiles\\\\data\\\\ga\\\\ga-000.000-s001-1x1-m007-ARC0010-9ddcf52416e60d65f19007957d07262d-consolidated.properties')",
    "crumbs": [
      "Environment processing"
    ]
  },
  {
    "objectID": "environments.html",
    "href": "environments.html",
    "title": "Environments",
    "section": "",
    "text": "source\n\n\n\n EnvironmentFactory ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Environments"
    ]
  },
  {
    "objectID": "environments.html#runtime",
    "href": "environments.html#runtime",
    "title": "Environments",
    "section": "Runtime",
    "text": "Runtime\n\nsource\n\nEnvironmentRuntimeFactory\n\n EnvironmentRuntimeFactory ()\n\ncreate a factory class that creates objects of type BaseEnvironmentRuntime based on the environment name\n\nsource\n\n\nCartPoleV1Runtime\n\n CartPoleV1Runtime ()\n\nA runtime environment for the CartPole-v1 environment. Inherits from BaseEnvironmentRuntime.\n\nsource\n\n\nLunarLanderContinuousV2Runtime\n\n LunarLanderContinuousV2Runtime ()\n\nA runtime environment for the LunarLanderContinuous-v2 environment. Inherits from BaseEnvironmentRuntime.\n\nsource\n\n\nBaseEnvironmentRuntime\n\n BaseEnvironmentRuntime ()\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n# Test for EnvironmentRuntimeFactory\nenv_runtime = EnvironmentRuntimeFactory.create('LunarLanderContinuous-v2')\n#print(env_runtime)\nprint(env_runtime.get_env_inputs_names())\nenv_runtime = EnvironmentRuntimeFactory.create('CartPole-v1')\n#print(env_runtime)\nprint(env_runtime.get_env_inputs_names())\n\n['IX', 'IY', 'IVX', 'IVY', 'IA', 'IVA', 'ILC', 'IRC']\n['ICP', 'ICV', 'IPA', 'IPV']",
    "crumbs": [
      "Environments"
    ]
  },
  {
    "objectID": "environments.html#gymmetadata",
    "href": "environments.html#gymmetadata",
    "title": "Environments",
    "section": "GymMetaData",
    "text": "GymMetaData\n\nsource\n\nGymMetaData\n\n GymMetaData (env)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Environments"
    ]
  },
  {
    "objectID": "environments.html#genericgym-1",
    "href": "environments.html#genericgym-1",
    "title": "Environments",
    "section": "GenericGym",
    "text": "GenericGym\n\nsource\n\nGenericGym\n\n GenericGym (render=False, render_mode='rgb_array', video_wrap=False,\n             value=0, gym_name=None, name='GenericGym', seed=None,\n             links=None, new_name=True, namespace=None, **cargs)\n\nA function that creates an runs the GenericGym environment from OpenAI Gym. Parameter: The environment name. Flag to display environment. Links: Link to the action function.",
    "crumbs": [
      "Environments"
    ]
  },
  {
    "objectID": "putils.html",
    "href": "putils.html",
    "title": "Utilities",
    "section": "",
    "text": "# pylint: disable=pointless-statement",
    "crumbs": [
      "Utilities"
    ]
  },
  {
    "objectID": "putils.html#set_dirs",
    "href": "putils.html#set_dirs",
    "title": "Utilities",
    "section": "set_dirs",
    "text": "set_dirs\n\nsource\n\nset_dirs\n\n set_dirs (dirs)\n\n\nsource\n\n\nstringIntListToListOfInts\n\n stringIntListToListOfInts (strList, delimiter)\n\n\nsource\n\n\nstringFloatListToListOfFloats\n\n stringFloatListToListOfFloats (strList, delimiter)\n\n\nsource\n\n\nstringListToListOfStrings\n\n stringListToListOfStrings (strList, delimiter=',')\n\n\nsource\n\n\nlistNumsToString\n\n listNumsToString (list)\n\n\nsource\n\n\nround_lists\n\n round_lists (alist, formatted, places)\n\n\nsource\n\n\nfloatListsToString\n\n floatListsToString (alist, places)\n\n\nsource\n\n\nlimit_large_float\n\n limit_large_float (val, limit=10000000)\n\n\nsource\n\n\nsigmoid\n\n sigmoid (x, range, slope)\n\n\nsource\n\n\nsmooth\n\n smooth (new_val, old_val, smooth_factor)\n\n\nsource\n\n\nsigmoid_array\n\n sigmoid_array (x, range, slope)\n\n\nsource\n\n\ndot\n\n dot (inputs, weights)\n\n\nsource\n\n\nlist_of_ones\n\n list_of_ones (numx)\n\n\n# li = list_of_ones(3)\n# print(li)\n\n\nsource\n\n\nlimit_to_range\n\n limit_to_range (num, lower, upper)\n\n\nsource\n\n\nwrap_env\n\n wrap_env (env)\n\n\nsource\n\n\nshow_video\n\n show_video ()\n\n\nimport matplotlib.pyplot as plt\nx = 2 #np.linspace(-5, 5, 11)\n#x = -10000001\nrange=2\nscale=2\ny = sigmoid(x, range, scale)\nprint(y)\n# plt.plot(x, y)\n# plt.grid()\n# plt.xlim(-6, 6)\n# plt.xlabel('x')\n# plt.title('expit(x)')\n# plt.show()\n\n0.7615941559557646\n\n\n\nsource\n\n\nis_in_notebooks\n\n is_in_notebooks ()\n\n\nsource\n\n\nprinttime\n\n printtime (msg)\n\n\nsource\n\n\nclip_value\n\n clip_value (val, range)",
    "crumbs": [
      "Utilities"
    ]
  },
  {
    "objectID": "putils.html#get_abs_tol",
    "href": "putils.html#get_abs_tol",
    "title": "Utilities",
    "section": "get_abs_tol",
    "text": "get_abs_tol\n\nsource\n\nget_abs_tol\n\n get_abs_tol (key)",
    "crumbs": [
      "Utilities"
    ]
  },
  {
    "objectID": "putils.html#get_rel_tol",
    "href": "putils.html#get_rel_tol",
    "title": "Utilities",
    "section": "get_rel_tol",
    "text": "get_rel_tol\n\nsource\n\nget_rel_tol\n\n get_rel_tol (key)\n\n\nsource\n\n\nmap_to_int_even_range\n\n map_to_int_even_range (val=None, inrange=None, outrange=None)\n\n\nsource\n\n\nmap_to_int_odd_range\n\n map_to_int_odd_range (val=None, inrange=None, outrange=None)\n\n\nlimits = [-2, 2]\nmapped = [1, 5]\nvals = [-3.1, -2.1, -1.51, -1.5, -1.4, -0.9,-0.5, -0.1,  0, 0.1, 0.6, 1.1, 2.1, 210.1 ]\nfor val in vals:\n    print(val, map_to_int_odd_range(val, limits, mapped))\n\n-3.1 1\n-2.1 1\n-1.51 1\n-1.5 1\n-1.4 2\n-0.9 2\n-0.5 3\n-0.1 3\n0 3\n0.1 3\n0.6 4\n1.1 4\n2.1 5\n210.1 5\n\n\n\n#vals = [0.6]\n\nvals = [-3.1, -2.1, -1.51, -1.5, -1.4, -0.9, -0.5, -0.1, 0, 0.1, 0.6, 1.1, 2.1, 210.1 ]\nlimits = [-2, 2]\nmapped = [1, 4]\nfor val in vals:\n    print(val, map_to_int_even_range(val, limits, mapped))\n\n-3.1 1\n-2.1 1\n-1.51 1\n-1.5 1\n-1.4 1\n-0.9 2\n-0.5 2\n-0.1 2\n0 3\n0.1 3\n0.6 3\n1.1 4\n2.1 4\n210.1 4\n\n\n\nsource\n\n\nTimer\n\n Timer ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nTimerError\nA custom exception used to report errors in use of Timer class\n\ntimer = Timer()\ntimer.start()\ntime.sleep(1)\ntimer.stop()\ntimer.start()\ntime.sleep(1)\ntimer.stop()\n\nprint(timer.mean())\nprint(timer.total())\nprint(timer.count())\n\n1.0116276999469846\n2.0232553998939693\n2",
    "crumbs": [
      "Utilities"
    ]
  },
  {
    "objectID": "structure.html",
    "href": "structure.html",
    "title": "Structure",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n#sys.path.append(\"..\")\n\n\nsource\n\nLevelKey\n\n LevelKey (value, names=None, module=None, qualname=None, type=None,\n           start=1)\n\nAn enumeration.\n\nsource\n\n\nArchitectureStructure\n\n ArchitectureStructure (references=None, config=None, attr_mut_pb=None,\n                        lower_float=None, upper_float=None,\n                        levels_limit=None, columns_limit=None, sigma=None,\n                        mu=None, alpha=None, modes=None, namespace=None,\n                        **cargs)\n\nArchitectureStructure\n\narch = ArchitectureStructure()\n\n\nconfig = arch.get_config()\nprint(arch.get_config())\ntarget =  {'parameters': { 'modes' : {LevelKey.ZERO:3, LevelKey.N:3,LevelKey.TOP:4,LevelKey.ZEROTOP :4} }}\nassert config == target\n\n{'parameters': {'modes': {&lt;LevelKey.ZERO: 'level0'&gt;: 3, &lt;LevelKey.N: 'leveln'&gt;: 3, &lt;LevelKey.TOP: 'leveltop'&gt;: 4, &lt;LevelKey.ZEROTOP: 'level0top'&gt;: 4}}}",
    "crumbs": [
      "Structure"
    ]
  },
  {
    "objectID": "architectures.html",
    "href": "architectures.html",
    "title": "Architectures",
    "section": "",
    "text": "#sys.path.append(\"..\")\n\n\nsource\n\nBaseArchitecture\n\n BaseArchitecture (name=None, config=None, env=None, inputs=None,\n                   history=None, error_collector=None, namespace=None)\n\nBase class of an array architecture. This class is not used direclty by developers, but defines the functionality common to all.\n\nsource\n\n\nProportionalArchitecture\n\n ProportionalArchitecture (name='proportional', config=None, env=None,\n                           input_indexes=None, history=False,\n                           error_collector=None, namespace=None, **cargs)\n\nProportional Architecture\n\nsource\n\n\nDynamicArchitecture\n\n DynamicArchitecture (*args, **kwargs)\n\nDynamic Architecture\n\nsource\n\n\nrun_from_properties_file\n\n run_from_properties_file (root_dir='.', path='.', file=None, nevals=None,\n                           runs=500, history=True, verbose=False,\n                           test=False, move=None, draw=False,\n                           plots_figsize=(15, 4), render=True,\n                           layout=None, early_termination=False,\n                           plots=None, seed=None, print_properties=False,\n                           figsize=(12, 12), summary=False,\n                           hpct_verbose=False, error_collector_type=None,\n                           error_response_type=None, draw_file=None,\n                           funcdata=False, interactive_mode=False)\n\n\nsource\n\n\nload_properties\n\n load_properties (root_dir=None, file_path=None, file_name=None,\n                  nevals=None, seed=None, print_properties=False,\n                  gens=None, pop_size=None, evolve=False)\n\n\nsource\n\n\nsetup_environment\n\n setup_environment (properties, render=False, seed=None,\n                    early_termination=None, error_collector_type=None,\n                    error_response_type=None)\n\n\nsource\n\n\ncreate_hierarchy\n\n create_hierarchy (env, error_collector, properties, history=False,\n                   suffixes=False)\n\n\nfrom pct.environments import VelocityModel\nfrom pct.structure import ArchitectureStructure\nfrom pct.functions import IndexedParameter\nfrom pct.hierarchy import PCTHierarchy\nfrom pct.structure import LevelKey\nfrom pct.nodes import PCTNode\n\n\nenv = VelocityModel(name='VModel')\nnamespace=env.namespace\ninputs=[2]\nstructure = ArchitectureStructure()\nconfig = {'parameters': {}, 'level0': [[[1.0864011617580416, -1.0342161642584196], [-8.899524671308557, -8.976856229389936]], [-0.7295091920311653, -4.460573287694404], [0, 0], [[-4.146713118740296, 1.2794655139677662]]]}\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    pa = DynamicArchitecture(structure=structure, config=config, env=env, input_indexes=inputs, namespace=namespace) #, error_collector=te)\n    pa()\n#hpct = pa.get_hierarchy()\n#hpct.summary()\n#move={'VModel': [-0.2, -0.3],'Input0': [-0.3, 0],'OL0C0ws': [-0.4, 0],'OL0C1ws': [0.6, 0]}\n#hpct.draw(move=move, with_edge_labels=True, figsize=(14,14))\n\n\nfrom pct.environments import Pendulum\nfrom pct.functions import Constant\n\n\npen = Pendulum(name='Pendulum',render=True, seed=1)\nnamespace = pen.namespace\n#print(namespace)\ninputs=[2, 3]\nconfig = {'level0': [[[0, 0, 1], [0, 0, 1]], [74.7727669099358, 37.42447782017047, 70.45900090605967], [[1, 0, 1]]], 'level1': [[[1, 0, 1], [1, 1, 1]], [0.028281504070566288, 0.29618653732851286], [[-49.05302284318027, 46.949638698585005], [-96.63198831250754, -29.78373183094591], [-3.8249493797145107, -60.95121501461629]]], 'level2': [[[1, 0], [0, 1]], [0.633350421196448, 0.5607290603484817], [[41.217164164869104, -76.70635343790484], [83.21744682425535, -96.9311066757899]], [1, 2]], 'parameters': {}}\nfor key in config.keys():\n    print(key, config[key])\npa = ProportionalArchitecture(config=config, env=pen, input_indexes=inputs, namespace=namespace)\npa()\nhpct = pa.get_hierarchy()\nhpct.draw(move={'Pendulum': [-0.2, -0.3],'Input0': [-0.3, 0], 'Input1': [0.3, 0]})\n\nlevel0 [[[0, 0, 1], [0, 0, 1]], [74.7727669099358, 37.42447782017047, 70.45900090605967], [[1, 0, 1]]]\nlevel1 [[[1, 0, 1], [1, 1, 1]], [0.028281504070566288, 0.29618653732851286], [[-49.05302284318027, 46.949638698585005], [-96.63198831250754, -29.78373183094591], [-3.8249493797145107, -60.95121501461629]]]\nlevel2 [[[1, 0], [0, 1]], [0.633350421196448, 0.5607290603484817], [[41.217164164869104, -76.70635343790484], [83.21744682425535, -96.9311066757899]], [1, 2]]\nparameters {}\n\n\n\npen = Pendulum(name='Pendulum',render=True, seed=1)\nnamespace = pen.namespace\ninputs=[2, 3]\nconfig = {'level0': [[[0], [0]], [60.92750637861888], [[1]]], 'level1': [[[1], [1]], [0.8221926728404025, 0.5936199577845901], [[2.941087338758976, -68.59700733589955]], [1, 2]], 'parameters': {}}\nfor key in config.keys():\n    print(key, config[key])\npa = ProportionalArchitecture(config=config, env=pen, input_indexes=inputs, namespace = namespace)\npa()\nhpct = pa.get_hierarchy()\nhpct.draw(move={'Pendulum': [-0.2, -0.3],'Input0': [-0.3, 0], 'Input1': [0.3, 0]})\n\nlevel0 [[[0], [0]], [60.92750637861888], [[1]]]\nlevel1 [[[1], [1]], [0.8221926728404025, 0.5936199577845901], [[2.941087338758976, -68.59700733589955]], [1, 2]]\nparameters {}\n\n\n\npen = Pendulum(name='Pendulum',render=True, seed=1)\nnamespace = pen.namespace\ninputs=[2]\nconfig = {'level0': [[[1]], [62.82423385532463], [[0]], [1]], 'parameters': {}}\nfor key in config.keys():\n    print(key, config[key])\n    \npa = ProportionalArchitecture(config=config, env=pen, input_indexes=inputs, namespace = namespace)\npa()\nhpct = pa.get_hierarchy()\nhpct.draw(move={'Pendulum': [-0.2, -0.3],'Input0': [-0.3, 0]})\n\nlevel0 [[[1]], [62.82423385532463], [[0]], [1]]\nparameters {}",
    "crumbs": [
      "Architectures"
    ]
  },
  {
    "objectID": "experimental_results.html",
    "href": "experimental_results.html",
    "title": "Experimental Results",
    "section": "",
    "text": "from pct.pctexamples import PCTExamples\n\n\nMountain Car\n\npct = PCTExamples('testfiles/MountainCar/MountainCar-cdf7cc1497ad143c0b04a3d9e72ab783.properties', early_termination=True, history=True, render=True)\n# pct.summary()\npct.run(steps=500)\n\nFalse\n\n\n\npct.close()",
    "crumbs": [
      "Experimental Results"
    ]
  },
  {
    "objectID": "apps.html",
    "href": "apps.html",
    "title": "application functions",
    "section": "",
    "text": "source\n\nrun_wind_turbine\n\n run_wind_turbine (target, drive, filepath)\n\ncontroller trained on steady dataset applied to steady dataset\nrun_wind_turbine(‘steady’, “testfiles\\”, “ga–1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f.properties”)\npower_control result = 1172.9\ncontroller trained on steady dataset applied to variable dataset\nrun_wind_turbine(‘variable’, “testfiles\\”, “ga–1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f.properties”)\npower_control result = 739.6\ncontroller trained on variable dataset applied to variable dataset\nrun_wind_turbine(‘variable’, “testfiles\\”, “ga–2629.009-s001-5x5-m002-WT0416-31ecb19201d49e8c6f9dd1e172bd6944.properties”)\npower_control result = 741.7\ncontroller trained on variable dataset applied to steady dataset\nrun_wind_turbine(‘steady’, “testfiles\\”, “ga–2629.009-s001-5x5-m002-WT0416-31ecb19201d49e8c6f9dd1e172bd6944.properties”)\npower_control result = 1171.5\n\n# run_wind_turbine('steady', \"testfiles\\\\\", \"ga--1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f.properties\")\n# run_wind_turbine('variable', \"testfiles\\\\\", \"ga--1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f.properties\")\n# run_wind_turbine('variable', \"testfiles\\\\\", \"ga--2629.009-s001-5x5-m002-WT0416-31ecb19201d49e8c6f9dd1e172bd6944.properties\")\n# run_wind_turbine('steady', \"testfiles\\\\\", \"ga--2629.009-s001-5x5-m002-WT0416-31ecb19201d49e8c6f9dd1e172bd6944.properties\")\n\n2024-10-12 16:23:04.245655 26796 Start\nScore=-1172.912 power=1172.912\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_logs': 6.907099999999999, 'angle covered_trad_baseline_logs': 27.30000000000004, 'yaw count_trad_baseline_logs': 5, 'time_yawing_trad_baseline_logs': 0.43004300430043}\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_simu': 6.5231, 'angle covered_trad_baseline_simu': 53.46000000000012, 'yaw count_trad_baseline_simu': 15, 'time_yawing_trad_baseline_simu': 2.0502050205020503}\n{'start_index': 1100, 'stop_index': 2100, 'power_trad': 1168.471147532752, 'power_no_loss': 1203.9984307393847, 'power_control': 1172.9115903340005, 'average yaw error': 6.141389999999999, 'average reward': -1172.9115903340007, 'angle covered': 78.0, 'yaw count': 10, 'time_yawing': 2.6026026026026026}\naverage_yaw_error_decrease_base=11.09\naverage_yaw_error_decrease_simu=5.85\nenergy_gain = 0.38\nnet_energy_gain = 0.35\n2024-10-12 16:23:16.296789 26796 End\nElapsed time: 12.05\n2024-10-12 16:23:16.296789 26796 Start\nScore=-739.604 power=739.604\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_logs': 7.5581999999999985, 'angle covered_trad_baseline_logs': 97.31000000000012, 'yaw count_trad_baseline_logs': 14, 'time_yawing_trad_baseline_logs': 1.5801580158015802}\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_simu': 7.0147549, 'angle covered_trad_baseline_simu': 112.13400000000004, 'yaw count_trad_baseline_simu': 27, 'time_yawing_trad_baseline_simu': 4.160416041604161}\n{'start_index': 1100, 'stop_index': 2100, 'power_trad': 736.0266006459701, 'power_no_loss': 757.8501598912032, 'power_control': 739.6036472129515, 'average yaw error': 6.040095999999999, 'average reward': -739.6036472129531, 'angle covered': 141.0, 'yaw count': 22, 'time_yawing': 4.704704704704705}\naverage_yaw_error_decrease_base=20.09\naverage_yaw_error_decrease_simu=13.89\nenergy_gain = 0.49\nnet_energy_gain = 0.42\n2024-10-12 16:23:28.205166 26796 End\nElapsed time: 11.91\n2024-10-12 16:23:28.205166 26796 Start\nScore=-741.680 power=741.680\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_logs': 7.5581999999999985, 'angle covered_trad_baseline_logs': 97.31000000000012, 'yaw count_trad_baseline_logs': 14, 'time_yawing_trad_baseline_logs': 1.5801580158015802}\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_simu': 7.0147549, 'angle covered_trad_baseline_simu': 112.13400000000004, 'yaw count_trad_baseline_simu': 27, 'time_yawing_trad_baseline_simu': 4.160416041604161}\n{'start_index': 1100, 'stop_index': 2100, 'power_trad': 736.0266006459701, 'power_no_loss': 757.8501598912032, 'power_control': 741.6798023000322, 'average yaw error': 5.56032, 'average reward': -741.679802300033, 'angle covered': 201.0, 'yaw count': 42, 'time_yawing': 6.706706706706707}\naverage_yaw_error_decrease_base=26.43\naverage_yaw_error_decrease_simu=20.73\nenergy_gain = 0.77\nnet_energy_gain = 0.57\n2024-10-12 16:23:40.128764 26796 End\nElapsed time: 11.92\n2024-10-12 16:23:40.128764 26796 Start\nScore=-1171.489 power=1171.489\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_logs': 6.907099999999999, 'angle covered_trad_baseline_logs': 27.30000000000004, 'yaw count_trad_baseline_logs': 5, 'time_yawing_trad_baseline_logs': 0.43004300430043}\n{'start': 1100, 'end': 2100, 'average yaw error_baseline_simu': 6.5231, 'angle covered_trad_baseline_simu': 53.46000000000012, 'yaw count_trad_baseline_simu': 15, 'time_yawing_trad_baseline_simu': 2.0502050205020503}\n{'start_index': 1100, 'stop_index': 2100, 'power_trad': 1168.471147532752, 'power_no_loss': 1203.9984307393847, 'power_control': 1171.4890528211347, 'average yaw error': 6.269654, 'average reward': -1171.4890528211342, 'angle covered': 186.0, 'yaw count': 44, 'time_yawing': 6.206206206206206}\naverage_yaw_error_decrease_base=9.23\naverage_yaw_error_decrease_simu=3.89\nenergy_gain = 0.26\nnet_energy_gain = 0.07\n2024-10-12 16:23:52.161731 26796 End\nElapsed time: 12.03",
    "crumbs": [
      "application functions"
    ]
  },
  {
    "objectID": "microgrid.html",
    "href": "microgrid.html",
    "title": "MicroGrid",
    "section": "",
    "text": "from os import getcwd\n# getcwd()\n\n\nsource\n\nMicroGridEnvPlus\n\n MicroGridEnvPlus (**kwargs)\n\n*The main OpenAI Gym class. It encapsulates an environment with arbitrary behind-the-scenes dynamics. An environment can be partially or fully observed.\nThe main API methods that users of this class need to know are:\nstep\nreset\nrender\nclose\nseed\nAnd set the following attributes:\naction_space: The Space object corresponding to valid actions\nobservation_space: The Space object corresponding to valid observations\nreward_range: A tuple corresponding to the min and max possible rewards\nNote: a default reward range set to [-inf,+inf] already exists. Set it if you want a narrower range.\nThe methods are accessed publicly as “step”, “reset”, etc…*\n\nsource\n\n\nMicroGridEnv0Plus\n\n MicroGridEnv0Plus (**kwargs)\n\n*The main OpenAI Gym class. It encapsulates an environment with arbitrary behind-the-scenes dynamics. An environment can be partially or fully observed.\nThe main API methods that users of this class need to know are:\nstep\nreset\nrender\nclose\nseed\nAnd set the following attributes:\naction_space: The Space object corresponding to valid actions\nobservation_space: The Space object corresponding to valid observations\nreward_range: A tuple corresponding to the min and max possible rewards\nNote: a default reward range set to [-inf,+inf] already exists. Set it if you want a narrower range.\nThe methods are accessed publicly as “step”, “reset”, etc…*",
    "crumbs": [
      "MicroGrid"
    ]
  },
  {
    "objectID": "plot.html",
    "href": "plot.html",
    "title": "plotarrays classes",
    "section": "",
    "text": "source\n\nPlotARCArrays\n\n PlotARCArrays ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\npas = PlotARCArrays()\nimage_filename = pas.to_image('/tmp/ARC', [[1,1,1],[1,1,1],[1,1,1]], [[2,2,2],[2,2,2],[2,2,2]], [[2.6,3,3],[3,3,3],[3,3,3]], 'train', '00000001')\nprint(image_filename)\n\n/tmp/ARC/00000001-a86e2e2e-6fc6-4ef2-9aec-04edbc75fac9.png\n\n\n\n\n\n\n\n\n\n\ndataset = 'train'\ncode = '001'\npas = PlotARCArrays()\narrays = [\n{'array' : [[1,1,1],[1,1,1],[1,1,1]], 'title' : 'input'},\n{'array' : [[2,2,2],[2,2,2],[2,2,2]], 'title' : 'output'},\n{'array' : [[3,3,3],[3,3,3],[3,3,3]], 'title' : 'env'}\n]\nf = pas.plot_arrays(arrays, dataset, code)\n\n\n\n\n\n\n\n\n\ndataset = 'train'\nw=3\nfig, axs  = plt.subplots(1, w, figsize=(3*w ,3))\ncode = '001'\nplt.suptitle(f'{dataset} {code}', fontsize=20, fontweight='bold', y=1)\n\n\npas = PlotARCArrays()\ninput_matrix = [[3,3,3],[3,3,3],[3,3,3]]\npas.plot_array(axs[0], input_matrix, 'input')\ninput_matrix = [[3,3,3],[3,3,3],[3,3,3]]\npas.plot_array(axs[1], input_matrix, 'output')\ninput_matrix = [[3,3,3],[3,3,3],[3,3,3]]\npas.plot_array(axs[2], input_matrix, 'env')",
    "crumbs": [
      "plotarrays classes"
    ]
  },
  {
    "objectID": "pctexamples.html",
    "href": "pctexamples.html",
    "title": "PCTExamples class",
    "section": "",
    "text": "The PCTExamples class is designed to load a PCTHierarchy configuration file and provide various methods to interact with the hierarchy.\n\nsource\n\n\n\n PCTExamples (config_file, min=True, early_termination=False,\n              history=False, additional_props=None, render=False,\n              video_params=None, suffixes=False)\n\nPCTExamples class provides methods to load a PCT hierarchy from a configuration file, summarize the hierarchy, get the configuration, draw the hierarchy, run the hierarchy for a specified number of steps, and close the environment. Attributes: hierarchy (PCTHierarchy): The loaded PCT hierarchy. env (Environment): The environment associated with the PCT hierarchy.\n\n\n\nBelow are several usage examples demonstrating the new keyword-argument-based interface for run_example.\nThe class also provides model structure analysis capabilities:\n\nThe get_model_details() method returns information about the model’s structure in JSON format, including total node count and parameter count.\nYou can now use the get_model_details=True parameter in run_example() to include model statistics in the results without having to create a separate instance.\n\n\n# Basic run with MountainCar config\nconfig_file='testfiles/MountainCar/MountainCar-cdf7cc.properties'\nresult_basic = PCTExamples.run_example(config_file, steps=100)\nresult_basic\n\n{'run_result': False, 'steps_completed': 100, 'success': True}\n\n\n\n# Run with model details\nresult_with_details = PCTExamples.run_example(\n    config_file=config_file,\n    run_hierarchy=True,\n    get_model_details=True,\n    verbose=False\n)\nif 'model_details' in result_with_details:\n    print(\"\\nModel Statistics:\")\n    print(f\"Total nodes: {result_with_details['model_details']['total_nodes']}\")\n    print(f\"Total parameters: {result_with_details['model_details']['total_parameters']}\")\n\n\nModel Statistics:\nTotal nodes: 3\nTotal parameters: 13\n\n\n\n# Full featured run\nresult_full = PCTExamples.run_example(\n    config_file=config_file,\n    run_hierarchy=True,\n    render=True,\n    early_termination=True,\n    steps=5000,\n    print_summary=False,\n    return_config=True,\n    verbose=False,\n    get_model_details=True,\n    # image_params={'figsize': (16, 10), 'with_labels': True},\n    video_params={'fps': 30, 'filename': '/tmp/mountaincar_demo.mp4'},\n    # plot_params={'plots_figsize': (14, 8), 'title_prefix': 'MountainCar_'}\n)\nresult_full\n\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (600, 400) to (608, 400) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (600, 400) to (608, 400) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n\n\nVideo saved as /tmp/mountaincar_demo.mp4\nVideo saved as /tmp/mountaincar_demo.mp4\n\n\n{'config': {'type': 'PCTHierarchy',\n  'name': 'pcthierarchy',\n  'pre': {'pre0': {'type': 'MountainCarContinuousV0',\n    'name': 'MountainCarContinuousV0',\n    'value': 0,\n    'links': {0: 'Action1'},\n    'env_name': 'MountainCarContinuous-v0',\n    'reward': 0,\n    'done': False,\n    'info': {}},\n   'pre1': {'type': 'IndexedParameter',\n    'name': 'IP',\n    'value': 0.0,\n    'links': {0: 'MountainCarContinuousV0'},\n    'index': 0},\n   'pre2': {'type': 'IndexedParameter',\n    'name': 'IV',\n    'value': 0.0,\n    'links': {0: 'MountainCarContinuousV0'},\n    'index': 1}},\n  'levels': {'level0': {'level': 0,\n    'nodes': {'col0': {'col': 0,\n      'node': {'type': 'PCTNode',\n       'name': 'L0C0',\n       'refcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'RL0C0',\n         'value': -0.0,\n         'links': {0: 'OL1C0'},\n         'weights': [3.6717124436775688],\n         'smooth_factor': 0.1712586159619749}},\n       'percoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'PL0C0',\n         'value': 0.0,\n         'links': {0: 'IV'},\n         'weights': [1],\n         'smooth_factor': 0.04005348677671297}},\n       'comcoll': {'0': {'type': 'Subtract',\n         'name': 'CL0C0',\n         'value': -0.0,\n         'links': {0: 'RL0C0', 1: 'PL0C0'}}},\n       'outcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'OL0C0',\n         'value': 0.0,\n         'links': {0: 'CL0C0'},\n         'weights': [-0.6781355729427617],\n         'smooth_factor': 0.010880609316351283}}}},\n     'col1': {'col': 1,\n      'node': {'type': 'PCTNode',\n       'name': 'L0C1',\n       'refcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'RL0C1',\n         'value': -0.0,\n         'links': {0: 'OL1C0'},\n         'weights': [2.244745806835832],\n         'smooth_factor': 0.7897479531723087}},\n       'percoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'PL0C1',\n         'value': 0.0,\n         'links': {0: 'IV'},\n         'weights': [1],\n         'smooth_factor': 0.2361147455074499}},\n       'comcoll': {'0': {'type': 'Subtract',\n         'name': 'CL0C1',\n         'value': -0.0,\n         'links': {0: 'RL0C1', 1: 'PL0C1'}}},\n       'outcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'OL0C1',\n         'value': -0.0,\n         'links': {0: 'CL0C1'},\n         'weights': [1.7601945162568398],\n         'smooth_factor': 0.8412594680381309}}}}}},\n   'level1': {'level': 1,\n    'nodes': {'col0': {'col': 0,\n      'node': {'type': 'PCTNode',\n       'name': 'L1C0',\n       'refcoll': {'0': {'type': 'Constant',\n         'name': 'RL1C0',\n         'value': 0.45,\n         'links': {}}},\n       'percoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'PL1C0',\n         'value': 0.0,\n         'links': {0: 'IP'},\n         'weights': [1],\n         'smooth_factor': 0.7641976478636343}},\n       'comcoll': {'0': {'type': 'Subtract',\n         'name': 'CL1C0',\n         'value': -0.0,\n         'links': {0: 'RL1C0', 1: 'PL1C0'}}},\n       'outcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'OL1C0',\n         'value': -0.0,\n         'links': {0: 'CL1C0'},\n         'weights': [1.2912361488002317],\n         'smooth_factor': 0.5399395563852809}}}}}}},\n  'post': {'post0': {'type': 'WeightedSum',\n    'name': 'Action1',\n    'value': 0,\n    'links': {0: 'OL0C0', 1: 'OL0C1'},\n    'weights': [1, 1]}}},\n 'model_details': {'total_nodes': 3, 'total_parameters': 13},\n 'run_result': False,\n 'steps_completed': 5000,\n 'success': True}\n\n\n\n# Just create image and get model details without running\nresult_image_and_details = PCTExamples.run_example(\n    config_file=config_file,\n    run_hierarchy=False,\n    return_config=False,\n    print_summary=False,\n    get_model_details=True,\n    image_params={'figsize': (12, 8), 'with_labels': True}\n)\nif 'model_details' in result_image_and_details:\n    print(\"\\nModel Details (without running):\")\n    print(f\"Total nodes: {result_image_and_details['model_details']['total_nodes']}\")\n    print(f\"Total parameters: {result_image_and_details['model_details']['total_parameters']}\")\n\n# Display usage help\nPCTExamples.run_example(display_usage=True)\n\n\nModel Details (without running):\nTotal nodes: 3\nTotal parameters: 13\n\n            PCTExamples.run_example() Usage:\n            \n            Basic usage:\n                PCTExamples.run_example('testfiles/MountainCar/MountainCar-cdf7cc1497ad143c0b04a3d9e72ab783.properties')\n            \n            With options:\n                PCTExamples.run_example(\n                    config_file='testfiles/MountainCar/MountainCar-cdf7cc1497ad143c0b04a3d9e72ab783.properties',\n                    run_hierarchy=True,      # Run the hierarchy\n                    render=True,             # Render environment\n                    image_params={...},      # Create hierarchy diagram if not None\n                    video_params={...},      # Create video if not None\n                    plot_params={...},       # Create plots if not None\n                    get_model_details=True,  # Include model statistics in results\n                    early_termination=True,  # Enable early termination\n                    steps=1000,              # Override step count\n                    print_summary=True,      # Print hierarchy summary\n                    return_config=True,      # Return configuration\n                    verbose=True             # Verbose output\n                )\n            \n            Returns dictionary with results and any requested outputs.\n            \n\n\nC:\\Users\\ruper\\Versioning\\python\\nbdev\\pct\\pct\\hierarchy.py:354: UserWarning:\n\nThis figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n\n\n\n{'usage_displayed': True}\n\n\n\n# Example of using get_model_details to obtain model statistics\n\n# Create a PCTExamples instance\nfilename = 'testfiles/MountainCar/MountainCar-cdf7cc.properties'\nexample = PCTExamples(config_file=filename)\n\n# Get model details as a JSON object\nmodel_details = example.get_model_details()\nprint(\"Model Details:\")\nprint(json.dumps(model_details, indent=4))\n\n# Access specific information\nprint(f\"\\nTotal nodes: {model_details['total_nodes']}\")\nprint(f\"Total parameters: {model_details['total_parameters']}\")\n\n# Clean up\nexample.close()\n\nModel Details:\n{\n    \"total_nodes\": 3,\n    \"total_parameters\": 13\n}\n\nTotal nodes: 3\nTotal parameters: 13",
    "crumbs": [
      "PCTExamples class"
    ]
  },
  {
    "objectID": "pctexamples.html#pctexamples-class",
    "href": "pctexamples.html#pctexamples-class",
    "title": "PCTExamples class",
    "section": "",
    "text": "The PCTExamples class is designed to load a PCTHierarchy configuration file and provide various methods to interact with the hierarchy.\n\nsource\n\n\n\n PCTExamples (config_file, min=True, early_termination=False,\n              history=False, additional_props=None, render=False,\n              video_params=None, suffixes=False)\n\nPCTExamples class provides methods to load a PCT hierarchy from a configuration file, summarize the hierarchy, get the configuration, draw the hierarchy, run the hierarchy for a specified number of steps, and close the environment. Attributes: hierarchy (PCTHierarchy): The loaded PCT hierarchy. env (Environment): The environment associated with the PCT hierarchy.\n\n\n\nBelow are several usage examples demonstrating the new keyword-argument-based interface for run_example.\nThe class also provides model structure analysis capabilities:\n\nThe get_model_details() method returns information about the model’s structure in JSON format, including total node count and parameter count.\nYou can now use the get_model_details=True parameter in run_example() to include model statistics in the results without having to create a separate instance.\n\n\n# Basic run with MountainCar config\nconfig_file='testfiles/MountainCar/MountainCar-cdf7cc.properties'\nresult_basic = PCTExamples.run_example(config_file, steps=100)\nresult_basic\n\n{'run_result': False, 'steps_completed': 100, 'success': True}\n\n\n\n# Run with model details\nresult_with_details = PCTExamples.run_example(\n    config_file=config_file,\n    run_hierarchy=True,\n    get_model_details=True,\n    verbose=False\n)\nif 'model_details' in result_with_details:\n    print(\"\\nModel Statistics:\")\n    print(f\"Total nodes: {result_with_details['model_details']['total_nodes']}\")\n    print(f\"Total parameters: {result_with_details['model_details']['total_parameters']}\")\n\n\nModel Statistics:\nTotal nodes: 3\nTotal parameters: 13\n\n\n\n# Full featured run\nresult_full = PCTExamples.run_example(\n    config_file=config_file,\n    run_hierarchy=True,\n    render=True,\n    early_termination=True,\n    steps=5000,\n    print_summary=False,\n    return_config=True,\n    verbose=False,\n    get_model_details=True,\n    # image_params={'figsize': (16, 10), 'with_labels': True},\n    video_params={'fps': 30, 'filename': '/tmp/mountaincar_demo.mp4'},\n    # plot_params={'plots_figsize': (14, 8), 'title_prefix': 'MountainCar_'}\n)\nresult_full\n\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (600, 400) to (608, 400) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (600, 400) to (608, 400) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n\n\nVideo saved as /tmp/mountaincar_demo.mp4\nVideo saved as /tmp/mountaincar_demo.mp4\n\n\n{'config': {'type': 'PCTHierarchy',\n  'name': 'pcthierarchy',\n  'pre': {'pre0': {'type': 'MountainCarContinuousV0',\n    'name': 'MountainCarContinuousV0',\n    'value': 0,\n    'links': {0: 'Action1'},\n    'env_name': 'MountainCarContinuous-v0',\n    'reward': 0,\n    'done': False,\n    'info': {}},\n   'pre1': {'type': 'IndexedParameter',\n    'name': 'IP',\n    'value': 0.0,\n    'links': {0: 'MountainCarContinuousV0'},\n    'index': 0},\n   'pre2': {'type': 'IndexedParameter',\n    'name': 'IV',\n    'value': 0.0,\n    'links': {0: 'MountainCarContinuousV0'},\n    'index': 1}},\n  'levels': {'level0': {'level': 0,\n    'nodes': {'col0': {'col': 0,\n      'node': {'type': 'PCTNode',\n       'name': 'L0C0',\n       'refcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'RL0C0',\n         'value': -0.0,\n         'links': {0: 'OL1C0'},\n         'weights': [3.6717124436775688],\n         'smooth_factor': 0.1712586159619749}},\n       'percoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'PL0C0',\n         'value': 0.0,\n         'links': {0: 'IV'},\n         'weights': [1],\n         'smooth_factor': 0.04005348677671297}},\n       'comcoll': {'0': {'type': 'Subtract',\n         'name': 'CL0C0',\n         'value': -0.0,\n         'links': {0: 'RL0C0', 1: 'PL0C0'}}},\n       'outcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'OL0C0',\n         'value': 0.0,\n         'links': {0: 'CL0C0'},\n         'weights': [-0.6781355729427617],\n         'smooth_factor': 0.010880609316351283}}}},\n     'col1': {'col': 1,\n      'node': {'type': 'PCTNode',\n       'name': 'L0C1',\n       'refcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'RL0C1',\n         'value': -0.0,\n         'links': {0: 'OL1C0'},\n         'weights': [2.244745806835832],\n         'smooth_factor': 0.7897479531723087}},\n       'percoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'PL0C1',\n         'value': 0.0,\n         'links': {0: 'IV'},\n         'weights': [1],\n         'smooth_factor': 0.2361147455074499}},\n       'comcoll': {'0': {'type': 'Subtract',\n         'name': 'CL0C1',\n         'value': -0.0,\n         'links': {0: 'RL0C1', 1: 'PL0C1'}}},\n       'outcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'OL0C1',\n         'value': -0.0,\n         'links': {0: 'CL0C1'},\n         'weights': [1.7601945162568398],\n         'smooth_factor': 0.8412594680381309}}}}}},\n   'level1': {'level': 1,\n    'nodes': {'col0': {'col': 0,\n      'node': {'type': 'PCTNode',\n       'name': 'L1C0',\n       'refcoll': {'0': {'type': 'Constant',\n         'name': 'RL1C0',\n         'value': 0.45,\n         'links': {}}},\n       'percoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'PL1C0',\n         'value': 0.0,\n         'links': {0: 'IP'},\n         'weights': [1],\n         'smooth_factor': 0.7641976478636343}},\n       'comcoll': {'0': {'type': 'Subtract',\n         'name': 'CL1C0',\n         'value': -0.0,\n         'links': {0: 'RL1C0', 1: 'PL1C0'}}},\n       'outcoll': {'0': {'type': 'SmoothWeightedSum',\n         'name': 'OL1C0',\n         'value': -0.0,\n         'links': {0: 'CL1C0'},\n         'weights': [1.2912361488002317],\n         'smooth_factor': 0.5399395563852809}}}}}}},\n  'post': {'post0': {'type': 'WeightedSum',\n    'name': 'Action1',\n    'value': 0,\n    'links': {0: 'OL0C0', 1: 'OL0C1'},\n    'weights': [1, 1]}}},\n 'model_details': {'total_nodes': 3, 'total_parameters': 13},\n 'run_result': False,\n 'steps_completed': 5000,\n 'success': True}\n\n\n\n# Just create image and get model details without running\nresult_image_and_details = PCTExamples.run_example(\n    config_file=config_file,\n    run_hierarchy=False,\n    return_config=False,\n    print_summary=False,\n    get_model_details=True,\n    image_params={'figsize': (12, 8), 'with_labels': True}\n)\nif 'model_details' in result_image_and_details:\n    print(\"\\nModel Details (without running):\")\n    print(f\"Total nodes: {result_image_and_details['model_details']['total_nodes']}\")\n    print(f\"Total parameters: {result_image_and_details['model_details']['total_parameters']}\")\n\n# Display usage help\nPCTExamples.run_example(display_usage=True)\n\n\nModel Details (without running):\nTotal nodes: 3\nTotal parameters: 13\n\n            PCTExamples.run_example() Usage:\n            \n            Basic usage:\n                PCTExamples.run_example('testfiles/MountainCar/MountainCar-cdf7cc1497ad143c0b04a3d9e72ab783.properties')\n            \n            With options:\n                PCTExamples.run_example(\n                    config_file='testfiles/MountainCar/MountainCar-cdf7cc1497ad143c0b04a3d9e72ab783.properties',\n                    run_hierarchy=True,      # Run the hierarchy\n                    render=True,             # Render environment\n                    image_params={...},      # Create hierarchy diagram if not None\n                    video_params={...},      # Create video if not None\n                    plot_params={...},       # Create plots if not None\n                    get_model_details=True,  # Include model statistics in results\n                    early_termination=True,  # Enable early termination\n                    steps=1000,              # Override step count\n                    print_summary=True,      # Print hierarchy summary\n                    return_config=True,      # Return configuration\n                    verbose=True             # Verbose output\n                )\n            \n            Returns dictionary with results and any requested outputs.\n            \n\n\nC:\\Users\\ruper\\Versioning\\python\\nbdev\\pct\\pct\\hierarchy.py:354: UserWarning:\n\nThis figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n\n\n\n{'usage_displayed': True}\n\n\n\n# Example of using get_model_details to obtain model statistics\n\n# Create a PCTExamples instance\nfilename = 'testfiles/MountainCar/MountainCar-cdf7cc.properties'\nexample = PCTExamples(config_file=filename)\n\n# Get model details as a JSON object\nmodel_details = example.get_model_details()\nprint(\"Model Details:\")\nprint(json.dumps(model_details, indent=4))\n\n# Access specific information\nprint(f\"\\nTotal nodes: {model_details['total_nodes']}\")\nprint(f\"Total parameters: {model_details['total_parameters']}\")\n\n# Clean up\nexample.close()\n\nModel Details:\n{\n    \"total_nodes\": 3,\n    \"total_parameters\": 13\n}\n\nTotal nodes: 3\nTotal parameters: 13",
    "crumbs": [
      "PCTExamples class"
    ]
  },
  {
    "objectID": "pcthierarchy_usage.html",
    "href": "pcthierarchy_usage.html",
    "title": "PCTHierarchy Usage",
    "section": "",
    "text": "from pct.nodes import PCTNode\nfrom pct.functions import WeightedSum, Constant\nfrom pct.hierarchy import PCTHierarchy\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 from pct.nodes import PCTNode\n      2 from pct.functions import WeightedSum, Constant\n      3 from pct.hierarchy import PCTHierarchy\n\nModuleNotFoundError: No module named 'pct'",
    "crumbs": [
      "PCTHierarchy Usage"
    ]
  },
  {
    "objectID": "pcthierarchy_usage.html#creating-a-hierarchy",
    "href": "pcthierarchy_usage.html#creating-a-hierarchy",
    "title": "PCTHierarchy Usage",
    "section": "Creating a Hierarchy",
    "text": "Creating a Hierarchy\nCreate a hierarchy by defining the number of rows (levels) and columns.\n\npre=Constant(5, name='precon')\nnamespace=pre.namespace\npost=Constant(10, name='postcon', namespace=namespace)\nhpct = PCTHierarchy(3,3, pre=[pre], post=[post], history=True, clear_names=False, links=\"dense\", namespace=namespace)\nhpct.hierarchy\n\n[[&lt;pct.nodes.PCTNode&gt;,\n  &lt;pct.nodes.PCTNode&gt;,\n  &lt;pct.nodes.PCTNode&gt;],\n [&lt;pct.nodes.PCTNode&gt;,\n  &lt;pct.nodes.PCTNode&gt;,\n  &lt;pct.nodes.PCTNode&gt;],\n [&lt;pct.nodes.PCTNode&gt;,\n  &lt;pct.nodes.PCTNode&gt;,\n  &lt;pct.nodes.PCTNode&gt;]]\n\n\n\nprint(hpct.get_summary())\n\n**************************\nPRE: 5.000 \nL0C0 0.000 0.000 0.000 0.000 \nL0C1 0.000 0.000 0.000 0.000 \nL0C2 0.000 0.000 0.000 0.000 \nL1C0 0.000 0.000 0.000 0.000 \nL1C1 0.000 0.000 0.000 0.000 \nL1C2 0.000 0.000 0.000 0.000 \nL2C0 0.000 0.000 0.000 0.000 \nL2C1 0.000 0.000 0.000 0.000 \nL2C2 0.000 0.000 0.000 0.000 \nPOST: 10.000 \n\n\n\n\nprint(hpct.get_parameters_list())\n\n[[[[5]], [[10]]], [[[[1, 1, 1]], [[0]], [[1]]], [[[1, 1, 1]], [[0]], [[1]]], [[[1, 1, 1]], [[0]], [[1]]]], [[[[1, 1, 1]], [[1, 1, 1]], [[1]]], [[[1, 1, 1]], [[1, 1, 1]], [[1]]], [[[1, 1, 1]], [[1, 1, 1]], [[1]]]], [[[[0]], [[1, 1, 1]], [[1]]], [[[0]], [[1, 1, 1]], [[1]]], [[[0]], [[1, 1, 1]], [[1]]]]]\n\n\n\nprint(hpct.get_grid())\n\n[3, 3, 3]\n\n\n\nhpct.change_namespace()\n\n\nhpct.summary()\n\n**************************\npcthierarchy PCTHierarchy [3, 3, 3] ccff3ef2-036f-11f0-9f08-04d9f58727ab\n--------------------------\nPRE: precon Constant | 5 \nLevel 0 Cols 3\nlevel0col0 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum WeightedSum | weights [1, 1, 1] | 0 | links  proportional3 proportional4 proportional5 \nPER: variable Variable | 0 \nCOM: subtract Subtract | 0 | links  weighted_sum variable \nOUT: proportional Proportional | gain 1 | 0 | links  subtract \n----------------------------\nlevel0col1 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum1 WeightedSum | weights [1, 1, 1] | 0 | links  proportional3 proportional4 proportional5 \nPER: variable1 Variable | 0 \nCOM: subtract1 Subtract | 0 | links  weighted_sum1 variable1 \nOUT: proportional1 Proportional | gain 1 | 0 | links  subtract1 \n----------------------------\nlevel0col2 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum2 WeightedSum | weights [1, 1, 1] | 0 | links  proportional3 proportional4 proportional5 \nPER: variable2 Variable | 0 \nCOM: subtract2 Subtract | 0 | links  weighted_sum2 variable2 \nOUT: proportional2 Proportional | gain 1 | 0 | links  subtract2 \n----------------------------\nLevel 1 Cols 3\nlevel1col0 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum4 WeightedSum | weights [1, 1, 1] | 0 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum3 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract3 Subtract | 0 | links  weighted_sum4 weighted_sum3 \nOUT: proportional3 Proportional | gain 1 | 0 | links  subtract3 \n----------------------------\nlevel1col1 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum6 WeightedSum | weights [1, 1, 1] | 0 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum5 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract4 Subtract | 0 | links  weighted_sum6 weighted_sum5 \nOUT: proportional4 Proportional | gain 1 | 0 | links  subtract4 \n----------------------------\nlevel1col2 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum8 WeightedSum | weights [1, 1, 1] | 0 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum7 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract5 Subtract | 0 | links  weighted_sum8 weighted_sum7 \nOUT: proportional5 Proportional | gain 1 | 0 | links  subtract5 \n----------------------------\nLevel 2 Cols 3\nlevel2col0 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: constant Constant | 0 \nPER: weighted_sum9 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract6 Subtract | 0 | links  constant weighted_sum9 \nOUT: proportional6 Proportional | gain 1 | 0 | links  subtract6 \n----------------------------\nlevel2col1 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: constant1 Constant | 0 \nPER: weighted_sum10 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract7 Subtract | 0 | links  constant1 weighted_sum10 \nOUT: proportional7 Proportional | gain 1 | 0 | links  subtract7 \n----------------------------\nlevel2col2 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: constant2 Constant | 0 \nPER: weighted_sum11 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract8 Subtract | 0 | links  constant2 weighted_sum11 \nOUT: proportional8 Proportional | gain 1 | 0 | links  subtract8 \n----------------------------\nPOST: postcon Constant | 10 \n**************************\n\n\n\n#FunctionsList.getInstance().report()\n\nCreate a hierarchy from a configuration.\n\nconfig = hpct.get_config()\nprint(config)\n\n{'type': 'PCTHierarchy', 'name': 'pcthierarchy', 'pre': {'pre0': {'type': 'Constant', 'name': 'precon', 'value': 5, 'links': {}}}, 'levels': {'level0': {'level': 0, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'level0col0', 'refcoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum', 'value': 0, 'links': {0: 'proportional3', 1: 'proportional4', 2: 'proportional5'}, 'weights': [1, 1, 1]}}, 'percoll': {'0': {'type': 'Variable', 'name': 'variable', 'value': 0, 'links': {}}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract', 'value': 0, 'links': {0: 'weighted_sum', 1: 'variable'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {0: 'subtract'}, 'gain': 1}}}}, 'col1': {'col': 1, 'node': {'type': 'PCTNode', 'name': 'level0col1', 'refcoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum1', 'value': 0, 'links': {0: 'proportional3', 1: 'proportional4', 2: 'proportional5'}, 'weights': [1, 1, 1]}}, 'percoll': {'0': {'type': 'Variable', 'name': 'variable1', 'value': 0, 'links': {}}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract1', 'value': 0, 'links': {0: 'weighted_sum1', 1: 'variable1'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional1', 'value': 0, 'links': {0: 'subtract1'}, 'gain': 1}}}}, 'col2': {'col': 2, 'node': {'type': 'PCTNode', 'name': 'level0col2', 'refcoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum2', 'value': 0, 'links': {0: 'proportional3', 1: 'proportional4', 2: 'proportional5'}, 'weights': [1, 1, 1]}}, 'percoll': {'0': {'type': 'Variable', 'name': 'variable2', 'value': 0, 'links': {}}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract2', 'value': 0, 'links': {0: 'weighted_sum2', 1: 'variable2'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional2', 'value': 0, 'links': {0: 'subtract2'}, 'gain': 1}}}}}}, 'level1': {'level': 1, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'level1col0', 'refcoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum4', 'value': 0, 'links': {0: 'proportional6', 1: 'proportional7', 2: 'proportional8'}, 'weights': [1, 1, 1]}}, 'percoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum3', 'value': 0, 'links': {0: 'variable', 1: 'variable1', 2: 'variable2'}, 'weights': [1, 1, 1]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract3', 'value': 0, 'links': {0: 'weighted_sum4', 1: 'weighted_sum3'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional3', 'value': 0, 'links': {0: 'subtract3'}, 'gain': 1}}}}, 'col1': {'col': 1, 'node': {'type': 'PCTNode', 'name': 'level1col1', 'refcoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum6', 'value': 0, 'links': {0: 'proportional6', 1: 'proportional7', 2: 'proportional8'}, 'weights': [1, 1, 1]}}, 'percoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum5', 'value': 0, 'links': {0: 'variable', 1: 'variable1', 2: 'variable2'}, 'weights': [1, 1, 1]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract4', 'value': 0, 'links': {0: 'weighted_sum6', 1: 'weighted_sum5'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional4', 'value': 0, 'links': {0: 'subtract4'}, 'gain': 1}}}}, 'col2': {'col': 2, 'node': {'type': 'PCTNode', 'name': 'level1col2', 'refcoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum8', 'value': 0, 'links': {0: 'proportional6', 1: 'proportional7', 2: 'proportional8'}, 'weights': [1, 1, 1]}}, 'percoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum7', 'value': 0, 'links': {0: 'variable', 1: 'variable1', 2: 'variable2'}, 'weights': [1, 1, 1]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract5', 'value': 0, 'links': {0: 'weighted_sum8', 1: 'weighted_sum7'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional5', 'value': 0, 'links': {0: 'subtract5'}, 'gain': 1}}}}}}, 'level2': {'level': 2, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'level2col0', 'refcoll': {'0': {'type': 'Constant', 'name': 'constant', 'value': 0, 'links': {}}}, 'percoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum9', 'value': 0, 'links': {0: 'weighted_sum3', 1: 'weighted_sum5', 2: 'weighted_sum7'}, 'weights': [1, 1, 1]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract6', 'value': 0, 'links': {0: 'constant', 1: 'weighted_sum9'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional6', 'value': 0, 'links': {0: 'subtract6'}, 'gain': 1}}}}, 'col1': {'col': 1, 'node': {'type': 'PCTNode', 'name': 'level2col1', 'refcoll': {'0': {'type': 'Constant', 'name': 'constant1', 'value': 0, 'links': {}}}, 'percoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum10', 'value': 0, 'links': {0: 'weighted_sum3', 1: 'weighted_sum5', 2: 'weighted_sum7'}, 'weights': [1, 1, 1]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract7', 'value': 0, 'links': {0: 'constant1', 1: 'weighted_sum10'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional7', 'value': 0, 'links': {0: 'subtract7'}, 'gain': 1}}}}, 'col2': {'col': 2, 'node': {'type': 'PCTNode', 'name': 'level2col2', 'refcoll': {'0': {'type': 'Constant', 'name': 'constant2', 'value': 0, 'links': {}}}, 'percoll': {'0': {'type': 'WeightedSum', 'name': 'weighted_sum11', 'value': 0, 'links': {0: 'weighted_sum3', 1: 'weighted_sum5', 2: 'weighted_sum7'}, 'weights': [1, 1, 1]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract8', 'value': 0, 'links': {0: 'constant2', 1: 'weighted_sum11'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional8', 'value': 0, 'links': {0: 'subtract8'}, 'gain': 1}}}}}}}, 'post': {'post0': {'type': 'Constant', 'name': 'postcon', 'value': 10, 'links': {}}}}\n\n\n\n# h = PCTHierarchy.from_config(config, namespace=namespace)\nh = PCTHierarchy.from_config(config)\n\n\nassert h.get_config() == hpct.get_config()",
    "crumbs": [
      "PCTHierarchy Usage"
    ]
  },
  {
    "objectID": "pcthierarchy_usage.html#viewing-a-hierarchy",
    "href": "pcthierarchy_usage.html#viewing-a-hierarchy",
    "title": "PCTHierarchy Usage",
    "section": "Viewing a Hierarchy",
    "text": "Viewing a Hierarchy\nThe hierarchy details can be viewed as a summary.\n\nhpct.get_node(2,0).get_function('reference').set_value(1)\nhpct.get_node(2,1).get_function('reference').set_value(1)\nhpct.get_node(2,2).get_function('reference').set_value(1)\nfor level in range(3):\n    for col in range(3):\n        hpct.get_node(level,col).get_function('output').set_property('gain', 10)\nhpct.summary()\n\n**************************\npcthierarchy PCTHierarchy [3, 3, 3] ccff3ef2-036f-11f0-9f08-04d9f58727ab\n--------------------------\nPRE: precon Constant | 5 \nLevel 0 Cols 3\nlevel0col0 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum WeightedSum | weights [1, 1, 1] | 0 | links  proportional3 proportional4 proportional5 \nPER: variable Variable | 0 \nCOM: subtract Subtract | 0 | links  weighted_sum variable \nOUT: proportional Proportional | gain 10 | 0 | links  subtract \n----------------------------\nlevel0col1 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum1 WeightedSum | weights [1, 1, 1] | 0 | links  proportional3 proportional4 proportional5 \nPER: variable1 Variable | 0 \nCOM: subtract1 Subtract | 0 | links  weighted_sum1 variable1 \nOUT: proportional1 Proportional | gain 10 | 0 | links  subtract1 \n----------------------------\nlevel0col2 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum2 WeightedSum | weights [1, 1, 1] | 0 | links  proportional3 proportional4 proportional5 \nPER: variable2 Variable | 0 \nCOM: subtract2 Subtract | 0 | links  weighted_sum2 variable2 \nOUT: proportional2 Proportional | gain 10 | 0 | links  subtract2 \n----------------------------\nLevel 1 Cols 3\nlevel1col0 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum4 WeightedSum | weights [1, 1, 1] | 0 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum3 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract3 Subtract | 0 | links  weighted_sum4 weighted_sum3 \nOUT: proportional3 Proportional | gain 10 | 0 | links  subtract3 \n----------------------------\nlevel1col1 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum6 WeightedSum | weights [1, 1, 1] | 0 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum5 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract4 Subtract | 0 | links  weighted_sum6 weighted_sum5 \nOUT: proportional4 Proportional | gain 10 | 0 | links  subtract4 \n----------------------------\nlevel1col2 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: weighted_sum8 WeightedSum | weights [1, 1, 1] | 0 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum7 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract5 Subtract | 0 | links  weighted_sum8 weighted_sum7 \nOUT: proportional5 Proportional | gain 10 | 0 | links  subtract5 \n----------------------------\nLevel 2 Cols 3\nlevel2col0 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: constant Constant | 1 \nPER: weighted_sum9 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract6 Subtract | 0 | links  constant weighted_sum9 \nOUT: proportional6 Proportional | gain 10 | 0 | links  subtract6 \n----------------------------\nlevel2col1 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: constant1 Constant | 1 \nPER: weighted_sum10 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract7 Subtract | 0 | links  constant1 weighted_sum10 \nOUT: proportional7 Proportional | gain 10 | 0 | links  subtract7 \n----------------------------\nlevel2col2 PCTNode ccff3ef2-036f-11f0-9f08-04d9f58727ab\n----------------------------\nREF: constant2 Constant | 1 \nPER: weighted_sum11 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract8 Subtract | 0 | links  constant2 weighted_sum11 \nOUT: proportional8 Proportional | gain 10 | 0 | links  subtract8 \n----------------------------\nPOST: postcon Constant | 10 \n**************************\n\n\nThe hierarchy details can be viewed as a configuration. That configuration can be used to create a hierarchy, as shown above.\n\nhpct.get_config()\n\n{'type': 'PCTHierarchy',\n 'name': 'pcthierarchy',\n 'pre': {'pre0': {'type': 'Constant',\n   'name': 'precon',\n   'value': 5,\n   'links': {}}},\n 'levels': {'level0': {'level': 0,\n   'nodes': {'col0': {'col': 0,\n     'node': {'type': 'PCTNode',\n      'name': 'level0col0',\n      'refcoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum',\n        'value': 0,\n        'links': {0: 'proportional3', 1: 'proportional4', 2: 'proportional5'},\n        'weights': [1, 1, 1]}},\n      'percoll': {'0': {'type': 'Variable',\n        'name': 'variable',\n        'value': 0,\n        'links': {}}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract',\n        'value': 0,\n        'links': {0: 'weighted_sum', 1: 'variable'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional',\n        'value': 0,\n        'links': {0: 'subtract'},\n        'gain': 10}}}},\n    'col1': {'col': 1,\n     'node': {'type': 'PCTNode',\n      'name': 'level0col1',\n      'refcoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum1',\n        'value': 0,\n        'links': {0: 'proportional3', 1: 'proportional4', 2: 'proportional5'},\n        'weights': [1, 1, 1]}},\n      'percoll': {'0': {'type': 'Variable',\n        'name': 'variable1',\n        'value': 0,\n        'links': {}}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract1',\n        'value': 0,\n        'links': {0: 'weighted_sum1', 1: 'variable1'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional1',\n        'value': 0,\n        'links': {0: 'subtract1'},\n        'gain': 10}}}},\n    'col2': {'col': 2,\n     'node': {'type': 'PCTNode',\n      'name': 'level0col2',\n      'refcoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum2',\n        'value': 0,\n        'links': {0: 'proportional3', 1: 'proportional4', 2: 'proportional5'},\n        'weights': [1, 1, 1]}},\n      'percoll': {'0': {'type': 'Variable',\n        'name': 'variable2',\n        'value': 0,\n        'links': {}}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract2',\n        'value': 0,\n        'links': {0: 'weighted_sum2', 1: 'variable2'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional2',\n        'value': 0,\n        'links': {0: 'subtract2'},\n        'gain': 10}}}}}},\n  'level1': {'level': 1,\n   'nodes': {'col0': {'col': 0,\n     'node': {'type': 'PCTNode',\n      'name': 'level1col0',\n      'refcoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum4',\n        'value': 0,\n        'links': {0: 'proportional6', 1: 'proportional7', 2: 'proportional8'},\n        'weights': [1, 1, 1]}},\n      'percoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum3',\n        'value': 0,\n        'links': {0: 'variable', 1: 'variable1', 2: 'variable2'},\n        'weights': [1, 1, 1]}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract3',\n        'value': 0,\n        'links': {0: 'weighted_sum4', 1: 'weighted_sum3'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional3',\n        'value': 0,\n        'links': {0: 'subtract3'},\n        'gain': 10}}}},\n    'col1': {'col': 1,\n     'node': {'type': 'PCTNode',\n      'name': 'level1col1',\n      'refcoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum6',\n        'value': 0,\n        'links': {0: 'proportional6', 1: 'proportional7', 2: 'proportional8'},\n        'weights': [1, 1, 1]}},\n      'percoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum5',\n        'value': 0,\n        'links': {0: 'variable', 1: 'variable1', 2: 'variable2'},\n        'weights': [1, 1, 1]}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract4',\n        'value': 0,\n        'links': {0: 'weighted_sum6', 1: 'weighted_sum5'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional4',\n        'value': 0,\n        'links': {0: 'subtract4'},\n        'gain': 10}}}},\n    'col2': {'col': 2,\n     'node': {'type': 'PCTNode',\n      'name': 'level1col2',\n      'refcoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum8',\n        'value': 0,\n        'links': {0: 'proportional6', 1: 'proportional7', 2: 'proportional8'},\n        'weights': [1, 1, 1]}},\n      'percoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum7',\n        'value': 0,\n        'links': {0: 'variable', 1: 'variable1', 2: 'variable2'},\n        'weights': [1, 1, 1]}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract5',\n        'value': 0,\n        'links': {0: 'weighted_sum8', 1: 'weighted_sum7'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional5',\n        'value': 0,\n        'links': {0: 'subtract5'},\n        'gain': 10}}}}}},\n  'level2': {'level': 2,\n   'nodes': {'col0': {'col': 0,\n     'node': {'type': 'PCTNode',\n      'name': 'level2col0',\n      'refcoll': {'0': {'type': 'Constant',\n        'name': 'constant',\n        'value': 1,\n        'links': {}}},\n      'percoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum9',\n        'value': 0,\n        'links': {0: 'weighted_sum3', 1: 'weighted_sum5', 2: 'weighted_sum7'},\n        'weights': [1, 1, 1]}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract6',\n        'value': 0,\n        'links': {0: 'constant', 1: 'weighted_sum9'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional6',\n        'value': 0,\n        'links': {0: 'subtract6'},\n        'gain': 10}}}},\n    'col1': {'col': 1,\n     'node': {'type': 'PCTNode',\n      'name': 'level2col1',\n      'refcoll': {'0': {'type': 'Constant',\n        'name': 'constant1',\n        'value': 1,\n        'links': {}}},\n      'percoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum10',\n        'value': 0,\n        'links': {0: 'weighted_sum3', 1: 'weighted_sum5', 2: 'weighted_sum7'},\n        'weights': [1, 1, 1]}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract7',\n        'value': 0,\n        'links': {0: 'constant1', 1: 'weighted_sum10'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional7',\n        'value': 0,\n        'links': {0: 'subtract7'},\n        'gain': 10}}}},\n    'col2': {'col': 2,\n     'node': {'type': 'PCTNode',\n      'name': 'level2col2',\n      'refcoll': {'0': {'type': 'Constant',\n        'name': 'constant2',\n        'value': 1,\n        'links': {}}},\n      'percoll': {'0': {'type': 'WeightedSum',\n        'name': 'weighted_sum11',\n        'value': 0,\n        'links': {0: 'weighted_sum3', 1: 'weighted_sum5', 2: 'weighted_sum7'},\n        'weights': [1, 1, 1]}},\n      'comcoll': {'0': {'type': 'Subtract',\n        'name': 'subtract8',\n        'value': 0,\n        'links': {0: 'constant2', 1: 'weighted_sum11'}}},\n      'outcoll': {'0': {'type': 'Proportional',\n        'name': 'proportional8',\n        'value': 0,\n        'links': {0: 'subtract8'},\n        'gain': 10}}}}}}},\n 'post': {'post0': {'type': 'Constant',\n   'name': 'postcon',\n   'value': 10,\n   'links': {}}}}\n\n\nGet the output function, which will be the output function of the last node, or the last item of the post-processor functions, if present.\n\nlink = hpct.get_output_function()\nprint(link.get_config())\n\n{'type': 'Constant', 'name': 'postcon', 'value': 10, 'links': {}}\n\n\nThe hierarhcy can also be viewed graphically as a network of connected nodes.\n\nimport os\n\n\nimport networkx as nx\nahpct = PCTHierarchy(2,2, links=\"dense\")\n\ntest = 2\nif test==1:\n    g = ahpct.graph()\n    pos=graphviz_layout(g, prog='dot')\n    nx.draw(g, pos=pos, with_labels=True, font_size=12, font_weight='bold', node_color='red',  node_size=500)\n\nif test ==2:\n    g = ahpct.graph()\n    pos = nx.multipartite_layout(g, subset_key=\"layer\", align='horizontal')\n    pos['constant1'][0]+=0.2\n    c = pos['constant1'][0]\n    print(c)\n    nx.draw(g, pos=pos, with_labels=True, font_weight='bold', node_color='red',  node_size=750, arrowsize=25)\n\nif test ==3:\n    if os.name=='nt':        \n        ahpct.draw(file=\"ahpct.png\",  node_size=1500, figsize=(10,10))# with_labels=True, font_weight='bold', node_color='red',  node_size=500, arrowsize=25, align='vertical'\n\n0.7454545454545454",
    "crumbs": [
      "PCTHierarchy Usage"
    ]
  },
  {
    "objectID": "pcthierarchy_usage.html#running-a-hierarchy",
    "href": "pcthierarchy_usage.html#running-a-hierarchy",
    "title": "PCTHierarchy Usage",
    "section": "Running a hierarchy",
    "text": "Running a hierarchy\nThe hierachy can be run once by calling itself. The verbose flag will print the computations to the screen.\n\nhpct(verbose=True)\n\n5.000 \nlevel0col0 0.000 0.000 0.000 0.000 \nlevel0col1 0.000 0.000 0.000 0.000 \nlevel0col2 0.000 0.000 0.000 0.000 \nlevel1col0 0.000 0.000 0.000 0.000 \nlevel1col1 0.000 0.000 0.000 0.000 \nlevel1col2 0.000 0.000 0.000 0.000 \nlevel2col0 1.000 0.000 1.000 10.000 \nlevel2col1 1.000 0.000 1.000 10.000 \nlevel2col2 1.000 0.000 1.000 10.000 \n10.000 \n\n\n10\n\n\nA hierarchy can be executed with the “run()” method, providing the number of iterations to run.\n\nhpct1 = PCTHierarchy(3,3, pre=[pre], post=[post], history=True, links=\"dense\")\nnamespace=hpct1.namespace\nhpct1.get_node(2,0).get_function('reference').set_value(1)\nhpct1.get_node(2,1).get_function('reference').set_value(1)\nhpct1.get_node(2,2).get_function('reference').set_value(1)\nfor level in range(3):\n    for col in range(3):\n        hpct1.get_node(level,col).get_function('output').set_property('gain', 10)\n\nhpct1.run(10)\n\n10",
    "crumbs": [
      "PCTHierarchy Usage"
    ]
  },
  {
    "objectID": "pcthierarchy_usage.html#viewing-data",
    "href": "pcthierarchy_usage.html#viewing-data",
    "title": "PCTHierarchy Usage",
    "section": "Viewing Data",
    "text": "Viewing Data\nIf the hierarchy is created with the “history” flag equal to True, the data can be retrieved for each node. The node is accessed by specifying the row and column within the hierarchy.\n\nprint(hpct1.get_node(1,1).history.data)\nassert hpct1.get_node(1,1).history.data == {'refcoll': {'weighted_sum6': [0.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0]}, 'percoll': {'weighted_sum5': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, 'comcoll': {'subtract4': [0.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0]}, 'outcoll': {'proportional4': [0.0, 300.0, 300.0, 300.0, 300.0, 300.0, 300.0, 300.0, 300.0, 300.0]}}\n\n{'refcoll': {'weighted_sum6': [0, 30, 30, 30, 30, 30, 30, 30, 30, 30]}, 'percoll': {'weighted_sum5': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, 'comcoll': {'subtract4': [0, 30, 30, 30, 30, 30, 30, 30, 30, 30]}, 'outcoll': {'proportional4': [0, 300, 300, 300, 300, 300, 300, 300, 300, 300]}}",
    "crumbs": [
      "PCTHierarchy Usage"
    ]
  },
  {
    "objectID": "pcthierarchy_usage.html#save-and-load",
    "href": "pcthierarchy_usage.html#save-and-load",
    "title": "PCTHierarchy Usage",
    "section": "Save and Load",
    "text": "Save and Load\nSave a hierarchy to file.\n\nimport json\n\n\nhpct1.save(\"hpct.json\")\n\nCreate a hierarchy from file.\n\n#loaded = PCTHierarchy.load(\"hpct.json\", clear=False, namespace=namespace)\nloaded = PCTHierarchy.load(\"hpct.json\", clear=False)\nloaded.summary()\n\n**************************\npcthierarchy PCTHierarchy [3, 3, 3] ceb3566b-036f-11f0-894f-04d9f58727ab\n--------------------------\nPRE: precon Constant | 5 \nLevel 0 Cols 3\nlevel0col0 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: weighted_sum WeightedSum | weights [1, 1, 1] | 900 | links  proportional3 proportional4 proportional5 \nPER: variable Variable | 0 \nCOM: subtract Subtract | 900 | links  weighted_sum variable \nOUT: proportional Proportional | gain 10 | 9000 | links  subtract \n----------------------------\nlevel0col1 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: weighted_sum1 WeightedSum | weights [1, 1, 1] | 900 | links  proportional3 proportional4 proportional5 \nPER: variable1 Variable | 0 \nCOM: subtract1 Subtract | 900 | links  weighted_sum1 variable1 \nOUT: proportional1 Proportional | gain 10 | 9000 | links  subtract1 \n----------------------------\nlevel0col2 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: weighted_sum2 WeightedSum | weights [1, 1, 1] | 900 | links  proportional3 proportional4 proportional5 \nPER: variable2 Variable | 0 \nCOM: subtract2 Subtract | 900 | links  weighted_sum2 variable2 \nOUT: proportional2 Proportional | gain 10 | 9000 | links  subtract2 \n----------------------------\nLevel 1 Cols 3\nlevel1col0 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: weighted_sum4 WeightedSum | weights [1, 1, 1] | 30 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum3 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract3 Subtract | 30 | links  weighted_sum4 weighted_sum3 \nOUT: proportional3 Proportional | gain 10 | 300 | links  subtract3 \n----------------------------\nlevel1col1 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: weighted_sum6 WeightedSum | weights [1, 1, 1] | 30 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum5 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract4 Subtract | 30 | links  weighted_sum6 weighted_sum5 \nOUT: proportional4 Proportional | gain 10 | 300 | links  subtract4 \n----------------------------\nlevel1col2 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: weighted_sum8 WeightedSum | weights [1, 1, 1] | 30 | links  proportional6 proportional7 proportional8 \nPER: weighted_sum7 WeightedSum | weights [1, 1, 1] | 0 | links  variable variable1 variable2 \nCOM: subtract5 Subtract | 30 | links  weighted_sum8 weighted_sum7 \nOUT: proportional5 Proportional | gain 10 | 300 | links  subtract5 \n----------------------------\nLevel 2 Cols 3\nlevel2col0 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: constant Constant | 1 \nPER: weighted_sum9 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract6 Subtract | 1 | links  constant weighted_sum9 \nOUT: proportional6 Proportional | gain 10 | 10 | links  subtract6 \n----------------------------\nlevel2col1 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: constant1 Constant | 1 \nPER: weighted_sum10 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract7 Subtract | 1 | links  constant1 weighted_sum10 \nOUT: proportional7 Proportional | gain 10 | 10 | links  subtract7 \n----------------------------\nlevel2col2 PCTNode ceb3566b-036f-11f0-894f-04d9f58727ab\n----------------------------\nREF: constant2 Constant | 1 \nPER: weighted_sum11 WeightedSum | weights [1, 1, 1] | 0 | links  weighted_sum3 weighted_sum5 weighted_sum7 \nCOM: subtract8 Subtract | 1 | links  constant2 weighted_sum11 \nOUT: proportional8 Proportional | gain 10 | 10 | links  subtract8 \n----------------------------\nPOST: postcon Constant | 10 \n**************************\n\n\n\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n\n# https://matplotlib.org/3.1.0/gallery/color/named_colors.html\nloaded.draw(with_edge_labels=True, color_mapping={'w':'aqua','c':'limegreen','s':'goldenrod', 'p':'red', 'v':'silver'})\n\n\n\n\n\n\n\n\n\nExamples\nBuild a hierarchy by adding nodes and functions manually.\nCreate an empty hierarchy.\n\nmyhpct = PCTHierarchy()\nnamespace=myhpct.namespace\nmyhpct.summary(build=False)\n\n**************************\npcthierarchy PCTHierarchy [] cf9927d0-036f-11f0-8e9c-04d9f58727ab\n--------------------------\nPRE: None\nPOST: None\n**************************\n\n\nAdd a node. Then nodes at particular positions.\n\nmyhpct.add_node(PCTNode(namespace=namespace))\nmyhpct.add_node(PCTNode(namespace=namespace), level=1)\nmyhpct.add_node(PCTNode(namespace=namespace), level=0)\nmyhpct.summary(build=False)\n\n**************************\npcthierarchy PCTHierarchy [2, 1] cf9927d0-036f-11f0-8e9c-04d9f58727ab\n--------------------------\nPRE: None\nLevel 0 Cols 2\npctnode2 PCTNode cf9927d0-036f-11f0-8e9c-04d9f58727ab\n----------------------------\nREF: constant2 Constant | 0 \nPER: variable2 Variable | 0 \nCOM: subtract2 Subtract | 0 \nOUT: proportional2 Proportional | gain 1 | 0 \n----------------------------\npctnode PCTNode cf9927d0-036f-11f0-8e9c-04d9f58727ab\n----------------------------\nREF: constant Constant | 0 \nPER: variable Variable | 0 \nCOM: subtract Subtract | 0 \nOUT: proportional Proportional | gain 1 | 0 \n----------------------------\nLevel 1 Cols 1\npctnode1 PCTNode cf9927d0-036f-11f0-8e9c-04d9f58727ab\n----------------------------\nREF: constant1 Constant | 0 \nPER: variable1 Variable | 0 \nCOM: subtract1 Subtract | 0 \nOUT: proportional1 Proportional | gain 1 | 0 \n----------------------------\nPOST: None\n**************************\n\n\nReplace functions at particular positions in the hierarchy.\n\nmyhpct.insert_function(level=0, col=0, collection=\"perception\", function=Proportional(3, name=\"prop2\", namespace=namespace))\nmyhpct.insert_function(level=1, col=0, collection=\"perception\", function=WeightedSum(weights=[1,1], name=\"wsum\", namespace=namespace))\nmyhpct.insert_function(level=0, col=1, collection=\"reference\", function=Proportional(1, name=\"passthru\", namespace=namespace))\n\nAdd pre and post processor functions.\n\nmyhpct.add_preprocessor(Constant(1, name=\"cons1\", namespace=namespace))\nmyhpct.add_preprocessor(Proportional(5, name=\"prop1\", namespace=namespace))\nmyhpct.add_postprocessor(Proportional(5, name=\"postprop1\", namespace=namespace))\nmyhpct.add_postprocessor(Proportional(5, name=\"postprop2\", namespace=namespace))\n\nLink the functions together.\n\nmyhpct.set_links(\"prop1\", \"cons1\")\nmyhpct.set_links(\"prop2\", \"prop1\")\nmyhpct.add_links(\"wsum\", \"prop2\", \"variable\")\nmyhpct.set_links(\"passthru\", \"proportional1\")\nmyhpct.set_links(\"postprop1\", \"proportional\")\nmyhpct.set_links(\"postprop2\", \"postprop1\")\n\n\nmyhpct.get_node(0,0).get_function('reference').set_value(1)\nmyhpct.get_node(1,0).get_function('reference').set_value(1)\nmyhpct.get_node(0,0).get_function('output').set_property('gain', 10)\nmyhpct.get_node(0,1).get_function('output').set_property('gain', 10)\nmyhpct.get_node(1,0).get_function('output').set_property('gain', 10)\nmyhpct.summary(build=True)\n\n**************************\npcthierarchy PCTHierarchy [2, 1] cf9927d0-036f-11f0-8e9c-04d9f58727ab\n--------------------------\nPRE: cons1 Constant | 1 \nprop1 Proportional | gain 5 | 0 | links  cons1 \nLevel 0 Cols 2\npctnode2 PCTNode cf9927d0-036f-11f0-8e9c-04d9f58727ab\n----------------------------\nREF: constant2 Constant | 1 \nPER: prop2 Proportional | gain 3 | 0 | links  prop1 \nCOM: subtract2 Subtract | 0 | links  constant2 prop2 \nOUT: proportional2 Proportional | gain 10 | 0 | links  subtract2 \n----------------------------\npctnode PCTNode cf9927d0-036f-11f0-8e9c-04d9f58727ab\n----------------------------\nREF: passthru Proportional | gain 1 | 0 | links  proportional1 \nPER: variable Variable | 0 \nCOM: subtract Subtract | 0 | links  passthru variable \nOUT: proportional Proportional | gain 10 | 0 | links  subtract \n----------------------------\nLevel 1 Cols 1\npctnode1 PCTNode cf9927d0-036f-11f0-8e9c-04d9f58727ab\n----------------------------\nREF: constant1 Constant | 1 \nPER: wsum WeightedSum | weights [1, 1] | 0 | links  prop2 variable \nCOM: subtract1 Subtract | 0 | links  constant1 wsum \nOUT: proportional1 Proportional | gain 10 | 0 | links  subtract1 \n----------------------------\nPOST: postprop1 Proportional | gain 5 | 0 | links  proportional \npostprop2 Proportional | gain 5 | 0 | links  postprop1 \n**************************\n\n\n\nmyhpctconfig = myhpct.get_config()\n#print(myhpctconfig)\nassert myhpctconfig == {'type': 'PCTHierarchy', 'name': 'pcthierarchy', 'pre': {'pre0': {'type': 'Constant', 'name': 'cons1', 'value': 1, 'links': {}}, 'pre1': {'type': 'Proportional', 'name': 'prop1', 'value': 0, 'links': {0: 'cons1'}, 'gain': 5}}, 'levels': {'level0': {'level': 0, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'pctnode2', 'refcoll': {'0': {'type': 'Constant', 'name': 'constant2', 'value': 1, 'links': {}}}, 'percoll': {'0': {'type': 'Proportional', 'name': 'prop2', 'value': 0, 'links': {0: 'prop1'}, 'gain': 3}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract2', 'value': 0, 'links': {0: 'constant2', 1: 'prop2'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional2', 'value': 0, 'links': {0: 'subtract2'}, 'gain': 10}}}}, 'col1': {'col': 1, 'node': {'type': 'PCTNode', 'name': 'pctnode', 'refcoll': {'0': {'type': 'Proportional', 'name': 'passthru', 'value': 0, 'links': {0: 'proportional1'}, 'gain': 1}}, 'percoll': {'0': {'type': 'Variable', 'name': 'variable', 'value': 0, 'links': {}}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract', 'value': 0, 'links': {0: 'passthru', 1: 'variable'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {0: 'subtract'}, 'gain': 10}}}}}}, 'level1': {'level': 1, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'pctnode1', 'refcoll': {'0': {'type': 'Constant', 'name': 'constant1', 'value': 1, 'links': {}}}, 'percoll': {'0': {'type': 'WeightedSum', 'name': 'wsum', 'value': 0, 'links': {0: 'prop2', 1: 'variable'}, 'weights': [1.0, 1.0]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract1', 'value': 0, 'links': {0: 'constant1', 1: 'wsum'}}}, 'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional1', 'value': 0, 'links': {0: 'subtract1'}, 'gain': 10}}}}}}}, 'post': {'post0': {'type': 'Proportional', 'name': 'postprop1', 'value': 0, 'links': {0: 'proportional'}, 'gain': 5}, 'post1': {'type': 'Proportional', 'name': 'postprop2', 'value': 0, 'links': {0: 'postprop1'}, 'gain': 5}}}\n\nDefine the order in which the node will be processed.\n\nmyhpct.set_order([\"pctnode2\", \"pctnode1\", \"pctnode\"])\n\nRun the hierarchy once.\n\nout = myhpct(verbose=True)\nprint(out)\nassert out == -35000\n\n1.000 5.000 \npctnode2 1.000 15.000 -14.000 -140.000 \npctnode1 1.000 15.000 -14.000 -140.000 \npctnode -140.000 0.000 -140.000 -1400.000 \n-7000.000 -35000.000 \n-35000\n\n\n\n# config =  {'type': 'Individual', 'name': 'pcthierarchy', 'pre': {'pre0': {'type': 'CartPoleV1', 'name': 'CartPoleV1', 'value': [0.03498833197860944, 0.20994561633454428, 0.012668159509212712, -0.2705237130920193, 0.047656152654718356], 'links': {0: 'Action1'}, 'env_name': 'CartPole-v1', 'reward': 1.0, 'done': False, 'info': {}}, 'pre1': {'type': 'IndexedParameter', 'name': 'ICV', 'value': 0.20994561633454428, 'links': {0: 'CartPoleV1'}, 'index': 1}, 'pre2': {'type': 'IndexedParameter', 'name': 'ICP', 'value': 0.03498833197860944, 'links': {0: 'CartPoleV1'}, 'index': 0}, 'pre3': {'type': 'IndexedParameter', 'name': 'IPV', 'value': -0.2705237130920193, 'links': {0: 'CartPoleV1'}, 'index': 3}, 'pre4': {'type': 'IndexedParameter', 'name': 'IPA', 'value': 0.012668159509212712, 'links': {0: 'CartPoleV1'}, 'index': 2}}, 'levels': {'level0': {'level': 0, 'nodes': {'col0': {'col': 0, 'node': {'type': 'PCTNode', 'name': 'L0C0', 'refcoll': {'0': {'type': 'EAConstant', 'name': 'RL0C0', 'value': 0, 'links': {}}}, 'percoll': {'0': {'type': 'EAWeightedSum', 'name': 'PL0C0', 'value': -0.2705237130920193, 'links': {0: 'ICV', 1: 'ICP', 2: 'IPV', 3: 'IPA'}, 'weights': [0, 0, 1, 0]}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'CL0C0', 'value': 0.2705237130920193, 'links': {0: 'RL0C0', 1: 'PL0C0'}}}, 'outcoll': {'0': {'type': 'EAProportional', 'name': 'OL0C0', 'value': -0.05046166000036782, 'links': {0: 'CL0C0'}, 'gain': -0.1865332226280776}}}}}}}, 'post': {'post0': {'type': 'EAWeightedSum', 'name': 'Action1', 'value': -0.005282911840894066, 'links': {0: 'OL0C0'}, 'weights': [0.10469159835121472]}}}\n# ind = PCTHierarchy.from_config(config)\n\n\nfrom pct.errors import RootSumSquaredError, TotalError\n\ner = RootSumSquaredError()\nte = TotalError(error_response=er, limit=250,min=True)   \nte.add_error_data([1, 2])\nprint(te)\n\n\nhpct = PCTHierarchy(1,1,error_collector=te)\nhpct.run(steps=5, verbose=True)\n\n\nerr=te.error()\nprint(err)\n\nTotalError limit:250, limit_exceeded:False, : RootSumSquaredError error_response:2.23606797749979\n[0] \nlevel0col0 0.000 0.000 0.000 0.000 \n\nCurrent score=2.23606797749979\n[1] \nlevel0col0 0.000 0.000 0.000 0.000 \n\nCurrent score=2.23606797749979\n[2] \nlevel0col0 0.000 0.000 0.000 0.000 \n\nCurrent score=2.23606797749979\n[3] \nlevel0col0 0.000 0.000 0.000 0.000 \n\nCurrent score=2.23606797749979\n[4] \nlevel0col0 0.000 0.000 0.000 0.000 \n\nCurrent score=2.23606797749979\n2.23606797749979",
    "crumbs": [
      "PCTHierarchy Usage"
    ]
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "import gym, warnings\nrender=False\nruns=1\n\nGym has been unmaintained since 2022 and does not support NumPy 2.0 amongst other critical functionality.\nPlease upgrade to Gymnasium, the maintained drop-in replacement of Gym, or contact the authors of your software and request that they upgrade.\nSee the migration guide at https://gymnasium.farama.org/introduction/migration_guide/ for additional information.\nrender=True\nruns=2000",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#cartpole",
    "href": "examples.html#cartpole",
    "title": "Examples",
    "section": "Cartpole",
    "text": "Cartpole\nCartpole is an Open AI gym environment for the inverted pendulum problem. The goal is to keep the pole balanced, by moving the cart left or right.\nThe environment provides observations (perceptions) for the state of the cart and pole.\n0 - Cart Position\n1 - Cart Velocity\n2 - Pole Angle\n3 - Pole Angular Velocity\nIt takes one value, of 0 or 1, for applying a force to the left or right, respectively.\nThe PCT solution is a four-level hierarchy for controlling the perceptions at goal values. Only one goal reference is manually set, the highest level which is the pole angle of 0.\nThis example shows how a perceptual control hierarchy can be implemented with this library.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pct.hierarchy import PCTHierarchy\nfrom pct.putils import FunctionsList\nfrom pct.environments import CartPoleV1\nfrom pct.functions import IndexedParameter\nfrom pct.functions import Integration\nfrom pct.functions import GreaterThan\nfrom pct.functions import PassOn\n\nCreate a hierarchy of 4 levels each with one node.\n\ncartpole_hierarchy = PCTHierarchy(levels=4, cols=1, name=\"cartpoleh\", build=False)\nnamespace=cartpole_hierarchy.namespace\ncartpole_hierarchy.get_node(0, 0).name = 'cart_velocity_node'\ncartpole_hierarchy.get_node(1, 0).name = 'cart_position_node'\ncartpole_hierarchy.get_node(2, 0).name = 'pole_velocity_node'\ncartpole_hierarchy.get_node(3, 0).name = 'pole_angle_node'\n#FunctionsList.getInstance().report()\n#cartpole_hierarchy.summary(build=True)\n\nCreate the Cartpole gym environment function. This will apply the “action” output from the hierarchy and provide the new observations.\n\ncartpole = CartPoleV1(name=\"CartPole-v1\", render=render, namespace=namespace, seed=1)\n\nCreate functions for each of the observation parameters of the Cartpole environment. Insert them into the hierarchy at the desired places.\n\ncartpole_hierarchy.insert_function(level=0, col=0, collection=\"perception\", function=IndexedParameter(index=1, name=\"cart_velocity\", links=[cartpole], namespace=namespace))\ncartpole_hierarchy.insert_function(level=1, col=0, collection=\"perception\", function=IndexedParameter(index=0, name=\"cart_position\", links=[cartpole], namespace=namespace))\ncartpole_hierarchy.insert_function(level=2, col=0, collection=\"perception\", function=IndexedParameter(index=3, name=\"pole_velocity\", links=[cartpole], namespace=namespace))\ncartpole_hierarchy.insert_function(level=3, col=0, collection=\"perception\", function=IndexedParameter(index=2, name=\"pole_angle\", links=[cartpole], namespace=namespace))\n\nLink the references to the outputs of the level up.\n\ncartpole_hierarchy.insert_function(level=0, col=0, collection=\"reference\", function=PassOn(name=\"cart_velocity_reference\", links=['proportional1'], namespace=namespace))\ncartpole_hierarchy.insert_function(level=1, col=0, collection=\"reference\", function=PassOn(name=\"cart_position_reference\", links=['proportional2'], namespace=namespace))\ncartpole_hierarchy.insert_function(level=2, col=0, collection=\"reference\", function=PassOn(name=\"pole_velocity_reference\", links=['proportional3'], namespace=namespace))\n\nSet the highest level reference.\n\ntop = cartpole_hierarchy.get_function(level=3, col=0, collection=\"reference\")\ntop.set_name(\"pole_angle_reference\")\ntop.set_value(0)\n\nLink the output of the hierarchy back to the Cartpole environment.\n\ncartpole_hierarchy.summary(build=True)\n\n**************************\ncartpoleh PCTHierarchy [1, 1, 1, 1] eb8b631e-930f-11f0-abda-8cf8c5b8669e\n--------------------------\nPRE: None\nLevel 0 Cols 1\ncart_velocity_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: cart_velocity_reference PassOn | 0 | links  proportional1 \nPER: cart_velocity IndexedParameter | index 1 | 0 | links  CartPole-v1 \nCOM: subtract Subtract | 0 | links  cart_velocity_reference cart_velocity \nOUT: proportional Proportional | gain 1 | 0 | links  subtract \n----------------------------\nLevel 1 Cols 1\ncart_position_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: cart_position_reference PassOn | 0 | links  proportional2 \nPER: cart_position IndexedParameter | index 0 | 0 | links  CartPole-v1 \nCOM: subtract1 Subtract | 0 | links  cart_position_reference cart_position \nOUT: proportional1 Proportional | gain 1 | 0 | links  subtract1 \n----------------------------\nLevel 2 Cols 1\npole_velocity_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: pole_velocity_reference PassOn | 0 | links  proportional3 \nPER: pole_velocity IndexedParameter | index 3 | 0 | links  CartPole-v1 \nCOM: subtract2 Subtract | 0 | links  pole_velocity_reference pole_velocity \nOUT: proportional2 Proportional | gain 1 | 0 | links  subtract2 \n----------------------------\nLevel 3 Cols 1\npole_angle_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: pole_angle_reference Constant | 0 \nPER: pole_angle IndexedParameter | index 2 | 0 | links  CartPole-v1 \nCOM: subtract3 Subtract | 0 | links  pole_angle_reference pole_angle \nOUT: proportional3 Proportional | gain 1 | 0 | links  subtract3 \n----------------------------\nPOST: None\n**************************\n\n\n\ncartpole_hierarchy.insert_function(level=0, col=0, collection=\"output\", function=Integration(gain=-0.05, slow=4, name=\"force\", links='subtract', namespace=namespace))\n\nSet the names and gains of the output functions. This also shows another way of getting a function, by name.\n\nFunctionsList.getInstance().get_function(namespace=namespace, name=\"proportional3\").set_name(\"pole_angle_output\")\nFunctionsList.getInstance().get_function(namespace=namespace, name=\"pole_angle_output\").set_property('gain', 3.5)\n\nFunctionsList.getInstance().get_function(namespace=namespace, name=\"proportional2\").set_name(\"pole_velocity_output\")\nFunctionsList.getInstance().get_function(namespace=namespace, name=\"pole_velocity_output\").set_property('gain', 0.5)\n\nFunctionsList.getInstance().get_function(namespace=namespace, name=\"proportional1\").set_name(\"cart_position_output\")\nFunctionsList.getInstance().get_function(namespace=namespace, name=\"cart_position_output\").set_property('gain', 2)\n\nAdd a post function to convert the output to 1 or 0 as required by the Cartpole environment.\n\ngreaterthan = GreaterThan(threshold=0, upper=1, lower=0, links='force', namespace=namespace)\ncartpole_hierarchy.add_postprocessor(greaterthan)\n\nAdd the cartpole function as one that is executed before the actual hierarchy.\n\ncartpole_hierarchy.add_preprocessor(cartpole)\n\nSet the output of the hierachy as the action input to the Cartpole environment.\n\n#link = cartpole_hierarchy.get_output_function()\ncartpole.add_link(greaterthan)\n\nSit back and observe the brilliance of your efforts.\n\ncartpole_hierarchy.set_order(\"Down\")\n\n\ncartpole_hierarchy.summary()\n\n**************************\ncartpoleh PCTHierarchy [1, 1, 1, 1] eb8b631e-930f-11f0-abda-8cf8c5b8669e\n--------------------------\nPRE: CartPole-v1 CartPoleV1 | 0 | links  greaterthan \nLevel 3 Cols 1\npole_angle_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: pole_angle_reference Constant | 0 \nPER: pole_angle IndexedParameter | index 2 | 0 | links  CartPole-v1 \nCOM: subtract3 Subtract | 0 | links  pole_angle_reference pole_angle \nOUT: pole_angle_output Proportional | gain 3.5 | 0 | links  subtract3 \n----------------------------\nLevel 2 Cols 1\npole_velocity_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: pole_velocity_reference PassOn | 0 | links  pole_angle_output \nPER: pole_velocity IndexedParameter | index 3 | 0 | links  CartPole-v1 \nCOM: subtract2 Subtract | 0 | links  pole_velocity_reference pole_velocity \nOUT: pole_velocity_output Proportional | gain 0.5 | 0 | links  subtract2 \n----------------------------\nLevel 1 Cols 1\ncart_position_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: cart_position_reference PassOn | 0 | links  pole_velocity_output \nPER: cart_position IndexedParameter | index 0 | 0 | links  CartPole-v1 \nCOM: subtract1 Subtract | 0 | links  cart_position_reference cart_position \nOUT: cart_position_output Proportional | gain 2 | 0 | links  subtract1 \n----------------------------\nLevel 0 Cols 1\ncart_velocity_node PCTNode eb8b631e-930f-11f0-abda-8cf8c5b8669e\n----------------------------\nREF: cart_velocity_reference PassOn | 0 | links  cart_position_output \nPER: cart_velocity IndexedParameter | index 1 | 0 | links  CartPole-v1 \nCOM: subtract Subtract | 0 | links  cart_velocity_reference cart_velocity \nOUT: force Integration | gain -0.05 slow 4  | 0 | links  subtract \n----------------------------\nPOST: greaterthan GreaterThan | threshold 0 upper 1 lower 0  | 0 | links  force \n**************************\n\n\n\ncartpole_hierarchy.draw(font_size=10, figsize=(8,12), move={'CartPole-v1': [-0.075, 0]}, node_size=1000, node_color='red')\n\nC:\\Users\\ryoung\\Versioning\\python\\nbdev\\pct\\pct\\hierarchy.py:354: UserWarning:\n\nThis figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n\n\n\n&lt;Figure size 800x1200 with 1 Axes&gt;\n\n\n\ncartpole_hierarchy.save(\"cartpole.json\")\n\n\nimport networkx as nx\ngr = cartpole_hierarchy.graph()\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    print(f\"Graph with {gr.number_of_nodes()} nodes and {gr.number_of_edges()} edges\")\n    # print(nx.classes.reportviews.ReportView(G))\n    # print(nx.info(gr))\n    print(gr.nodes())\n\nGraph with 18 nodes and 21 edges\n['greaterthan', 'force', 'CartPole-v1', 'cart_velocity_reference', 'cart_position_output', 'subtract', 'cart_velocity', 'cart_position_reference', 'pole_velocity_output', 'subtract1', 'cart_position', 'pole_velocity_reference', 'pole_angle_output', 'subtract2', 'pole_velocity', 'pole_angle_reference', 'subtract3', 'pole_angle']\n\n\nRun the hierarchy for 500 steps.\n\ncartpole_hierarchy.run(1,verbose=False)\n\n1\n\n\n\ncartpole_hierarchy.run(runs,verbose=False)\n\n1\n\n\n\ncartpole.close()",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "nodes.html",
    "href": "nodes.html",
    "title": "Nodes",
    "section": "",
    "text": "A node comprises four functions, reference, perceptual, comparator and output. Executing the node will run each of the functions in the order indicated above and return the output value.\nThe functions can actually be a collection of functions, each executed in the order they are added. This allows a chain of functions in case pre-processing is required, or post-processing in the case of the output.\n\nsource\n\n\n\n ControlUnitIndices (value, names=None, module=None, qualname=None,\n                     type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\n\n\n PCTNode (reference=None, perception=None, comparator=None, output=None,\n          default=True, name='pctnode', history=False, build_links=False,\n          mode=0, namespace=None, **pargs)\n\nA single PCT controller.\n\n#node = PCTNode()\n#node.summary()\n\n\nsource\n\n\n\n\n PCTNodeData (name='pctnodedata')\n\nData collected for a PCTNode",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "nodes.html#overview",
    "href": "nodes.html#overview",
    "title": "Nodes",
    "section": "",
    "text": "A node comprises four functions, reference, perceptual, comparator and output. Executing the node will run each of the functions in the order indicated above and return the output value.\nThe functions can actually be a collection of functions, each executed in the order they are added. This allows a chain of functions in case pre-processing is required, or post-processing in the case of the output.\n\nsource\n\n\n\n ControlUnitIndices (value, names=None, module=None, qualname=None,\n                     type=None, start=1)\n\nAn enumeration.\n\nsource\n\n\n\n\n PCTNode (reference=None, perception=None, comparator=None, output=None,\n          default=True, name='pctnode', history=False, build_links=False,\n          mode=0, namespace=None, **pargs)\n\nA single PCT controller.\n\n#node = PCTNode()\n#node.summary()\n\n\nsource\n\n\n\n\n PCTNodeData (name='pctnodedata')\n\nData collected for a PCTNode",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "nodes.html#creating-a-node",
    "href": "nodes.html#creating-a-node",
    "title": "Nodes",
    "section": "Creating a Node",
    "text": "Creating a Node\nA node can be created simply.\n\nnode = PCTNode()\nnode.summary()\n\npctnode PCTNode 12a9616b-8e6b-11f0-a6f7-5c879cf9f59b\n----------------------------\nREF: constant Constant | 0 \nPER: variable Variable | 0 \nCOM: subtract Subtract | 0 | links  constant variable \nOUT: proportional Proportional | gain 1 | 0 | links  subtract \n----------------------------\n\n\nThat creates a node with default functions. Those are, a constant of 1 for the reference, a variable, with initial value 0, for the perception and a proportional function for the output, with a gain of 10.\nA node can also be created by providing a name, and setting the history to True. The latter means that the values of all the functions are recorded during execution, which is useful for plotting the data later, as can be seen below.\n\ndynamic_module_import( 'pct.functions', 'Constant')\n\n\nreference = Constant(1)\nnamespace=reference.namespace\n\n\nnode = PCTNode(name=\"mypctnode\", history=True, reference = reference, output=Proportional(10, namespace=namespace), namespace=namespace)\nnode.summary()\n\nmypctnode PCTNode 12b98ffb-8e6b-11f0-944c-5c879cf9f59b\n----------------------------\nREF: constant Constant | 1 \nPER: variable Variable | 0 \nCOM: subtract Subtract | 0 | links  constant variable \nOUT: proportional Proportional | gain 10 | 0 | links  subtract \n----------------------------\n\n\nAnother way of creating a node is by first declaring the functions you want and passing them into the constructor.\n\nUniqueNamer.getInstance().clear()\nr = Variable(0, name=\"velocity_reference\")\np = Constant(10, name=\"constant_perception\")\no = Integration(10, 100, name=\"integrator\")\nintegratingnode = PCTNode(reference=r, perception=p, output=o, name=\"integratingnode\", history=True)\n\nYet another way to create a node is from a text configuration.\n\nconfig_node = PCTNode.from_config({ 'name': 'mypctnode', \n    'refcoll': {'0': {'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {}, 'gain': 10}}, \n    'percoll': {'0': {'type': 'Variable', 'name': 'velocity', 'value': 0.2, 'links': {}}}, \n    'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract', 'value': 1, 'links': {0: 'constant', 1: 'velocity'}}}, \n    'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional', 'value': 10, 'links': {0: 'subtract'}, 'gain': 10}}})\n# config_node = PCTNode.from_config({ 'name': 'mypctnode1', \n#     'refcoll': {'0': {'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {}, 'gain': 10}}, \n#     'percoll': {'0': {'type': 'Variable', 'name': 'velocity', 'value': 0.2, 'links': {}}}, \n#     'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract', 'value': 1, 'links': {0: 'constant', 1: 'velocity'}}}, \n#     'outcoll': {'0': {'type': 'Proportional', 'name': 'proportional', 'value': 10, 'links': {0: 'subtract'}, 'gain': 10}}}, namespace=namespace)",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "nodes.html#viewing-nodes",
    "href": "nodes.html#viewing-nodes",
    "title": "Nodes",
    "section": "Viewing Nodes",
    "text": "Viewing Nodes\nThe details of a node can be viewed in a number of ways, which is useful for checking the configuration. The summary method prints to the screen. The get_config method returns a string in a JSON format.\n\nintegratingnode.summary()\n\nintegratingnode PCTNode 12cb273f-8e6b-11f0-9f2d-5c879cf9f59b\n----------------------------\nREF: velocity_reference Variable | 0 \nPER: constant_perception Constant | 10 \nCOM: subtract Subtract | 0 | links  velocity_reference constant_perception \nOUT: integrator Integration | gain 10 slow 100  | 0 | links  subtract \n----------------------------\n\n\n\n#print(integratingnode.get_config())\nassert integratingnode.get_config() == {'type': 'PCTNode', 'name': 'integratingnode', 'refcoll': {'0': {'type': 'Variable', 'name': 'velocity_reference', 'value': 0, 'links': {}}}, 'percoll': {'0': {'type': 'Constant', 'name': 'constant_perception', 'value': 10, 'links': {}}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract', 'value': 0, 'links': {0: 'velocity_reference', 1: 'constant_perception'}}}, 'outcoll': {'0': {'type': 'Integration', 'name': 'integrator', 'value': 0, 'links': {0: 'subtract'}, 'gain': 10, 'slow': 100}}}\nintegratingnode.get_config()\n\n{'type': 'PCTNode',\n 'name': 'integratingnode',\n 'refcoll': {'0': {'type': 'Variable',\n   'name': 'velocity_reference',\n   'value': 0,\n   'links': {}}},\n 'percoll': {'0': {'type': 'Constant',\n   'name': 'constant_perception',\n   'value': 10,\n   'links': {}}},\n 'comcoll': {'0': {'type': 'Subtract',\n   'name': 'subtract',\n   'value': 0,\n   'links': {0: 'velocity_reference', 1: 'constant_perception'}}},\n 'outcoll': {'0': {'type': 'Integration',\n   'name': 'integrator',\n   'value': 0,\n   'links': {0: 'subtract'},\n   'gain': 10,\n   'slow': 100}}}\n\n\nA node can also be viewed graphically as a network of connected nodes.\n\nimport os\n\n\nif os.name=='nt':\n    integratingnode.draw(node_size=2000, figsize=(8,4))",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "nodes.html#running-a-node",
    "href": "nodes.html#running-a-node",
    "title": "Nodes",
    "section": "Running a Node",
    "text": "Running a Node\nFor the purposes of this example we first create a function which is a very basic model of the physical environment. It defines how the world behaves when we pass it the output of the control system.\n\ndef velocity_model(velocity,  force , mass):\n    velocity = velocity + force / mass\n    return velocity\n\nmass = 50\nforce = 0\n\nIn the following cell we start with a velocity of zero. The node is run once (second line), the output of which is the force to apply in the world velocity_model. That returns the updated velocity which we pass back into the node to be used in the next iteration of the loop.\n\nvelocity=0\nforce = node()\nvelocity = velocity_model(velocity, force, mass)\nnode.set_perception_value(velocity)\nprint(force)\nassert force == 10\n\n10\n\n\nThe node can be run in a loop as shown below. With verbose set to True the output of each loop will be printed to the screen.\n\npctnode = PCTNode(history=True)\npctnode.set_function_name(\"perception\", \"velocity\")\npctnode.set_function_name(\"reference\", \"reference\")\n\nfor i in range(40):\n    print(i, end=\" \")\n    force = pctnode(verbose=True)\n    vel = velocity_model(pctnode.get_perception_value(), force, mass)\n    pctnode.set_perception_value(vel)\n\n0 0.000 0.000 0.000 0.000 \n1 0.000 0.000 0.000 0.000 \n2 0.000 0.000 0.000 0.000 \n3 0.000 0.000 0.000 0.000 \n4 0.000 0.000 0.000 0.000 \n5 0.000 0.000 0.000 0.000 \n6 0.000 0.000 0.000 0.000 \n7 0.000 0.000 0.000 0.000 \n8 0.000 0.000 0.000 0.000 \n9 0.000 0.000 0.000 0.000 \n10 0.000 0.000 0.000 0.000 \n11 0.000 0.000 0.000 0.000 \n12 0.000 0.000 0.000 0.000 \n13 0.000 0.000 0.000 0.000 \n14 0.000 0.000 0.000 0.000 \n15 0.000 0.000 0.000 0.000 \n16 0.000 0.000 0.000 0.000 \n17 0.000 0.000 0.000 0.000 \n18 0.000 0.000 0.000 0.000 \n19 0.000 0.000 0.000 0.000 \n20 0.000 0.000 0.000 0.000 \n21 0.000 0.000 0.000 0.000 \n22 0.000 0.000 0.000 0.000 \n23 0.000 0.000 0.000 0.000 \n24 0.000 0.000 0.000 0.000 \n25 0.000 0.000 0.000 0.000 \n26 0.000 0.000 0.000 0.000 \n27 0.000 0.000 0.000 0.000 \n28 0.000 0.000 0.000 0.000 \n29 0.000 0.000 0.000 0.000 \n30 0.000 0.000 0.000 0.000 \n31 0.000 0.000 0.000 0.000 \n32 0.000 0.000 0.000 0.000 \n33 0.000 0.000 0.000 0.000 \n34 0.000 0.000 0.000 0.000 \n35 0.000 0.000 0.000 0.000 \n36 0.000 0.000 0.000 0.000 \n37 0.000 0.000 0.000 0.000 \n38 0.000 0.000 0.000 0.000 \n39 0.000 0.000 0.000 0.000",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "nodes.html#save-and-load",
    "href": "nodes.html#save-and-load",
    "title": "Nodes",
    "section": "Save and Load",
    "text": "Save and Load\nSave a node to file.\n\nimport json\n\n\nintegratingnode.save(\"inode.json\")\n\nCreate a node from file.\n\nnnode = PCTNode.load(\"inode.json\")\nnnode.summary()\nprint(nnode.get_config())\n\nintegratingnode PCTNode 13af3801-8e6b-11f0-ac4b-5c879cf9f59b\n----------------------------\nREF: velocity_reference Variable | 0 \nPER: constant_perception Constant | 10 \nCOM: subtract Subtract | 0 | links  velocity_reference constant_perception \nOUT: integrator Integration | gain 10 slow 100  | 0 | links  subtract \n----------------------------\n{'type': 'PCTNode', 'name': 'integratingnode', 'refcoll': {'0': {'type': 'Variable', 'name': 'velocity_reference', 'value': 0, 'links': {}}}, 'percoll': {'0': {'type': 'Constant', 'name': 'constant_perception', 'value': 10, 'links': {}}}, 'comcoll': {'0': {'type': 'Subtract', 'name': 'subtract', 'value': 0, 'links': {0: 'velocity_reference', 1: 'constant_perception'}}}, 'outcoll': {'0': {'type': 'Integration', 'name': 'integrator', 'value': 0, 'links': {0: 'subtract'}, 'gain': 10, 'slow': 100}}}\n\n\n\nprint(nnode.get_summary())\n\n0.000 10.000 0.000 0.000",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "nodes.html#plotting-the-data",
    "href": "nodes.html#plotting-the-data",
    "title": "Nodes",
    "section": "Plotting the Data",
    "text": "Plotting the Data\nAs the history of the variable pctnode was set to True the data is available for analysis. It can be plotted with python libraries such as matplotlib or plotly. Here is an example with the latter.\nThe graph shows the changing perception values as it is controlled to match the reference value.\nimport plotly.graph_objects as go\nfig = go.Figure(layout_title_text=\"Velocity Goal\")\nfig.add_trace(go.Scatter(y=pctnode.history.data['refcoll']['reference'], name=\"ref\"))\nfig.add_trace(go.Scatter(y=pctnode.history.data['percoll']['velocity'], name=\"perc\"))\nThis following code is only for the purposes of displaying image of the graph generated by the above code.\n\nfrom IPython.display import Image\n\n\nImage(url='http://www.perceptualrobots.com/wp-content/uploads/2020/08/pct_node_plot.png')",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "nodes.html#counting-links-in-a-node",
    "href": "nodes.html#counting-links-in-a-node",
    "title": "Nodes",
    "section": "Counting Links in a Node",
    "text": "Counting Links in a Node\nThe get_num_links method allows you to count the total number of links in a node. This is useful for analyzing the complexity of a node or when calculating model statistics.\n\n# Create a node with default functions and build links\ntest_node = PCTNode(build_links=True)\n\n# Get the number of links in the node\nnum_links = test_node.get_num_links()\nprint(f\"Number of links in the default node: {num_links}\")\n\n# Create a more complex node\ncomplex_node = PCTNode()\ncomplex_node.build_links()  # This connects the internal functions\n\n# Add some additional links\nadditional_function = Variable(2, name=\"additional_var\")\ncomplex_node.outputCollection[0].add_link(additional_function)\n\n# Now count the links again\nnum_links_complex = complex_node.get_num_links()\nprint(f\"Number of links in the complex node: {num_links_complex}\")\n\n# You can use this to analyze the complexity of your models\nprint(f\"The complex node has {num_links_complex - num_links} more links than the default node\")\n\nNumber of links in the default node: 3\nNumber of links in the complex node: 4\nThe complex node has 1 more links than the default node",
    "crumbs": [
      "Nodes"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions",
    "section": "",
    "text": "Each function outputs the result of applying the function logic and may be a scalar or array, depending on the input. The inputs are supplied as links to another function, from where the values are read. Unless the function is a simple case, such as a ‘Constant’.\nParameters are supplied as arguments to the constructor of the class.\nAll functions include the methods defined by the BaseFunction class.\n\nsource\n\n\n\n HPCTFUNCTION (value, names=None, module=None, qualname=None, type=None,\n               start=1)\n\nTypes of control functions in a node.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#basefunction",
    "href": "functions.html#basefunction",
    "title": "Functions",
    "section": "BaseFunction",
    "text": "BaseFunction\n\nsource\n\nBaseFunction\n\n BaseFunction (name=None, value=None, links=None, new_name=True,\n               namespace=None)\n\nBase class of a PCT function. This class is not used directly by developers, but defines the functionality common to all.\n\nsource\n\n\nFunctionFactory\n\n FunctionFactory ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n#show_doc(BaseFunction.summary)\n\n\n#show_doc(BaseFunction.get_config)",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#subtract",
    "href": "functions.html#subtract",
    "title": "Functions",
    "section": "Subtract",
    "text": "Subtract\n\nsource\n\nSubtract\n\n Subtract (value=0, name='subtract', links=None, new_name=True,\n           namespace=None, **cargs)\n\nA function that subtracts one value from another. Parameter: None. Links: Two links required to each the values to be subtracted.\n\nsource\n\n\nProportional\n\n Proportional (gain=1, value=0, name='proportional', links=None,\n               new_name=True, namespace=None, **cargs)\n\nA proportion of the input value as defined by the gain parameter. Parameters: The gain value. Links: One.\n\nsource\n\n\nVariable\n\n Variable (value=0, name='variable', links=None, new_name=True,\n           namespace=None, **cargs)\n\nA function that returns a variable value. Parameter: The variable value. Links: None\n\nsource\n\n\nPassOn\n\n PassOn (value=0, name='variable', links=None, new_name=True,\n         namespace=None, **cargs)\n\nA function that passes on a variable value from a linked function. Parameter: None. Links: One\n\nsource\n\n\nGreaterThan\n\n GreaterThan (threshold=0, upper=1, lower=0, value=0, name='greaterthan',\n              links=None, new_name=True, namespace=None, **cargs)\n\nOne of two supplied values is returned if the input is greater than supplied threshold. Parameters: The threshold and upper and lower value. Links: One\n\nsource\n\n\nConstant\n\n Constant (value=0, name='constant', new_name=True, namespace=None,\n           **cargs)\n\nA function that returns a constant value. Parameter: The constant value. Links: None\n\nsource\n\n\nStep\n\n Step (upper=None, lower=None, delay=None, period=None, value=0,\n       name='step', new_name=True, namespace=None, **cargs)\n\nA function that returns an alternating signal. Parameter: The upper and lower values, and a delay value. Links: None\n\nsource\n\n\nIntegration\n\n Integration (gain=1, slow=2, value=0, name='integration', links=None,\n              new_name=True, namespace=None, **cargs)\n\nA leaky integrating function. Equivalent of a exponential smoothing function, of the amplified input. Parameters: The gain and slow values. Links: One.\n\nsource\n\n\nIntegrationDual\n\n IntegrationDual (gain=1, slow=2, value=0, name='integration', links=None,\n                  new_name=True, namespace=None, **cargs)\n\nA leaky integrating function, applying one signal to another. Equivalent of a exponential smoothing function, of the amplified input. Parameters: The gain and slow values. Links: Two.\n\nsource\n\n\nSigmoid\n\n Sigmoid (range=2, slope=10, value=0, name='sigmoid', links=None,\n          new_name=True, namespace=None, **cargs)\n\nA sigmoid function. Similar to a proportional function, but kept within a limit (+/- half the range). Parameters: The range and slope values. Links: One.\n\nsource\n\n\nWeightedSum\n\n WeightedSum (weights=[0], value=0, name='weighted_sum', links=None,\n              new_name=True, usenumpy=False, namespace=None, **cargs)\n\nA function that combines a set of inputs by multiplying each by a weight and then adding them up. Parameter: The weights array. Links: Links to all the input functions.\n\nsource\n\n\nSmoothWeightedSum\n\n SmoothWeightedSum (weights=[0], smooth_factor=0.0, value=0,\n                    name='smooth_weighted_sum', links=None, new_name=True,\n                    usenumpy=False, namespace=None, **cargs)\n\nA function that combines a set of inputs by multiplying each by a weight and then adding them up. And then smooths the result. Parameter: The weights array. Links: Links to all the input functions.\n\nsource\n\n\nIndexedParameter\n\n IndexedParameter (index=None, value=0, name='indexed_parameter',\n                   links=None, new_name=True, namespace=None, **cargs)\n\nA function that returns a parameter from a linked function, indexed by number. Parameter: The index. Links: One.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#sigmoidweightedsum",
    "href": "functions.html#sigmoidweightedsum",
    "title": "Functions",
    "section": "SigmoidWeightedSum",
    "text": "SigmoidWeightedSum\n\nsource\n\nSigmoidWeightedSum\n\n SigmoidWeightedSum (weights=[0], range=2.0, slope=10.0, value=0,\n                     name='sigmoid_weighted_sum', links=None,\n                     new_name=True, usenumpy=False, namespace=None,\n                     **cargs)\n\nA function that combines a set of inputs by multiplying each by a weight and then adding them up. And then limits the output by squashing with a sigmoid function. Parameter: The weights array. Links: Links to all the input functions.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#sigmoidsmoothweightedsum",
    "href": "functions.html#sigmoidsmoothweightedsum",
    "title": "Functions",
    "section": "SigmoidSmoothWeightedSum",
    "text": "SigmoidSmoothWeightedSum\n\nsource\n\nSigmoidSmoothWeightedSum\n\n SigmoidSmoothWeightedSum (weights=[0], smooth_factor=0.0, range=2.0,\n                           slope=10.0, value=0,\n                           name='sigmoid_smooth_weighted_sum', links=None,\n                           new_name=True, usenumpy=False, namespace=None,\n                           **cargs)\n\nA function that combines a set of inputs by multiplying each by a weight and then adding them up. It then smooths the result and then limits the output by squashing with a sigmoid function. Parameter: The weights array. Links: Links to all the input functions.\n\nsource\n\n\nDerivative\n\n Derivative (history_length=1, value=0, name='derivative', links=None,\n             new_name=True, usenumpy=False, namespace=None, **cargs)\n\nA function that provides the difference to previous values of the input signal. Parameter: The weights array. Links: Links to all the input functions.\n\nsource\n\n\nDerivativeWeightedSum\n\n DerivativeWeightedSum (weights=[0], history_length=1, value=0,\n                        name='derivative_weighted_sum', links=None,\n                        new_name=True, usenumpy=False, namespace=None,\n                        **cargs)\n\nA function that combines a set of inputs by multiplying each by a weight and then adding them up. And then takes the difference of with a past value. Parameter: The weights array. Links: Links to all the input functions.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#creating-functions",
    "href": "functions.html#creating-functions",
    "title": "Functions",
    "section": "Creating Functions",
    "text": "Creating Functions\nStandard class constructor. Different ways to create a function with the standard constructor.\n\nprop = Proportional()\nprint(prop.get_config())\nprop = Proportional(\"myprop\", 10)\nprint(prop.get_config())\nprop = Proportional(gain=10)\nprint(prop.get_config())\n\n{'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {}, 'gain': 1}\n{'type': 'Proportional', 'name': 'proportional', 'value': 10, 'links': {}, 'gain': 'myprop'}\n{'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {}, 'gain': 10}\n\n\nConfiguration class constructor. Create the function by passing a configuration structure to the constructor.\n\nprop = Proportional(**{'name': 'myprop', 'value': 5, 'gain': 20})\nprint(prop.get_config())\n\n{'type': 'Proportional', 'name': 'myprop', 'value': 5, 'links': {}, 'gain': 20}\n\n\nConfiguration class method. Create the function by passing a configuration structure to a class method.\n\nconfig = {'name': 'myprop', 'value': -0.5, 'gain': 21}\nprop = Proportional.from_config(config)\nprint(prop.get_config())\n\n{'type': 'Proportional', 'name': 'myprop', 'value': -0.5, 'links': {}, 'gain': 21}\n\n\n\nprop = Proportional()\nprint(prop.get_config())\nprop1 = Proportional.from_config(prop.get_config())\nprint(prop1.get_config())\nassert prop.get_config() == prop1.get_config()\n\n{'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {}, 'gain': 1}\n{'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {}, 'gain': 1}\n\n\nAn example showing creating a WeightedSum function.\n\nwts=[1,1,1]\nws = WeightedSum(weights=wts)\nns = ws.namespace\nws.add_link(Constant(10, namespace=ns))\nws.add_link(Constant(5, namespace=ns))\nws.add_link(Constant(20, namespace=ns))\nassert ws() == 35\nconfig = ws.get_config()\n\n\n#ws1 = WeightedSum.from_config(config, namespace=ns)\nws1 = WeightedSum.from_config(config, new_name= 'weighted_sum1', namespace=ns)\nws1.get_config()\n\n{'type': 'WeightedSum',\n 'name': 'weighted_sum1',\n 'value': 35,\n 'links': {0: 'constant', 1: 'constant1', 2: 'constant2'},\n 'weights': [1, 1, 1]}\n\n\n\nscons = Constant(2, name='scons')\nsig = Sigmoid()\nsig.add_link(scons)\nsig()\n\n0.9999092042625952\n\n\n\ncons = Constant([2,2], name='cons')\nprint(cons.output_string()+ \"\")\n\n[2, 2]",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#viewing-functions",
    "href": "functions.html#viewing-functions",
    "title": "Functions",
    "section": "Viewing Functions",
    "text": "Viewing Functions\nView the details of the function with the “summary”, which prints the name, type, parameters, value and links (if any).\n\nprop.summary()\n\nproportional Proportional | gain 1 | 0 \n\n\nAs already seen the function details can be seen by retrieving the configuration.\n\nprint(prop.get_config())\n\n{'type': 'Proportional', 'name': 'proportional', 'value': 0, 'links': {}, 'gain': 1}\n\n\nOr you can print the function.\n\nprint(prop)\n\n{'namespace': UUID('6d28b227-62e7-11ef-87fe-5c879c15de65'), 'value': 0, 'links': [], 'checklinks': True, 'name': 'proportional', 'decimal_places': 3, 'gain': 1}\n\n\nSet the decimal places for output display.\n\nprint(prop.output_string())\nprop.set_decimal_places(2)\nprint(prop.output_string())\n\n0.000\n0.00\n\n\nYou can also view a function graphically as a network of connected nodes.\n\nsub = Subtract(links=[Constant(1, name='cons'), Proportional(10, name='prop')], name='sub')\nprint(sub.value)\ng = sub.graph()\nprint(g)\nsub.draw(node_size=2000)\n\n0\nDiGraph with 3 nodes and 2 edges",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#save-and-load",
    "href": "functions.html#save-and-load",
    "title": "Functions",
    "section": "Save and Load",
    "text": "Save and Load\nSave a function to file.\n\nimport json\n\n\nprint(ws.get_config())\nws.save(\"ws.json\")\n\n{'type': 'WeightedSum', 'name': 'weighted_sum', 'value': 35, 'links': {0: 'constant', 1: 'constant1', 2: 'constant2'}, 'weights': [1, 1, 1]}\n\n\nCreate a function from file.\n\nwss = WeightedSum.load(\"ws.json\", new_name='weighted_sum1', namespace=ns)\nprint(ws.get_config())\nprint(wss.get_config())\nassert wss.get_config() == {'type': 'WeightedSum', 'name': 'weighted_sum2', 'value': 35, 'links': {0: 'constant', 1: 'constant1', 2: 'constant2'}, 'weights': [1, 1, 1]}\n\n{'type': 'WeightedSum', 'name': 'weighted_sum', 'value': 35, 'links': {0: 'constant', 1: 'constant1', 2: 'constant2'}, 'weights': [1, 1, 1]}\n{'type': 'WeightedSum', 'name': 'weighted_sum2', 'value': 35, 'links': {0: 'constant', 1: 'constant1', 2: 'constant2'}, 'weights': [1, 1, 1]}",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#setting-links",
    "href": "functions.html#setting-links",
    "title": "Functions",
    "section": "Setting Links",
    "text": "Setting Links\nThe next cell shows how a link is added to one function from another. In this case from an Integration function to a Constant function. So, whenever “integrator” runs it will get its input from “cons”.\n\nintegrator = Integration(3, 10)\ncons = Constant(5)\nintegrator.add_link(cons)\nintegrator.summary()\n\noutput = integrator()\nprint(output)\nassert output == 1.5\n\nintegration Integration | gain 3 slow 10  | 0 | links  constant \n1.5\n\n\n\nUniqueNamer.getInstance().clear() # initialises the list of function names\ninteg = Integration(**{'name': 'myinteg', 'value': 1, 'gain': 20, 'slow': 100})\nprop = Proportional(5, name=\"myprop\")\ninteg.add_link(prop)\nprint(integ.get_config())\nassert integ.get_config() == {'type': 'Integration', 'name': 'myinteg', 'value': 1, 'links': {0: 'myprop'}, 'gain': 20, 'slow': 100}\n\n{'type': 'Integration', 'name': 'myinteg', 'value': 1, 'links': {0: 'myprop'}, 'gain': 20, 'slow': 100}\n\n\nYou can also define the link when you create the function, as in this example with “Proportional”.\n\nconst = Constant(1, name='const')\nns = const.namespace\nprint(const())\npr1 = Proportional(name='pr1', links=const, namespace=ns)\npr1.summary()\nassert pr1() == 1\n\n1\npr1 Proportional | gain 1 | 0 | links  const \n\n\nIt can be the name of the linked function.\n\npr = Proportional(gain=10, name='pr', links='const', namespace=ns)\npr.summary()\nassert pr() == 10\nprint(pr())\n\npr Proportional | gain 10 | 0 | links  const \n10\n\n\nOr it can be a list of names.\n\nsub = Subtract(links=[ 'pr', 'const'], namespace=ns)\nprint(sub.get_config())\nprint(const())\nprint(pr())\nprint(pr())\nsub.summary()\nprint(sub())\nassert sub()==9\n\n{'type': 'Subtract', 'name': 'subtract', 'value': 0, 'links': {0: 'pr', 1: 'const'}}\n1\n10\n10\nsubtract Subtract | 0 | links  pr const \n9",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "functions.html#running-a-fucntion",
    "href": "functions.html#running-a-fucntion",
    "title": "Functions",
    "section": "Running a Fucntion",
    "text": "Running a Fucntion\nA function can simply be run by calling it, without any parameters. It will use whatever input was set by the links. It returns the result of the function. In this example it will be 5 * 3 / 10, that is, input * gain / slow.\n\nout = sub()\nprint(out)\n\n9\n\n\nA function can be also run in a loop with the run() method and provided the loop count.\n\nintegrator = Integration(gain=3, slow=10)\nintegrator.add_link(sub)\no = integrator.run(steps=10, verbose=True)\n\n2.700 5.130 7.317 9.285 11.057 12.651 14.086 15.377 16.540 17.586 \n\n\n\nintegrator(verbose=True)\n\n18.527 \n\n\n18.527113905569998\n\n\n\noutput = integrator()\nprint(output)\n#assert output == 1.5\nnpt.assert_almost_equal(output, 19.374402515013)\n\n19.374402515013\n\n\n\nprint(integrator.get_config())\n\n{'type': 'Integration', 'name': 'integration', 'value': 19.374402515013, 'links': {0: 'subtract'}, 'gain': 3, 'slow': 10}\n\n\nAn example showing creating and running a sigmoid WeightedSum function.\n\nwts=[0.01,0.01,0.01]\nsgws = SigmoidWeightedSum(weights=wts, range=1.0, slope=5.0)\nns = sgws.namespace\nsgws.add_link(Constant(10, namespace=ns))\nsgws.add_link(Constant(5, namespace=ns))\nsgws.add_link(Constant(20, namespace=ns))\nsgws.summary()\nprint(sgws.get_parameters_list())\n\nout = sgws()\nprint(out)\nassert out == 0.3519528019683106\n\nsigmoid_weighted_sum SigmoidWeightedSum | weights [0.01, 0.01, 0.01] range 1.00  slope 5.00 | 0 | links  constant constant1 constant2 \n[[0.01, 0.01, 0.01], 1.0, 5.0]\n0.3519528019683106\n\n\nAn example showing creating and running a sigmoid smooth WeightedSum function.\n\nwts=[0.01,0.01,0.01]\nsgsmws = SigmoidSmoothWeightedSum(weights=wts, smooth_factor=0.9)\nns = sgsmws.namespace\nsgsmws.add_link(Constant(10, namespace=ns))\nsgsmws.add_link(Constant(5, namespace=ns))\nsgsmws.add_link(Constant(20, namespace=ns))\nsgsmws.summary()\nprint(sgsmws.get_parameters_list())\nprint(sgsmws.get_graph_name())\nlabels = {}\nsgsmws.get_weights_labels_funcdata(labels)\nprint('wts labels',labels)\nfor _ in range(5):\n    # print(sgsmsm())\n    out = sgsmws()\n    print(out)\n\nnpt.assert_almost_equal(out, 0.34373448930708195)\n\nsigmoid_smooth_weighted_sum SigmoidSmoothWeightedSum | weights [0.01, 0.01, 0.01] smooth 0.90 range 2.00  slope 10.00 | 0 | links  constant constant1 constant2 \n[[0.01, 0.01, 0.01], 0.9, 2.0, 10.0]\nsigmoid_smooth_weighted_sum\n0.90:2.00|10.00\nwts labels {('sigmoid_smooth_weighted_sum\\n0.90:2.00|10.00', 'constant\\n10.00'): '0.01', ('sigmoid_smooth_weighted_sum\\n0.90:2.00|10.00', 'constant1\\n5.00'): '0.01', ('sigmoid_smooth_weighted_sum\\n0.90:2.00|10.00', 'constant2\\n20.00'): '0.01'}\n0.08727737447415773\n0.16473508145615878\n0.23277835967904958\n0.2921474527779875\n0.34373448930708195\n\n\nAn example showing creating and running a smoothed WeightedSum function.\n\nwts=[1.0,1.0,1.0]\nwts=[0.01,0.01,0.01]\nsmws = SmoothWeightedSum(weights=wts, smooth_factor=0.9)\nns = smws.namespace\nsmws.add_link(Constant(10, namespace=ns))\nsmws.add_link(Constant(5, namespace=ns))\nsmws.add_link(Constant(20, namespace=ns))\nsmws.summary()\nprint(smws.get_parameters_list())\nprint(smws.get_graph_name())\nfor _ in range(5):\n    out = smws()\n    print(out)\n\nnpt.assert_almost_equal(out, 0.1433285)\n\nsmooth_weighted_sum SmoothWeightedSum | weights [0.01, 0.01, 0.01] smooth 0.90 | 0 | links  constant constant1 constant2 \n[[0.01, 0.01, 0.01], 0.9]\nsmooth_weighted_sum\n0.90\n0.034999999999999996\n0.0665\n0.09485\n0.120365\n0.1433285\n\n\nAn example showing creating and running a derivative function.\n\ndv = Derivative(history_length=5)\nns = dv.namespace\ncons = Constant(10, namespace=ns)\ndv.add_link(cons)\ndv.summary()\nprint(dv.get_config())\nprint(dv.get_parameters_list())\nprint(dv.get_graph_name())\nlabels = {}\ndv.get_weights_labels(labels)\nprint(labels)\nfor i in range(20):\n    cons.set_value(i*i)\n    out = dv()\n    print(out, end=\" \")\n\nprint()\nassert out == -136\nprint(dv.history)\nassert dv.history == [225, 256, 289, 324, 361]\n\nderivative Derivative | history_length 5  | 0 | links  constant \n{'type': 'Derivative', 'name': 'derivative', 'value': 0, 'links': {0: 'constant'}, 'history_length': 5}\n[5]\nderivative\n5.00\n{}\n0 -1 -4 -9 -16 -24 -32 -40 -48 -56 -64 -72 -80 -88 -96 -104 -112 -120 -128 -136 \n[225, 256, 289, 324, 361]\n\n\nAn example showing creating a derivative WeightedSum function.\n\nwts=[0.01,0.01,0.01]\ndvws = DerivativeWeightedSum(weights=wts, history_length=5)\nns = dvws.namespace\ncons = Constant(10, namespace=ns)\ndvws.add_link(cons)\n\n#dvws.add_link(Constant(10, namespace=ns))\ndvws.add_link(Constant(5, namespace=ns))\ndvws.add_link(Constant(20, namespace=ns))\ndvws.summary()\nprint(dvws.get_config())\nprint(dvws.get_parameters_list())\nprint(dvws.get_graph_name())\nlabels = {}\ndvws.get_weights_labels(labels)\nprint(labels)\nfor i in range(20):\n    cons.set_value(i*i)\n    out = dvws()\n    print(out, end=\" \")\n\nprint()\nnpt.assert_almost_equal(out, -1.3599999999999999)\nprint(dvws.history)\nassert dvws.history == [2.5, 2.81, 3.14, 3.49, 3.86]\n\nderivative_weighted_sum DerivativeWeightedSum | weights [0.01, 0.01, 0.01] history_length 5 | 0 | links  constant constant1 constant2 \n{'type': 'DerivativeWeightedSum', 'name': 'derivative_weighted_sum', 'value': 0, 'links': {0: 'constant', 1: 'constant1', 2: 'constant2'}, 'weights': [0.01, 0.01, 0.01], 'history_length': 5}\n[[0.01, 0.01, 0.01], 5]\nderivative_weighted_sum\n5\n{('derivative_weighted_sum', 'constant'): '0.01', ('derivative_weighted_sum', 'constant1'): '0.01', ('derivative_weighted_sum', 'constant2'): '0.01'}\n0.0 -0.010000000000000009 -0.040000000000000036 -0.09000000000000002 -0.16000000000000003 -0.24 -0.31999999999999995 -0.39999999999999997 -0.4800000000000001 -0.56 -0.64 -0.72 -0.7999999999999998 -0.8799999999999999 -0.96 -1.04 -1.12 -1.2000000000000002 -1.2800000000000002 -1.3599999999999999 \n[2.5, 2.81, 3.14, 3.49, 3.86]\n\n\n\nwts=[0.01,0.01,0.01]\ndvws = DerivativeWeightedSum(weights=wts, history_length=0)\nns = dvws.namespace\ncons = Constant(10, namespace=ns)\ndvws.add_link(cons)\ndvws.add_link(Constant(5, namespace=ns))\ndvws.add_link(Constant(20, namespace=ns))\ndvws.summary()\nprint(dvws.get_config())\nprint(dvws.get_parameters_list())\nprint(dvws.get_graph_name())\nlabels = {}\ndvws.get_weights_labels(labels)\nprint(labels)\nfor i in range(20):\n    cons.set_value(i*i)\n    out = dvws()\n    print(out, end=\" \")\n\nprint()\nnpt.assert_almost_equal(out, 3.86)\n\nderivative_weighted_sum DerivativeWeightedSum | weights [0.01, 0.01, 0.01] history_length 0 | 0 | links  constant constant1 constant2 \n{'type': 'DerivativeWeightedSum', 'name': 'derivative_weighted_sum', 'value': 0, 'links': {0: 'constant', 1: 'constant1', 2: 'constant2'}, 'weights': [0.01, 0.01, 0.01], 'history_length': 0}\n[[0.01, 0.01, 0.01], 0]\nderivative_weighted_sum\n0\n{('derivative_weighted_sum', 'constant'): '0.01', ('derivative_weighted_sum', 'constant1'): '0.01', ('derivative_weighted_sum', 'constant2'): '0.01'}\n0.25 0.26 0.29000000000000004 0.34 0.41000000000000003 0.5 0.61 0.74 0.8900000000000001 1.06 1.25 1.46 1.69 1.94 2.21 2.5 2.81 3.14 3.49 3.86",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "experiments.html",
    "href": "experiments.html",
    "title": "Experiments class",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n# nothing\n\n\nsource\n\nCometExperimentManager\n\n CometExperimentManager (api_key:str=None, workspace:str=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# Initialize the manager\nworkspace = 'lunarlandercontinuous-v2'\nproject_name = 'refinputs-smooth'\nmanager = CometExperimentManager(workspace=workspace)\n\n# Test get_all_artifacts_sorted\nartifact_results = manager.get_all_artifacts_indexed()\n# print(\"Artifacts sorted by source experiment key:\", artifacts)\n\n# Test get_experiments_by_metrics\nexperiments = manager.get_experiments_by_metrics(project_name=project_name, score_threshold=0.05, reward_threshold=10.0)\nprint(\"Filtered experiments:\", experiments)\n\n\nCOMET WARNING: As you are running in a Jupyter environment, you will need to call `experiment.end()` when finished to ensure all metrics and code are logged before exiting.\n\nCOMET INFO: Experiment is live on comet.com https://www.comet.com/lunarlandercontinuous-v2/general/01e2d222f6d44c56b93a45c409dbf07a\n\n\n\nCOMET INFO: Experiment is live on comet.com https://www.comet.com/lunarlandercontinuous-v2/general/01e2d222f6d44c56b93a45c409dbf07a\n\n\n\nCOMET INFO: The process of logging environment details (conda environment, git patch) is underway. Please be patient as this may take some time.\n\nCOMET INFO: The process of logging environment details (conda environment, git patch) is underway. Please be patient as this may take some time.\n\n\n\n\nError retrieving artifact ga-000.238-s002-3x1-m000-LL0001-d9aaf2358a62b99f9bbd6e7db60e631d.properties: Artifact {'consumer_experiment_key': '01e2d222f6d44c56b93a45c409dbf07a', 'experiment_key': '01e2d222f6d44c56b93a45c409dbf07a', 'name': 'ga-000.238-s002-3x1-m000-LL0001-d9aaf2358a62b99f9bbd6e7db60e631d.properties', 'version_or_alias': None, 'workspace': None} is not in a finalized state and cannot be accessed.\n\n\n\nCOMET INFO: ---------------------------------------------------------------------------------------\n\nCOMET INFO: Comet.ml Experiment Summary\n\nCOMET INFO: ---------------------------------------------------------------------------------------\n\nCOMET INFO:   Data:\n\nCOMET INFO:     display_summary_level : 1\n\nCOMET INFO: Comet.ml Experiment Summary\n\nCOMET INFO: ---------------------------------------------------------------------------------------\n\nCOMET INFO:   Data:\n\nCOMET INFO:     display_summary_level : 1\n\nCOMET INFO:     name                  : only_bee_5002\n\nCOMET INFO:     url                   : https://www.comet.com/lunarlandercontinuous-v2/general/01e2d222f6d44c56b93a45c409dbf07a\n\nCOMET INFO:   Uploads:\n\nCOMET INFO:     name                  : only_bee_5002\n\nCOMET INFO:     url                   : https://www.comet.com/lunarlandercontinuous-v2/general/01e2d222f6d44c56b93a45c409dbf07a\n\nCOMET INFO:   Uploads:\n\nCOMET INFO:     environment details      : 1\n\nCOMET INFO:     filename                 : 1\n\nCOMET INFO:     git metadata             : 1\n\nCOMET INFO:     environment details      : 1\n\nCOMET INFO:     filename                 : 1\n\nCOMET INFO:     git metadata             : 1\n\nCOMET INFO:     git-patch (uncompressed) : 1 (1.90 MB)\n\nCOMET INFO:     installed packages       : 1\n\nCOMET INFO:     notebook                 : 1\n\nCOMET INFO:     source_code              : 1\n\nCOMET INFO:     git-patch (uncompressed) : 1 (1.90 MB)\n\nCOMET INFO:     installed packages       : 1\n\nCOMET INFO:     notebook                 : 1\n\nCOMET INFO:     source_code              : 1\n\nCOMET INFO: \n\nCOMET INFO: \n\nCOMET INFO: Please wait for assets to finish uploading (timeout is 10800 seconds)\n\nCOMET INFO: Still uploading 1 file(s), remaining 861.60 KB/1.06 MB\n\nCOMET INFO: Please wait for assets to finish uploading (timeout is 10800 seconds)\n\nCOMET INFO: Still uploading 1 file(s), remaining 861.60 KB/1.06 MB\n\nCOMET INFO: no such metrics: 'reward_avg'; ignoring query, returning no matches\n\nCOMET INFO: no such metrics: 'reward_avg'; ignoring query, returning no matches\n\n\n\n\nAdded 1 new artifacts to cache\nFiltered experiments: []\n\n\n\n# import random\n\n# Test run_experiments_and_record_results\nif experiments:\n    output_csv = \"/tmp/artifacts/experiment_results.csv\"\n    manager.run_experiments_and_record_results(experiments=experiments, project_name=project_name, artifact_results=artifact_results, num_runs=2, output_csv=output_csv)\n    print(f\"Results saved to {output_csv}\")",
    "crumbs": [
      "Experiments class"
    ]
  },
  {
    "objectID": "helpers.html",
    "href": "helpers.html",
    "title": "Helper classes",
    "section": "",
    "text": "source\n\n\n\n ListChecker ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\n# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero\n\n\n\n\n\n# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero\n\n\n\n\n\n# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero\n\n\n\n\n\n# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero\n\n\n# Example usage:\nfloat_list = [1.00000001, 1.00000002, 1.00000003]\nint_list = [1, 1, 1]\n\nprint(ListChecker.check_list_unchanged(float_list))  # Should print: True (depending on the tolerance)\nprint(ListChecker.check_integer_list_unchanged(int_list))  # Should print: True\n\n(False, {'gradient_range': 2.220446049250313e-16, 'mean': 1.0000000199999999, 'std_dev': 8.164965850304249e-09})\nTrue",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#check_float_list_close_to_zero",
    "href": "helpers.html#check_float_list_close_to_zero",
    "title": "Helper classes",
    "section": "",
    "text": "# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#check_float_list_close_to_zero-1",
    "href": "helpers.html#check_float_list_close_to_zero-1",
    "title": "Helper classes",
    "section": "",
    "text": "# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#check_float_list_close_to_zero-2",
    "href": "helpers.html#check_float_list_close_to_zero-2",
    "title": "Helper classes",
    "section": "",
    "text": "# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#check_float_list_close_to_zero-3",
    "href": "helpers.html#check_float_list_close_to_zero-3",
    "title": "Helper classes",
    "section": "",
    "text": "# @staticmethod\n# def check_float_list_close_to_zero(float_list, rel_tol=1e-9, abs_tol=0.0, gradient_abs_tol=0.0):\n#     \"\"\"\n#     Checks if the values in the float list are close to zero within the specified tolerance\n#     and if the gradient (difference between consecutive values) is close to zero within the specified gradient tolerance.\n\n#     Returns:\n#         bool: True if all values are close to zero within the specified tolerance and the gradient of all consecutive values is close to zero within the specified gradient tolerance.\n#     \"\"\"\n#     if not float_list:\n#         return True\n    \n#     values_close_to_zero = all(\n#         math.isclose(value, 0, rel_tol=rel_tol, abs_tol=abs_tol)\n#         for value in float_list\n#     )\n    \n#     if len(float_list) == 1:\n#         return values_close_to_zero\n    \n#     gradients_close_to_zero = all(\n#         math.isclose(float_list[i] - float_list[i - 1], 0, rel_tol=0, abs_tol=gradient_abs_tol)\n#         for i in range(1, len(float_list))\n#     )\n    \n#     return values_close_to_zero and gradients_close_to_zero\n\n\n# Example usage:\nfloat_list = [1.00000001, 1.00000002, 1.00000003]\nint_list = [1, 1, 1]\n\nprint(ListChecker.check_list_unchanged(float_list))  # Should print: True (depending on the tolerance)\nprint(ListChecker.check_integer_list_unchanged(int_list))  # Should print: True\n\n(False, {'gradient_range': 2.220446049250313e-16, 'mean': 1.0000000199999999, 'std_dev': 8.164965850304249e-09})\nTrue",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#jsondatamanager",
    "href": "helpers.html#jsondatamanager",
    "title": "Helper classes",
    "section": "JSONDataManager",
    "text": "JSONDataManager\n\nsource\n\nJSONDataManager\n\n JSONDataManager (path:str, show_timing:bool=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# #| export\n# class JSONDataManager:\n#     def __init__(self, path: str, show_timing: bool = False):\n#         self.data = self.load_json(path)\n#         self.show_timing = show_timing\n    \n#     @JSONDataManager.timing_decorator\n#     def load_json(self, path: str) -&gt; Dict:\n#         with open(path, 'r') as file:\n#             return json.load(file)\n    \n#     def timing_decorator(method):\n#         def timed_method(self, *args, **kwargs):\n#             start_time = time.time()\n#             result = method(self, *args, **kwargs)\n#             end_time = time.time()\n#             if self.show_timing:\n#                 print(f\"Execution time of {method.__name__}: {end_time - start_time:.4f} seconds\")\n#             return result\n#         return timed_method\n\n#     def reload_data(self, path: str):\n#         self.data = self.load_json(path)\n\n\n# import json\n# import time\n# from typing import Dict\n\n# def timing_decorator(method):\n#     def timed_method(self, *args, **kwargs):\n#         start_time = time.time()\n#         result = method(self, *args, **kwargs)\n#         end_time = time.time()\n#         if self.show_timing:\n#             print(f\"Execution time of {method.__name__}: {end_time - start_time:.4f} seconds\")\n#         return result\n#     return timed_method\n\n# class JSONDataManager:\n#     def __init__(self, path: str, show_timing: bool = False):\n#         self.data = self.load_json(path)\n#         self.show_timing = show_timing\n    \n#     @timing_decorator\n#     def load_json(self, path: str) -&gt; Dict:\n#         with open(path, 'r') as file:\n#             return json.load(file)\n\n#     def reload_data(self, path: str):\n#         self.data = self.load_json(path)",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#challengesdatamanager",
    "href": "helpers.html#challengesdatamanager",
    "title": "Helper classes",
    "section": "ChallengesDataManager",
    "text": "ChallengesDataManager\n\nsource\n\nChallengesDataManager\n\n ChallengesDataManager (*args, **kwargs)",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#solutionsdatamanager",
    "href": "helpers.html#solutionsdatamanager",
    "title": "Helper classes",
    "section": "SolutionsDataManager",
    "text": "SolutionsDataManager\n\nsource\n\nSolutionsDataManager\n\n SolutionsDataManager (*args, **kwargs)\n\n\n# Example usage\nstart_time = time.time()\nchallenges_manager = ChallengesDataManager(\"C:\\\\packages\\\\arc-prize-2024\\\\arc-agi_training_challenges.json\")\nend_time = time.time()\nprint(f\"Execution time of challenges load: {end_time - start_time:.4f} seconds\")\n\nstart_time = time.time()\nsolutions_manager = SolutionsDataManager(\"C:\\\\packages\\\\arc-prize-2024\\\\arc-agi_training_solutions.json\")\nend_time = time.time()\nprint(f\"Execution time of solutions load: {end_time - start_time:.4f} seconds\")\n\nprint(challenges_manager.get_all_keys())\nprint(challenges_manager.count_all_keys())\nprint('get_keys_with_equal_size_input_output')\ngkweqsio = challenges_manager.get_keys_with_equal_size_input_output()\nprint(gkweqsio[0])\nprint(gkweqsio[1])\nprint('get_keys_with_equal_size_input_output_sorted')\ngkweqsios = challenges_manager.get_keys_with_equal_size_input_output_sorted()\nprint(gkweqsios)\n# print(gkweqsios[0])\n# print(gkweqsios[1])\n\nprint('get_keys_with_inconsistent_input_output_sizes')\ngkwiios = challenges_manager.get_keys_with_inconsistent_input_output_sizes()\nprint(gkwiios[0])\nprint(gkwiios[1])\nprint('get_keys_with_variable_input_sizes')\ngkwvts = challenges_manager.get_keys_with_variable_input_sizes()\nprint(gkwvts[0])\nprint(gkwvts[1])\nprint('get_input_array_histogram')\nhist = challenges_manager.get_input_array_histogram()\nprint(hist)\ncount = 0\nfor key, value in hist.items():\n    count += value\nprint(count)\nprint('get_data_for_key',challenges_manager.get_data_for_key('007bbfb7'))\nprint(challenges_manager.get_arrays_for_key('007bbfb7', 'train'))\nprint(challenges_manager.get_arrays_for_key('007bbfb7', 'test'))\n\nprint('get_largest_array_size', challenges_manager.get_largest_array_size())\nprint('analyze_arrays', challenges_manager.analyze_arrays())\n\n\nprint('get_all_keys', solutions_manager.get_all_keys())\nprint(solutions_manager.count_all_keys())\nget_data_for_key = solutions_manager.get_data_for_key('007bbfb7')\nprint('get_data_for_key', get_data_for_key)\nprint(solutions_manager.get_arrays_for_key('007bbfb7', 'output'))\n\nExecution time of challenges load: 0.1250 seconds\nExecution time of solutions load: 0.0120 seconds\n['007bbfb7', '00d62c1b', '017c7c7b', '025d127b', '045e512c', '0520fde7', '05269061', '05f2a901', '06df4c85', '08ed6ac7', '09629e4f', '0962bcdd', '0a938d79', '0b148d64', '0ca9ddb6', '0d3d703e', '0dfd9992', '0e206a2e', '10fcaaa3', '11852cab', '1190e5a7', '137eaa0f', '150deff5', '178fcbfb', '1a07d186', '1b2d62fb', '1b60fb0c', '1bfc4729', '1c786137', '1caeab9d', '1cf80156', '1e0a9b12', '1e32b0e9', '1f0c79e5', '1f642eb9', '1f85a75f', '1f876c06', '1fad071e', '2013d3e2', '2204b7a8', '22168020', '22233c11', '2281f1f4', '228f6490', '22eb0ac0', '234bbc79', '23581191', '239be575', '23b5c85d', '253bf280', '25d487eb', '25d8a9c8', '25ff71a9', '264363fd', '272f95fa', '27a28665', '28bf18c6', '28e73c20', '29623171', '29c11459', '29ec7d0e', '2bcee788', '2bee17df', '2c608aff', '2dc579da', '2dd70a9a', '2dee498d', '31aa019c', '321b1fc6', '32597951', '3345333e', '3428a4f5', '3618c87e', '3631a71a', '363442ee', '36d67576', '36fdfd69', '3906de3d', '39a8645d', '39e1d7f9', '3aa6fb7a', '3ac3eb23', '3af2c5a8', '3bd67248', '3bdb4ada', '3befdf3e', '3c9b0459', '3de23699', '3e980e27', '3eda0437', '3f7978a0', '40853293', '4093f84a', '41e4d17e', '4258a5f9', '4290ef0e', '42a50994', '4347f46a', '444801d8', '445eab21', '447fd412', '44d8ac46', '44f52bb0', '4522001f', '4612dd53', '46442a0e', '469497ad', '46f33fce', '47c1f68c', '484b58aa', '48d8fb45', '4938f0c2', '496994bd', '49d1d64f', '4be741c5', '4c4377d9', '4c5c2cf0', '50846271', '508bd3b6', '50cb2852', '5117e062', '5168d44c', '539a4f51', '53b68214', '543a7ed5', '54d82841', '54d9e175', '5521c0d9', '5582e5ca', '5614dbcf', '56dc2b01', '56ff96f3', '57aa92db', '5ad4f10b', '5bd6f4ac', '5c0a986e', '5c2c9af4', '5daaa586', '60b61512', '6150a2bd', '623ea044', '62c24649', '63613498', '6430c8c4', '6455b5f5', '662c240a', '67385a82', '673ef223', '6773b310', '67a3c6ac', '67a423a3', '67e8384a', '681b3aeb', '6855a6e4', '68b16354', '694f12f3', '6a1e5592', '6aa20dc0', '6b9890af', '6c434453', '6cdd2623', '6cf79266', '6d0160f0', '6d0aefbc', '6d58a25d', '6d75e8bb', '6e02f1e3', '6e19193c', '6e82a1ae', '6ecd11f4', '6f8cd79b', '6fa7a44f', '72322fa7', '72ca375d', '73251a56', '7447852a', '7468f01a', '746b3537', '74dd1130', '75b8110e', '760b3cac', '776ffc46', '77fdfe62', '780d0b14', '7837ac64', '794b24be', '7b6016b9', '7b7f7511', '7c008303', '7ddcd7ec', '7df24a62', '7e0986d6', '7f4411dc', '7fe24cdd', '80af3007', '810b9b61', '82819916', '83302e8f', '834ec97d', '8403a5d5', '846bdb03', '855e0971', '85c4e7cd', '868de0fa', '8731374e', '88a10436', '88a62173', '890034e9', '8a004b2b', '8be77c9e', '8d5021e8', '8d510a79', '8e1813be', '8e5a5113', '8eb1be9a', '8efcae92', '8f2ea7aa', '90c28cc7', '90f3ed37', '913fb3ed', '91413438', '91714a58', '9172f3a0', '928ad970', '93b581b8', '941d9a10', '94f9d214', '952a094c', '9565186b', '95990924', '963e52fc', '97999447', '97a05b5b', '98cf29f8', '995c5fa3', '99b1bc43', '99fa7670', '9aec4887', '9af7a82c', '9d9215db', '9dfd6313', '9ecd008a', '9edfc990', '9f236235', 'a1570a43', 'a2fd1cf0', 'a3325580', 'a3df8b1e', 'a416b8f3', 'a48eeaf7', 'a5313dff', 'a5f85a15', 'a61ba2ce', 'a61f2674', 'a64e4611', 'a65b410d', 'a68b268e', 'a699fb00', 'a740d043', 'a78176bb', 'a79310a0', 'a85d4709', 'a87f7484', 'a8c38be5', 'a8d7556c', 'a9f96cdd', 'aabf363d', 'aba27056', 'ac0a08a4', 'ae3edfdc', 'ae4f1146', 'aedd82e4', 'af902bf9', 'b0c4d837', 'b190f7f5', 'b1948b0a', 'b230c067', 'b27ca6d3', 'b2862040', 'b527c5c6', 'b548a754', 'b60334d2', 'b6afb2da', 'b7249182', 'b775ac94', 'b782dc8a', 'b8825c91', 'b8cdaf2b', 'b91ae062', 'b94a9452', 'b9b7f026', 'ba26e723', 'ba97ae07', 'bb43febb', 'bbc9ae5d', 'bc1d5164', 'bd4472b8', 'bda2d7a6', 'bdad9b1f', 'be94b721', 'beb8660c', 'c0f76784', 'c1d99e64', 'c3e719e8', 'c3f564a4', 'c444b776', 'c59eb873', 'c8cbb738', 'c8f0f002', 'c909285e', 'c9e6f938', 'c9f8e694', 'caa06a1f', 'cbded52d', 'cce03e0d', 'cdecee7f', 'ce22a75a', 'ce4f8723', 'ce602527', 'ce9e57f2', 'cf98881b', 'd037b0a7', 'd06dbe63', 'd07ae81c', 'd0f5fe59', 'd10ecb37', 'd13f3404', 'd22278a0', 'd23f8c26', 'd2abd087', 'd364b489', 'd406998b', 'd43fd935', 'd4469b4b', 'd4a91cb9', 'd4f3cd78', 'd511f180', 'd5d6de2d', 'd631b094', 'd687bc17', 'd6ad076f', 'd89b689b', 'd8c310e9', 'd90796e8', 'd9f24cd1', 'd9fac9be', 'dae9d2b5', 'db3e9e38', 'db93a21d', 'dbc1a6ce', 'dc0a314f', 'dc1df850', 'dc433765', 'ddf7fa4f', 'de1cd16c', 'ded97339', 'e179c5f4', 'e21d9049', 'e26a3af2', 'e3497940', 'e40b9e2f', 'e48d4e1a', 'e5062a87', 'e509e548', 'e50d258f', 'e6721834', 'e73095fd', 'e76a88a6', 'e8593010', 'e8dc4411', 'e9614598', 'e98196ab', 'e9afcf9a', 'ea32f347', 'ea786f4a', 'eb281b96', 'eb5a1d5d', 'ec883f72', 'ecdecbb3', 'ed36ccf7', 'ef135b50', 'f15e1fac', 'f1cefba8', 'f25fbde4', 'f25ffba3', 'f2829549', 'f35d900a', 'f5b8619d', 'f76d97a5', 'f8a8fe49', 'f8b3ba0a', 'f8c80d96', 'f8ff0b80', 'f9012d9b', 'fafffa47', 'fcb5c309', 'fcc82909', 'feca6190', 'ff28f65a', 'ff805c23']\n400\nget_keys_with_equal_size_input_output\n['00d62c1b', '045e512c', '05269061', '06df4c85', '08ed6ac7', '09629e4f', '0962bcdd', '0ca9ddb6', '0d3d703e', '0dfd9992', '11852cab', '1b60fb0c', '1bfc4729', '1e0a9b12', '1e32b0e9', '1f0c79e5', '1f642eb9', '1f876c06', '2204b7a8', '22168020', '22233c11', '2281f1f4', '228f6490', '22eb0ac0', '23581191', '25d8a9c8', '25ff71a9', '264363fd', '28e73c20', '29623171', '29ec7d0e', '2bcee788', '2bee17df', '2dd70a9a', '31aa019c', '321b1fc6', '32597951', '3345333e', '3618c87e', '3631a71a', '36d67576', '3906de3d', '39e1d7f9', '3aa6fb7a', '3bd67248', '3befdf3e', '3c9b0459', '3e980e27', '4093f84a', '41e4d17e', '4258a5f9', '444801d8', '44d8ac46', '484b58aa', '4c5c2cf0', '508bd3b6', '543a7ed5', '5521c0d9', '5582e5ca', '5c0a986e', '5c2c9af4', '60b61512', '6150a2bd', '623ea044', '63613498', '67a3c6ac', '67a423a3', '6855a6e4', '68b16354', '694f12f3', '6c434453', '6cf79266', '6d0160f0', '6d58a25d', '6e02f1e3', '6e19193c', '6e82a1ae', '73251a56', '74dd1130', '776ffc46', '794b24be', '7ddcd7ec', '7df24a62', '7f4411dc', '810b9b61', '83302e8f', '834ec97d', '8403a5d5', '85c4e7cd', '868de0fa', '890034e9', '8d510a79', '8f2ea7aa', '913fb3ed', '91714a58', '93b581b8', '941d9a10', '952a094c', '9565186b', '95990924', '9d9215db', '9dfd6313', '9edfc990', 'a48eeaf7', 'a5313dff', 'a5f85a15', 'a61f2674', 'a64e4611', 'a699fb00', 'a78176bb', 'a79310a0', 'a85d4709', 'a8d7556c', 'aabf363d', 'aba27056', 'ae3edfdc', 'af902bf9', 'b230c067', 'b527c5c6', 'b60334d2', 'b6afb2da', 'b775ac94', 'b8825c91', 'b8cdaf2b', 'bb43febb', 'bda2d7a6', 'bdad9b1f', 'c0f76784', 'c3f564a4', 'c9f8e694', 'caa06a1f', 'cbded52d', 'ce22a75a', 'd037b0a7', 'd06dbe63', 'd22278a0', 'd23f8c26', 'd2abd087', 'd364b489', 'd43fd935', 'd4f3cd78', 'd511f180', 'd5d6de2d', 'd6ad076f', 'd89b689b', 'd9f24cd1', 'db93a21d', 'ddf7fa4f', 'ded97339', 'e40b9e2f', 'e48d4e1a', 'e5062a87', 'e76a88a6', 'e8593010', 'e9614598', 'ea32f347', 'ea786f4a', 'ec883f72', 'ed36ccf7', 'ef135b50', 'f76d97a5', 'f8a8fe49', 'f8c80d96', 'fcc82909']\n164\nget_keys_with_equal_size_input_output_sorted\n[('0d3d703e', 3), ('25d8a9c8', 3), ('25ff71a9', 3), ('3c9b0459', 3), ('5582e5ca', 3), ('6150a2bd', 3), ('6e02f1e3', 3), ('74dd1130', 3), ('794b24be', 3), ('834ec97d', 3), ('9565186b', 3), ('9dfd6313', 3), ('a5f85a15', 3), ('a85d4709', 3), ('b8cdaf2b', 3), ('d037b0a7', 3), ('d23f8c26', 3), ('ea786f4a', 3), ('ed36ccf7', 3), ('f76d97a5', 3), ('1e0a9b12', 4), ('67a3c6ac', 4), ('67a423a3', 4), ('3618c87e', 5), ('68b16354', 5), ('a699fb00', 5), ('a79310a0', 5), ('d511f180', 5), ('00d62c1b', 6), ('28e73c20', 6), ('93b581b8', 6), ('bda2d7a6', 6), ('bdad9b1f', 6), ('ec883f72', 6), ('05269061', 7), ('3aa6fb7a', 7), ('aabf363d', 7), ('aba27056', 7), ('a5313dff', 8), ('cbded52d', 8), ('08ed6ac7', 9), ('0ca9ddb6', 9), ('1f0c79e5', 9), ('23581191', 9), ('4258a5f9', 9), ('60b61512', 9), ('8f2ea7aa', 9), ('a61f2674', 9), ('b60334d2', 9), ('ce22a75a', 9), ('11852cab', 10), ('1b60fb0c', 10), ('1bfc4729', 10), ('1f642eb9', 10), ('1f876c06', 10), ('2204b7a8', 10), ('22168020', 10), ('22233c11', 10), ('2281f1f4', 10), ('228f6490', 10), ('22eb0ac0', 10), ('2bcee788', 10), ('31aa019c', 10), ('321b1fc6', 10), ('3906de3d', 10), ('3befdf3e', 10), ('444801d8', 10), ('5c0a986e', 10), ('63613498', 10), ('694f12f3', 10), ('6c434453', 10), ('6e19193c', 10), ('6e82a1ae', 10), ('7ddcd7ec', 10), ('8403a5d5', 10), ('868de0fa', 10), ('8d510a79', 10), ('941d9a10', 10), ('952a094c', 10), ('95990924', 10), ('a48eeaf7', 10), ('a78176bb', 10), ('af902bf9', 10), ('b230c067', 10), ('b527c5c6', 10), ('b6afb2da', 10), ('bb43febb', 10), ('d22278a0', 10), ('d2abd087', 10), ('d364b489', 10), ('d43fd935', 10), ('d4f3cd78', 10), ('d5d6de2d', 10), ('d6ad076f', 10), ('d89b689b', 10), ('d9f24cd1', 10), ('db93a21d', 10), ('ddf7fa4f', 10), ('ded97339', 10), ('e40b9e2f', 10), ('e48d4e1a', 10), ('e5062a87', 10), ('e76a88a6', 10), ('e8593010', 10), ('e9614598', 10), ('ea32f347', 10), ('ef135b50', 10), ('f8c80d96', 10), ('fcc82909', 10), ('09629e4f', 11), ('29623171', 11), ('6d0160f0', 11), ('caa06a1f', 11), ('0962bcdd', 12), ('2bee17df', 12), ('44d8ac46', 12), ('508bd3b6', 12), ('85c4e7cd', 12), ('913fb3ed', 12), ('c0f76784', 12), ('c9f8e694', 12), ('36d67576', 13), ('3e980e27', 13), ('7f4411dc', 13), ('9edfc990', 13), ('d06dbe63', 13), ('4093f84a', 14), ('4c5c2cf0', 14), ('3bd67248', 15), ('41e4d17e', 15), ('543a7ed5', 15), ('5521c0d9', 15), ('623ea044', 15), ('6855a6e4', 15), ('810b9b61', 15), ('ae3edfdc', 15), ('f8a8fe49', 15), ('3345333e', 16), ('91714a58', 16), ('b8825c91', 16), ('c3f564a4', 16), ('1e32b0e9', 17), ('32597951', 17), ('29ec7d0e', 18), ('a8d7556c', 18), ('9d9215db', 19), ('06df4c85', 20), ('2dd70a9a', 20), ('6cf79266', 20), ('6d58a25d', 20), ('776ffc46', 20), ('045e512c', 21), ('0dfd9992', 21), ('73251a56', 21), ('890034e9', 21), ('5c2c9af4', 23), ('7df24a62', 23), ('39e1d7f9', 24), ('83302e8f', 24), ('484b58aa', 29), ('264363fd', 30), ('3631a71a', 30), ('a64e4611', 30), ('b775ac94', 30)]\nget_keys_with_inconsistent_input_output_sizes\n['007bbfb7', '017c7c7b', '3af2c5a8', '4522001f', '46f33fce', '4c4377d9', '539a4f51', '62c24649', '67e8384a', '6fa7a44f', '7fe24cdd', '8be77c9e', '8d5021e8', '9172f3a0', 'c3e719e8', 'cce03e0d', 'd13f3404']\n17\nget_keys_with_variable_input_sizes\n['00d62c1b', '025d127b', '05f2a901', '06df4c85', '0a938d79', '0b148d64', '0e206a2e', '10fcaaa3', '1190e5a7', '150deff5', '178fcbfb', '1a07d186', '1c786137', '1caeab9d', '1cf80156', '1e0a9b12', '239be575', '23b5c85d', '253bf280', '25d487eb', '272f95fa', '28e73c20', '2bee17df', '2c608aff', '2dc579da', '2dd70a9a', '2dee498d', '36fdfd69', '39e1d7f9', '3bd67248', '3de23699', '3eda0437', '3f7978a0', '40853293', '4290ef0e', '42a50994', '4347f46a', '4612dd53', '46442a0e', '47c1f68c', '4938f0c2', '49d1d64f', '4be741c5', '4c5c2cf0', '50846271', '50cb2852', '5168d44c', '53b68214', '54d82841', '54d9e175', '56dc2b01', '56ff96f3', '57aa92db', '5ad4f10b', '5daaa586', '623ea044', '6455b5f5', '67385a82', '673ef223', '67a3c6ac', '67a423a3', '68b16354', '6aa20dc0', '6b9890af', '6cdd2623', '6d75e8bb', '6ecd11f4', '6f8cd79b', '72322fa7', '7468f01a', '746b3537', '77fdfe62', '780d0b14', '7837ac64', '7b6016b9', '7b7f7511', '7f4411dc', '810b9b61', '82819916', '83302e8f', '834ec97d', '855e0971', '85c4e7cd', '868de0fa', '8731374e', '88a10436', '8a004b2b', '8e1813be', '8eb1be9a', '913fb3ed', '928ad970', '95990924', '97999447', '97a05b5b', '98cf29f8', '99fa7670', '9aec4887', '9af7a82c', '9dfd6313', '9edfc990', '9f236235', 'a1570a43', 'a2fd1cf0', 'a416b8f3', 'a5313dff', 'a5f85a15', 'a65b410d', 'a699fb00', 'a740d043', 'a79310a0', 'a87f7484', 'a8c38be5', 'aba27056', 'aedd82e4', 'b0c4d837', 'b190f7f5', 'b1948b0a', 'b2862040', 'b527c5c6', 'b548a754', 'b7249182', 'b775ac94', 'b782dc8a', 'b8cdaf2b', 'b9b7f026', 'ba97ae07', 'bd4472b8', 'bda2d7a6', 'be94b721', 'beb8660c', 'c1d99e64', 'c59eb873', 'c8cbb738', 'c909285e', 'caa06a1f', 'ce602527', 'ce9e57f2', 'd07ae81c', 'd0f5fe59', 'd10ecb37', 'd22278a0', 'd23f8c26', 'd4a91cb9', 'd511f180', 'd5d6de2d', 'd687bc17', 'd90796e8', 'd9fac9be', 'db3e9e38', 'db93a21d', 'dbc1a6ce', 'dc1df850', 'dc433765', 'de1cd16c', 'e21d9049', 'e26a3af2', 'e509e548', 'e6721834', 'e73095fd', 'e8dc4411', 'ea786f4a', 'eb281b96', 'eb5a1d5d', 'ec883f72', 'ecdecbb3', 'f15e1fac', 'f1cefba8', 'f35d900a', 'f5b8619d', 'f76d97a5', 'f9012d9b', 'fcb5c309', 'ff28f65a']\n173\nget_input_array_histogram\n{5: 18, 3: 236, 2: 57, 4: 78, 6: 5, 8: 2, 7: 3, 10: 1}\n400\nget_data_for_key {'test': [{'input': [[7, 0, 7], [7, 0, 7], [7, 7, 0]]}], 'train': [{'input': [[0, 7, 7], [7, 7, 7], [0, 7, 7]], 'output': [[0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 7, 7, 0, 7, 7, 0, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 7, 7, 0, 7, 7, 0, 7, 7], [0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 0, 7, 7]]}, {'input': [[4, 0, 4], [0, 0, 0], [0, 4, 0]], 'output': [[4, 0, 4, 0, 0, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]]}, {'input': [[0, 0, 0], [0, 0, 2], [2, 0, 2]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 2], [2, 0, 2, 0, 0, 0, 2, 0, 2]]}, {'input': [[6, 6, 0], [6, 0, 0], [0, 6, 6]], 'output': [[6, 6, 0, 6, 6, 0, 0, 0, 0], [6, 0, 0, 6, 0, 0, 0, 0, 0], [0, 6, 6, 0, 6, 6, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 0, 6, 6, 0], [0, 0, 0, 6, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 6, 0, 6, 6]]}, {'input': [[2, 2, 2], [0, 0, 0], [0, 2, 2]], 'output': [[2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 2, 2]]}]}\n[]\n[]\nget_largest_array_size ('1f85a75f', 900)\nanalyze_arrays {'analysis': {'equal_input_output': ['045e512c', '05269061', '08ed6ac7', '09629e4f', '0962bcdd', '0ca9ddb6', '0d3d703e', '0dfd9992', '11852cab', '1b60fb0c', '1bfc4729', '1e32b0e9', '1f0c79e5', '1f642eb9', '1f876c06', '2204b7a8', '22168020', '22233c11', '2281f1f4', '228f6490', '22eb0ac0', '23581191', '25d8a9c8', '25ff71a9', '264363fd', '29623171', '29c11459', '29ec7d0e', '2bcee788', '31aa019c', '321b1fc6', '32597951', '3345333e', '3618c87e', '3631a71a', '363442ee', '36d67576', '3906de3d', '3aa6fb7a', '3befdf3e', '3c9b0459', '3e980e27', '4093f84a', '41e4d17e', '4258a5f9', '444801d8', '447fd412', '44d8ac46', '484b58aa', '508bd3b6', '543a7ed5', '5521c0d9', '5582e5ca', '5c0a986e', '5c2c9af4', '60b61512', '6150a2bd', '63613498', '6855a6e4', '694f12f3', '6a1e5592', '6c434453', '6cf79266', '6d0160f0', '6d58a25d', '6e02f1e3', '6e19193c', '6e82a1ae', '73251a56', '74dd1130', '760b3cac', '776ffc46', '794b24be', '7ddcd7ec', '7df24a62', '8403a5d5', '890034e9', '8d510a79', '8e5a5113', '8f2ea7aa', '90f3ed37', '91714a58', '93b581b8', '941d9a10', '952a094c', '9565186b', '9d9215db', 'a48eeaf7', 'a61f2674', 'a64e4611', 'a78176bb', 'a85d4709', 'a8d7556c', 'a9f96cdd', 'aabf363d', 'ae3edfdc', 'af902bf9', 'b230c067', 'b60334d2', 'b6afb2da', 'b8825c91', 'bb43febb', 'bdad9b1f', 'c0f76784', 'c3f564a4', 'c9f8e694', 'cbded52d', 'ce22a75a', 'd037b0a7', 'd06dbe63', 'd2abd087', 'd364b489', 'd43fd935', 'd4f3cd78', 'd6ad076f', 'd89b689b', 'd8c310e9', 'd9f24cd1', 'ddf7fa4f', 'ded97339', 'e40b9e2f', 'e48d4e1a', 'e5062a87', 'e76a88a6', 'e8593010', 'e9614598', 'e9afcf9a', 'ea32f347', 'ed36ccf7', 'ef135b50', 'f25ffba3', 'f8a8fe49', 'f8c80d96', 'fcc82909'], 'consistent_but_different_sizes': ['007bbfb7', '017c7c7b', '0520fde7', '137eaa0f', '1b2d62fb', '1fad071e', '2013d3e2', '27a28665', '28bf18c6', '3428a4f5', '39a8645d', '3af2c5a8', '445eab21', '44f52bb0', '4522001f', '46f33fce', '48d8fb45', '4c4377d9', '5117e062', '539a4f51', '5614dbcf', '5bd6f4ac', '62c24649', '6430c8c4', '662c240a', '6773b310', '67e8384a', '681b3aeb', '6d0aefbc', '6fa7a44f', '75b8110e', '7c008303', '7fe24cdd', '80af3007', '88a62173', '8be77c9e', '8d5021e8', '9172f3a0', '94f9d214', '995c5fa3', '99b1bc43', '9ecd008a', 'a61ba2ce', 'a68b268e', 'ae4f1146', 'bc1d5164', 'c3e719e8', 'c9e6f938', 'cce03e0d', 'cdecee7f', 'ce4f8723', 'cf98881b', 'd13f3404', 'd4469b4b', 'dae9d2b5', 'dc0a314f', 'e3497940', 'e98196ab', 'f2829549', 'f8ff0b80', 'fafffa47', 'ff805c23'], 'variable_output_sizes': ['00d62c1b', '025d127b', '05f2a901', '06df4c85', '0a938d79', '0b148d64', '0e206a2e', '10fcaaa3', '1190e5a7', '150deff5', '178fcbfb', '1a07d186', '1c786137', '1caeab9d', '1cf80156', '1e0a9b12', '1f85a75f', '234bbc79', '239be575', '23b5c85d', '253bf280', '25d487eb', '272f95fa', '28e73c20', '2bee17df', '2c608aff', '2dc579da', '2dd70a9a', '2dee498d', '36fdfd69', '39e1d7f9', '3ac3eb23', '3bd67248', '3bdb4ada', '3de23699', '3eda0437', '3f7978a0', '40853293', '4290ef0e', '42a50994', '4347f46a', '4612dd53', '46442a0e', '469497ad', '47c1f68c', '4938f0c2', '496994bd', '49d1d64f', '4be741c5', '4c5c2cf0', '50846271', '50cb2852', '5168d44c', '53b68214', '54d82841', '54d9e175', '56dc2b01', '56ff96f3', '57aa92db', '5ad4f10b', '5daaa586', '623ea044', '6455b5f5', '67385a82', '673ef223', '67a3c6ac', '67a423a3', '68b16354', '6aa20dc0', '6b9890af', '6cdd2623', '6d75e8bb', '6ecd11f4', '6f8cd79b', '72322fa7', '72ca375d', '7447852a', '7468f01a', '746b3537', '77fdfe62', '780d0b14', '7837ac64', '7b6016b9', '7b7f7511', '7e0986d6', '7f4411dc', '810b9b61', '82819916', '83302e8f', '834ec97d', '846bdb03', '855e0971', '85c4e7cd', '868de0fa', '8731374e', '88a10436', '8a004b2b', '8e1813be', '8eb1be9a', '8efcae92', '90c28cc7', '913fb3ed', '91413438', '928ad970', '95990924', '963e52fc', '97999447', '97a05b5b', '98cf29f8', '99fa7670', '9aec4887', '9af7a82c', '9dfd6313', '9edfc990', '9f236235', 'a1570a43', 'a2fd1cf0', 'a3325580', 'a3df8b1e', 'a416b8f3', 'a5313dff', 'a5f85a15', 'a65b410d', 'a699fb00', 'a740d043', 'a79310a0', 'a87f7484', 'a8c38be5', 'aba27056', 'ac0a08a4', 'aedd82e4', 'b0c4d837', 'b190f7f5', 'b1948b0a', 'b27ca6d3', 'b2862040', 'b527c5c6', 'b548a754', 'b7249182', 'b775ac94', 'b782dc8a', 'b8cdaf2b', 'b91ae062', 'b94a9452', 'b9b7f026', 'ba26e723', 'ba97ae07', 'bbc9ae5d', 'bd4472b8', 'bda2d7a6', 'be94b721', 'beb8660c', 'c1d99e64', 'c444b776', 'c59eb873', 'c8cbb738', 'c8f0f002', 'c909285e', 'caa06a1f', 'ce602527', 'ce9e57f2', 'd07ae81c', 'd0f5fe59', 'd10ecb37', 'd22278a0', 'd23f8c26', 'd406998b', 'd4a91cb9', 'd511f180', 'd5d6de2d', 'd631b094', 'd687bc17', 'd90796e8', 'd9fac9be', 'db3e9e38', 'db93a21d', 'dbc1a6ce', 'dc1df850', 'dc433765', 'de1cd16c', 'e179c5f4', 'e21d9049', 'e26a3af2', 'e509e548', 'e50d258f', 'e6721834', 'e73095fd', 'e8dc4411', 'ea786f4a', 'eb281b96', 'eb5a1d5d', 'ec883f72', 'ecdecbb3', 'f15e1fac', 'f1cefba8', 'f25fbde4', 'f35d900a', 'f5b8619d', 'f76d97a5', 'f8b3ba0a', 'f9012d9b', 'fcb5c309', 'feca6190', 'ff28f65a']}, 'counts': {'equal_input_output': 134, 'consistent_but_different_sizes': 62, 'variable_output_sizes': 204}}\nget_all_keys ['007bbfb7', '00d62c1b', '017c7c7b', '025d127b', '045e512c', '0520fde7', '05269061', '05f2a901', '06df4c85', '08ed6ac7', '09629e4f', '0962bcdd', '0a938d79', '0b148d64', '0ca9ddb6', '0d3d703e', '0dfd9992', '0e206a2e', '10fcaaa3', '11852cab', '1190e5a7', '137eaa0f', '150deff5', '178fcbfb', '1a07d186', '1b2d62fb', '1b60fb0c', '1bfc4729', '1c786137', '1caeab9d', '1cf80156', '1e0a9b12', '1e32b0e9', '1f0c79e5', '1f642eb9', '1f85a75f', '1f876c06', '1fad071e', '2013d3e2', '2204b7a8', '22168020', '22233c11', '2281f1f4', '228f6490', '22eb0ac0', '234bbc79', '23581191', '239be575', '23b5c85d', '253bf280', '25d487eb', '25d8a9c8', '25ff71a9', '264363fd', '272f95fa', '27a28665', '28bf18c6', '28e73c20', '29623171', '29c11459', '29ec7d0e', '2bcee788', '2bee17df', '2c608aff', '2dc579da', '2dd70a9a', '2dee498d', '31aa019c', '321b1fc6', '32597951', '3345333e', '3428a4f5', '3618c87e', '3631a71a', '363442ee', '36d67576', '36fdfd69', '3906de3d', '39a8645d', '39e1d7f9', '3aa6fb7a', '3ac3eb23', '3af2c5a8', '3bd67248', '3bdb4ada', '3befdf3e', '3c9b0459', '3de23699', '3e980e27', '3eda0437', '3f7978a0', '40853293', '4093f84a', '41e4d17e', '4258a5f9', '4290ef0e', '42a50994', '4347f46a', '444801d8', '445eab21', '447fd412', '44d8ac46', '44f52bb0', '4522001f', '4612dd53', '46442a0e', '469497ad', '46f33fce', '47c1f68c', '484b58aa', '48d8fb45', '4938f0c2', '496994bd', '49d1d64f', '4be741c5', '4c4377d9', '4c5c2cf0', '50846271', '508bd3b6', '50cb2852', '5117e062', '5168d44c', '539a4f51', '53b68214', '543a7ed5', '54d82841', '54d9e175', '5521c0d9', '5582e5ca', '5614dbcf', '56dc2b01', '56ff96f3', '57aa92db', '5ad4f10b', '5bd6f4ac', '5c0a986e', '5c2c9af4', '5daaa586', '60b61512', '6150a2bd', '623ea044', '62c24649', '63613498', '6430c8c4', '6455b5f5', '662c240a', '67385a82', '673ef223', '6773b310', '67a3c6ac', '67a423a3', '67e8384a', '681b3aeb', '6855a6e4', '68b16354', '694f12f3', '6a1e5592', '6aa20dc0', '6b9890af', '6c434453', '6cdd2623', '6cf79266', '6d0160f0', '6d0aefbc', '6d58a25d', '6d75e8bb', '6e02f1e3', '6e19193c', '6e82a1ae', '6ecd11f4', '6f8cd79b', '6fa7a44f', '72322fa7', '72ca375d', '73251a56', '7447852a', '7468f01a', '746b3537', '74dd1130', '75b8110e', '760b3cac', '776ffc46', '77fdfe62', '780d0b14', '7837ac64', '794b24be', '7b6016b9', '7b7f7511', '7c008303', '7ddcd7ec', '7df24a62', '7e0986d6', '7f4411dc', '7fe24cdd', '80af3007', '810b9b61', '82819916', '83302e8f', '834ec97d', '8403a5d5', '846bdb03', '855e0971', '85c4e7cd', '868de0fa', '8731374e', '88a10436', '88a62173', '890034e9', '8a004b2b', '8be77c9e', '8d5021e8', '8d510a79', '8e1813be', '8e5a5113', '8eb1be9a', '8efcae92', '8f2ea7aa', '90c28cc7', '90f3ed37', '913fb3ed', '91413438', '91714a58', '9172f3a0', '928ad970', '93b581b8', '941d9a10', '94f9d214', '952a094c', '9565186b', '95990924', '963e52fc', '97999447', '97a05b5b', '98cf29f8', '995c5fa3', '99b1bc43', '99fa7670', '9aec4887', '9af7a82c', '9d9215db', '9dfd6313', '9ecd008a', '9edfc990', '9f236235', 'a1570a43', 'a2fd1cf0', 'a3325580', 'a3df8b1e', 'a416b8f3', 'a48eeaf7', 'a5313dff', 'a5f85a15', 'a61ba2ce', 'a61f2674', 'a64e4611', 'a65b410d', 'a68b268e', 'a699fb00', 'a740d043', 'a78176bb', 'a79310a0', 'a85d4709', 'a87f7484', 'a8c38be5', 'a8d7556c', 'a9f96cdd', 'aabf363d', 'aba27056', 'ac0a08a4', 'ae3edfdc', 'ae4f1146', 'aedd82e4', 'af902bf9', 'b0c4d837', 'b190f7f5', 'b1948b0a', 'b230c067', 'b27ca6d3', 'b2862040', 'b527c5c6', 'b548a754', 'b60334d2', 'b6afb2da', 'b7249182', 'b775ac94', 'b782dc8a', 'b8825c91', 'b8cdaf2b', 'b91ae062', 'b94a9452', 'b9b7f026', 'ba26e723', 'ba97ae07', 'bb43febb', 'bbc9ae5d', 'bc1d5164', 'bd4472b8', 'bda2d7a6', 'bdad9b1f', 'be94b721', 'beb8660c', 'c0f76784', 'c1d99e64', 'c3e719e8', 'c3f564a4', 'c444b776', 'c59eb873', 'c8cbb738', 'c8f0f002', 'c909285e', 'c9e6f938', 'c9f8e694', 'caa06a1f', 'cbded52d', 'cce03e0d', 'cdecee7f', 'ce22a75a', 'ce4f8723', 'ce602527', 'ce9e57f2', 'cf98881b', 'd037b0a7', 'd06dbe63', 'd07ae81c', 'd0f5fe59', 'd10ecb37', 'd13f3404', 'd22278a0', 'd23f8c26', 'd2abd087', 'd364b489', 'd406998b', 'd43fd935', 'd4469b4b', 'd4a91cb9', 'd4f3cd78', 'd511f180', 'd5d6de2d', 'd631b094', 'd687bc17', 'd6ad076f', 'd89b689b', 'd8c310e9', 'd90796e8', 'd9f24cd1', 'd9fac9be', 'dae9d2b5', 'db3e9e38', 'db93a21d', 'dbc1a6ce', 'dc0a314f', 'dc1df850', 'dc433765', 'ddf7fa4f', 'de1cd16c', 'ded97339', 'e179c5f4', 'e21d9049', 'e26a3af2', 'e3497940', 'e40b9e2f', 'e48d4e1a', 'e5062a87', 'e509e548', 'e50d258f', 'e6721834', 'e73095fd', 'e76a88a6', 'e8593010', 'e8dc4411', 'e9614598', 'e98196ab', 'e9afcf9a', 'ea32f347', 'ea786f4a', 'eb281b96', 'eb5a1d5d', 'ec883f72', 'ecdecbb3', 'ed36ccf7', 'ef135b50', 'f15e1fac', 'f1cefba8', 'f25fbde4', 'f25ffba3', 'f2829549', 'f35d900a', 'f5b8619d', 'f76d97a5', 'f8a8fe49', 'f8b3ba0a', 'f8c80d96', 'f8ff0b80', 'f9012d9b', 'fafffa47', 'fcb5c309', 'fcc82909', 'feca6190', 'ff28f65a', 'ff805c23']\n400\nget_data_for_key [[7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 7, 0, 0, 0, 0, 7, 7, 0], [7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 7, 0, 0, 0, 0, 7, 7, 0], [7, 0, 7, 7, 0, 7, 0, 0, 0], [7, 0, 7, 7, 0, 7, 0, 0, 0], [7, 7, 0, 7, 7, 0, 0, 0, 0]]\n[]",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "helpers.html#datamanagersingleton",
    "href": "helpers.html#datamanagersingleton",
    "title": "Helper classes",
    "section": "DataManagerSingleton",
    "text": "DataManagerSingleton\n\nsource\n\nDataManagerSingleton\n\n DataManagerSingleton (folder:str, prefix:str, show_timing:bool=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# From: https://www.kaggle.com/code/allegich/arc-2024-show-all-400-training-tasks?scriptVersionId=190186517&cellId=12\ndef plot_task(task, task_solutions, i, t):\n    \"\"\"    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app    \"\"\"    \n    \n    num_train = len(task['train'])\n    num_test  = len(task['test'])\n    \n    w=num_train+num_test\n    fig, axs  = plt.subplots(2, w, figsize=(3*w ,3*2))\n    plt.suptitle(f'Set #{i}, {t}:', fontsize=20, fontweight='bold', y=1)\n    #plt.subplots_adjust(hspace = 0.15)\n    #plt.subplots_adjust(wspace=20, hspace=20)\n    \n    for j in range(num_train):     \n        plot_one(axs[0, j], j,'train', 'input')\n        plot_one(axs[1, j], j,'train', 'output')        \n    \n    \n    plot_one(axs[0, j+1], 0, 'test', 'input')\n\n\n    answer = task_solutions\n    input_matrix = answer\n    \n    axs[1, j+1].imshow(input_matrix, cmap=cmap, norm=norm)\n    axs[1, j+1].grid(True, which = 'both',color = 'lightgrey', linewidth = 0.5)\n    axs[1, j+1].set_yticks([x-0.5 for x in range(1 + len(input_matrix))])\n    axs[1, j+1].set_xticks([x-0.5 for x in range(1 + len(input_matrix[0]))])     \n    axs[1, j+1].set_xticklabels([])\n    axs[1, j+1].set_yticklabels([])\n    axs[1, j+1].set_title('Test output')\n\n    axs[1, j+1] = plt.figure(1).add_subplot(111)\n    axs[1, j+1].set_xlim([0, num_train+1])\n    \n    for m in range(1, num_train):\n        axs[1, j+1].plot([m,m],[0,1],'--', linewidth=1, color = 'black')\n    \n    axs[1, j+1].plot([num_train,num_train],[0,1],'-', linewidth=3, color = 'black')\n\n    axs[1, j+1].axis(\"off\")\n\n    fig.patch.set_linewidth(5)\n    fig.patch.set_edgecolor('black') \n    fig.patch.set_facecolor('#dddddd')\n   \n    plt.tight_layout()\n    \n    print(f'#{i}, {t}') # for fast and convinience search\n    plt.show()  \n    \n    print()\n    print()\n    \n    \ndef plot_one(ax, i, train_or_test, input_or_output):\n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True, which = 'both',color = 'lightgrey', linewidth = 0.5)\n    \n    plt.setp(plt.gcf().get_axes(), xticklabels=[], yticklabels=[])\n    ax.set_xticks([x-0.5 for x in range(1 + len(input_matrix[0]))])     \n    ax.set_yticks([x-0.5 for x in range(1 + len(input_matrix))])\n    \n    ax.set_title(train_or_test + ' ' + input_or_output)\n\n\ncode = '00000001'\ndata_mgr = DataManagerSingleton.get_instance(folder = 'c:/tmp/arc-prize-2024', prefix = 'arc-agi_simple_', show_timing=True)\ndata = data_mgr.get_data_for_code(code)\nprint(data)\nout = data_mgr.get_solutions_for_code(code)\nprint(out)\nprint(data_mgr.get_num_arrays_for_code(code))\n\nExecution time of __init__: 0.0000 seconds\nExecution time of __init__: 0.0000 seconds\n{'test': [{'input': [[2]]}], 'train': [{'input': [[3]], 'output': [[4]]}, {'input': [[7]], 'output': [[8]]}, {'input': [[1]], 'output': [[2]]}]}\n[[3]]\n3\n\n\n\ncode = '00000003'\ndata_mgr1 = DataManagerSingleton.get_instance()\ndata = data_mgr1.get_data_for_code(code)\nprint(data)\nout = data_mgr1.get_solutions_for_code(code)\nprint(out)\nprint(data_mgr1.get_num_arrays_for_code(code))\n\n{'test': [{'input': [[2, 2], [2, 2]]}], 'train': [{'input': [[3, 3], [3, 3]], 'output': [[4, 4], [4, 4]]}, {'input': [[7, 7], [7, 7]], 'output': [[8, 8], [8, 8]]}, {'input': [[1, 1], [1, 1]], 'output': [[2, 2], [2, 2]]}]}\n[[3, 3], [3, 3]]\n3\n\n\n\n# From: https://www.kaggle.com/code/allegich/arc-2024-show-all-400-training-tasks?scriptVersionId=190186517&cellId=11\n# 0:black, 1:blue, 2:red, 3:green, 4:yellow, # 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\n# rgb_values = [\n#    (0, 0, 0), (0, 116, 217), (255, 65, 54), (46, 204, 64), (255, 220, 0), (170, 170, 170), (240, 18, 190), (255, 133, 27), (127, 219, 255), (135, 12, 37)]\nimport matplotlib.pyplot as plt\nfrom   matplotlib import colors\n\ncmap = colors.ListedColormap(\n    ['#000000', '#0074D9', '#FF4136', '#2ECC40', '#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n\nplt.figure(figsize=(3, 1), dpi=150)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\n\n\n\n\n\n\n\n\ncode = '00000003'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[2, 2], [2, 2]]}], 'train': [{'input': [[3, 3], [3, 3]], 'output': [[4, 4], [4, 4]]}, {'input': [[7, 7], [7, 7]], 'output': [[8, 8], [8, 8]]}, {'input': [[1, 1], [1, 1]], 'output': [[2, 2], [2, 2]]}]}\n[[3, 3], [3, 3]]\n#15, 00000003\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '00000007'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2]]}], 'train': [{'input': [[3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3]], 'output': [[6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6]]}, {'input': [[6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6]], 'output': [[9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9]]}, {'input': [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]], 'output': [[4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4]]}]}\n[5, 5, 5, 5, 5, 5, 5, 5, 5]\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[23], line 7\n      5 task_solution = data_mgr.get_solutions_for_code(code)\n      6 print(task_solution)\n----&gt; 7 plot_task(task,  task_solution, 15, code)\n\nCell In[17], line 26, in plot_task(task, task_solutions, i, t)\n     23 answer = task_solutions\n     24 input_matrix = answer\n---&gt; 26 axs[1, j+1].imshow(input_matrix, cmap=cmap, norm=norm)\n     27 axs[1, j+1].grid(True, which = 'both',color = 'lightgrey', linewidth = 0.5)\n     28 axs[1, j+1].set_yticks([x-0.5 for x in range(1 + len(input_matrix))])\n\nFile c:\\Users\\ruper\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\matplotlib\\_api\\deprecation.py:456, in make_keyword_only.&lt;locals&gt;.wrapper(*args, **kwargs)\n    450 if len(args) &gt; name_idx:\n    451     warn_deprecated(\n    452         since, message=\"Passing the %(name)s %(obj_type)s \"\n    453         \"positionally is deprecated since Matplotlib %(since)s; the \"\n    454         \"parameter will become keyword-only %(removal)s.\",\n    455         name=name, obj_type=f\"parameter of {func.__name__}()\")\n--&gt; 456 return func(*args, **kwargs)\n\nFile c:\\Users\\ruper\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\matplotlib\\__init__.py:1412, in _preprocess_data.&lt;locals&gt;.inner(ax, data, *args, **kwargs)\n   1409 @functools.wraps(func)\n   1410 def inner(ax, *args, data=None, **kwargs):\n   1411     if data is None:\n-&gt; 1412         return func(ax, *map(sanitize_sequence, args), **kwargs)\n   1414     bound = new_sig.bind(ax, *args, **kwargs)\n   1415     auto_label = (bound.arguments.get(label_namer)\n   1416                   or bound.kwargs.get(label_namer))\n\nFile c:\\Users\\ruper\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\matplotlib\\axes\\_axes.py:5488, in Axes.imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, interpolation_stage, filternorm, filterrad, resample, url, **kwargs)\n   5481 self.set_aspect(aspect)\n   5482 im = mimage.AxesImage(self, cmap, norm, interpolation,\n   5483                       origin, extent, filternorm=filternorm,\n   5484                       filterrad=filterrad, resample=resample,\n   5485                       interpolation_stage=interpolation_stage,\n   5486                       **kwargs)\n-&gt; 5488 im.set_data(X)\n   5489 im.set_alpha(alpha)\n   5490 if im.get_clip_path() is None:\n   5491     # image does not already have clipping set, clip to axes patch\n\nFile c:\\Users\\ruper\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\matplotlib\\image.py:715, in _ImageBase.set_data(self, A)\n    711     self._A = self._A[:, :, 0]\n    713 if not (self._A.ndim == 2\n    714         or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):\n--&gt; 715     raise TypeError(\"Invalid shape {} for image data\"\n    716                     .format(self._A.shape))\n    718 if self._A.ndim == 3:\n    719     # If the input data has values outside the valid range (after\n    720     # normalisation), we issue a warning and then clip X to the bounds\n    721     # - otherwise casting wraps extreme values, hiding outliers and\n    722     # making reliable interpretation impossible.\n    723     high = 255 if np.issubdtype(self._A.dtype, np.integer) else 1\n\nTypeError: Invalid shape (9,) for image data\n\n\n\n\n\n\n\n\n\n\n\ncode = '007bbfb7'\ndata_mgr.reload_data(folder = 'c:/tmp/arc-prize-2024', prefix = 'arc-agi_training_')\ndata = data_mgr.get_data_for_code(code)\nprint(data)\nout = data_mgr.get_solutions_for_code(code)\nprint(out)\nprint(data_mgr.get_num_arrays_for_code(code))\n\nExecution time of reload_data: 0.1050 seconds\nExecution time of reload_data: 0.0130 seconds\n{'test': [{'input': [[7, 0, 7], [7, 0, 7], [7, 7, 0]]}], 'train': [{'input': [[0, 7, 7], [7, 7, 7], [0, 7, 7]], 'output': [[0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 7, 7, 0, 7, 7, 0, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 7, 7, 0, 7, 7, 0, 7, 7], [0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 0, 7, 7]]}, {'input': [[4, 0, 4], [0, 0, 0], [0, 4, 0]], 'output': [[4, 0, 4, 0, 0, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]]}, {'input': [[0, 0, 0], [0, 0, 2], [2, 0, 2]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 2], [2, 0, 2, 0, 0, 0, 2, 0, 2]]}, {'input': [[6, 6, 0], [6, 0, 0], [0, 6, 6]], 'output': [[6, 6, 0, 6, 6, 0, 0, 0, 0], [6, 0, 0, 6, 0, 0, 0, 0, 0], [0, 6, 6, 0, 6, 6, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 0, 6, 6, 0], [0, 0, 0, 6, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 6, 0, 6, 6]]}, {'input': [[2, 2, 2], [0, 0, 0], [0, 2, 2]], 'output': [[2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 2, 2]]}]}\n[[7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 7, 0, 0, 0, 0, 7, 7, 0], [7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 0, 7, 0, 0, 0, 7, 0, 7], [7, 7, 0, 0, 0, 0, 7, 7, 0], [7, 0, 7, 7, 0, 7, 0, 0, 0], [7, 0, 7, 7, 0, 7, 0, 0, 0], [7, 7, 0, 7, 7, 0, 0, 0, 0]]\n5\n\n\n\ncode = '0d3d703e'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[8, 1, 3], [8, 1, 3], [8, 1, 3]]}], 'train': [{'input': [[3, 1, 2], [3, 1, 2], [3, 1, 2]], 'output': [[4, 5, 6], [4, 5, 6], [4, 5, 6]]}, {'input': [[2, 3, 8], [2, 3, 8], [2, 3, 8]], 'output': [[6, 4, 9], [6, 4, 9], [6, 4, 9]]}, {'input': [[5, 8, 6], [5, 8, 6], [5, 8, 6]], 'output': [[1, 9, 2], [1, 9, 2], [1, 9, 2]]}, {'input': [[9, 4, 2], [9, 4, 2], [9, 4, 2]], 'output': [[8, 3, 6], [8, 3, 6], [8, 3, 6]]}]}\n[[9, 5, 4], [9, 5, 4], [9, 5, 4]]\n#15, 0d3d703e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '25d8a9c8'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[4, 4, 4], [3, 2, 3], [8, 8, 8]]}], 'train': [{'input': [[4, 4, 4], [2, 3, 2], [2, 3, 3]], 'output': [[5, 5, 5], [0, 0, 0], [0, 0, 0]]}, {'input': [[7, 3, 3], [6, 6, 6], [3, 7, 7]], 'output': [[0, 0, 0], [5, 5, 5], [0, 0, 0]]}, {'input': [[2, 9, 2], [4, 4, 4], [9, 9, 9]], 'output': [[0, 0, 0], [5, 5, 5], [5, 5, 5]]}, {'input': [[2, 2, 4], [2, 2, 4], [1, 1, 1]], 'output': [[0, 0, 0], [0, 0, 0], [5, 5, 5]]}]}\n[[5, 5, 5], [0, 0, 0], [5, 5, 5]]\n#15, 25d8a9c8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '25ff71a9'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[2, 0, 0], [2, 0, 0], [0, 0, 0]]}, {'input': [[0, 0, 0], [0, 1, 0], [0, 0, 0]]}], 'train': [{'input': [[1, 1, 1], [0, 0, 0], [0, 0, 0]], 'output': [[0, 0, 0], [1, 1, 1], [0, 0, 0]]}, {'input': [[0, 0, 0], [1, 1, 1], [0, 0, 0]], 'output': [[0, 0, 0], [0, 0, 0], [1, 1, 1]]}, {'input': [[0, 1, 0], [1, 1, 0], [0, 0, 0]], 'output': [[0, 0, 0], [0, 1, 0], [1, 1, 0]]}, {'input': [[0, 2, 2], [0, 0, 2], [0, 0, 0]], 'output': [[0, 0, 0], [0, 2, 2], [0, 0, 2]]}]}\n[[0, 0, 0], [2, 0, 0], [2, 0, 0]]\n#15, 25ff71a9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '3c9b0459'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[6, 4, 4], [6, 6, 4], [4, 6, 7]]}], 'train': [{'input': [[2, 2, 1], [2, 1, 2], [2, 8, 1]], 'output': [[1, 8, 2], [2, 1, 2], [1, 2, 2]]}, {'input': [[9, 2, 4], [2, 4, 4], [2, 9, 2]], 'output': [[2, 9, 2], [4, 4, 2], [4, 2, 9]]}, {'input': [[8, 8, 8], [5, 5, 8], [8, 5, 5]], 'output': [[5, 5, 8], [8, 5, 5], [8, 8, 8]]}, {'input': [[3, 2, 9], [9, 9, 9], [2, 3, 3]], 'output': [[3, 3, 2], [9, 9, 9], [9, 2, 3]]}]}\n[[7, 6, 4], [4, 6, 6], [4, 4, 6]]\n#15, 3c9b0459\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '5582e5ca'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[8, 8, 6], [4, 6, 9], [8, 3, 0]]}], 'train': [{'input': [[4, 4, 8], [6, 4, 3], [6, 3, 0]], 'output': [[4, 4, 4], [4, 4, 4], [4, 4, 4]]}, {'input': [[6, 8, 9], [1, 8, 1], [9, 4, 9]], 'output': [[9, 9, 9], [9, 9, 9], [9, 9, 9]]}, {'input': [[4, 6, 9], [6, 4, 1], [8, 8, 6]], 'output': [[6, 6, 6], [6, 6, 6], [6, 6, 6]]}]}\n[[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n#15, 5582e5ca\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '6150a2bd'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[6, 3, 5], [6, 8, 0], [4, 0, 0]]}], 'train': [{'input': [[3, 3, 8], [3, 7, 0], [5, 0, 0]], 'output': [[0, 0, 5], [0, 7, 3], [8, 3, 3]]}, {'input': [[5, 5, 2], [1, 0, 0], [0, 0, 0]], 'output': [[0, 0, 0], [0, 0, 1], [2, 5, 5]]}]}\n[[0, 0, 4], [0, 8, 6], [5, 3, 6]]\n#15, 6150a2bd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '150deff5'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[0, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0], [0, 0, 5, 5, 0, 0, 5, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}], 'train': [{'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 2, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 2, 8, 8, 2, 0, 0, 0], [0, 8, 8, 2, 8, 8, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 8, 8, 0, 0, 0], [0, 0, 0, 0, 2, 8, 8, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 8, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 8, 8, 0, 0, 0], [0, 0, 0, 2, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]}]}\n[[0, 0, 8, 8, 0, 2, 2, 2, 0, 0, 0], [0, 0, 8, 8, 0, 0, 2, 0, 0, 0, 0], [0, 2, 2, 2, 8, 8, 2, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n#15, 150deff5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '0ca9ddb6'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]}], 'train': [{'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 7, 1, 7, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0], [0, 0, 7, 0, 0, 0, 2, 0, 0], [0, 7, 1, 7, 0, 4, 0, 4, 0], [0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [4, 0, 4, 0, 0, 7, 1, 7, 0], [0, 2, 0, 0, 0, 0, 7, 0, 0], [4, 0, 4, 0, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 7, 1, 7, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0]]}]}\n[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 4, 0, 4, 0, 7, 1, 7, 0], [0, 0, 2, 0, 0, 0, 7, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4], [0, 6, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4]]\n#15, 0ca9ddb6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode = '00d62c1b'\ntask = data_mgr.get_data_for_code(code)\nprint(task)\ntask_solution = data_mgr.get_solutions_for_code(code)\nprint(task_solution)\nplot_task(task,  task_solution, 15, code)\n\n{'test': [{'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}], 'train': [{'input': [[0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 0, 3, 0, 0], [0, 0, 3, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 4, 3, 0, 0], [0, 0, 3, 4, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 3, 0, 3, 3, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 3, 4, 3, 0, 0], [0, 0, 0, 3, 0, 3, 3, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 3, 3, 0, 3, 3, 0, 3, 0, 0], [3, 0, 0, 3, 0, 0, 3, 0, 3, 0], [0, 0, 0, 3, 0, 0, 3, 3, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 3, 3, 0, 3, 3, 0, 3, 0, 0], [3, 0, 0, 3, 4, 4, 3, 4, 3, 0], [0, 0, 0, 3, 4, 4, 3, 3, 0, 0], [0, 0, 0, 3, 4, 4, 3, 0, 0, 0], [0, 0, 0, 3, 4, 4, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 0, 3, 3, 0], [0, 0, 0, 3, 3, 0, 0, 3, 0, 3], [0, 0, 0, 3, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 3, 4, 4, 3, 0, 0, 0, 0], [0, 0, 3, 4, 4, 3, 0, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 0, 3, 3, 0], [0, 0, 0, 3, 3, 0, 0, 3, 4, 3], [0, 0, 0, 3, 4, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0]]}, {'input': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'output': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 4, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 3, 3, 0, 0, 3, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 4, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}]}\n[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 4, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 4, 4, 4, 4, 3, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 4, 4, 4, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 3, 4, 4, 4, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 4, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n#15, 00d62c1b",
    "crumbs": [
      "Helper classes"
    ]
  },
  {
    "objectID": "plotting.html",
    "href": "plotting.html",
    "title": "Plotting",
    "section": "",
    "text": "source\n\nSubPlotter\n\n SubPlotter (width, height, title, plotsconfig=[['title', 'xlabel',\n             'ylabel', 1, 0, 111, ['line1']]], linewidth=2,\n             legend_fontsize=8)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nrun_hpct_animation\n\n run_hpct_animation (hpct, counter=None, plotter=None, interval=1,\n                     verbose=False)\n\n\nwindow = 20\nplotter = SubPlotter(12, 4, \"MyData\", [[\"Data0\", \"time\", \"y\", 2, window, 121, ['line1','line2']], \n                                       [\"Data1\", \"time\", \"y\", 2, window, 122, ['line1','line2']]])\n\nfor x in  range(10):\n    y11 = random()-0.5\n    y12 = random()-0.5\n    plotter.add_data(0, x, [y11, y12])\n    y21 = random()-0.5\n    y22 = random()-0.5                \n    plotter.add_data(1, x, [y21, y22])\n                    \nplotter.draw()\n\n\n\n\n\n\n\n\n\nwindow = 20\nplotter = SubPlotter(12, 8, \"MyData\", [[\"Data0\", \"time\", \"y\", 2, window, 211, ['line1','line2']], \n                                       [\"Data1\", \"time\", \"y\", 2, window, 212, ['line1','line2']]])\n\nfor x in  range(10):\n    y11 = random()-0.5\n    y12 = random()-0.5\n    plotter.add_data(0, x, [y11, y12])\n    y21 = random()-0.5\n    y22 = random()-0.5                \n    plotter.add_data(1, x, [y21, y22])\n                    \nplotter.draw()\n\n\n\n\n\n\n\n\n\nwindow = 20\nplotter = SubPlotter(12, 8, \"MyData\", [[\"Data0\", \"time\", \"y\", 2, window, 221, ['line1','line2']], \n                                       [\"Data1\", \"time\", \"y\", 2, window, 222, ['line1','line2']],\n                                       [\"Data2\", \"time\", \"y\", 2, window, 212, ['line1','line2']]])\n\nfor x in  range(10):\n    y11 = random()-0.5\n    y12 = random()-0.5\n    plotter.add_data(0, x, [y11, y12])\n    y21 = random()-0.5\n    y22 = random()-0.5                \n    plotter.add_data(1, x, [y21, y22])\n    y21 = random()-0.5\n    y22 = random()-0.5                \n    plotter.add_data(2, x, [y21, y22])\n                    \nplotter.draw()",
    "crumbs": [
      "Plotting"
    ]
  },
  {
    "objectID": "webots.html",
    "href": "webots.html",
    "title": "Webots",
    "section": "",
    "text": "source\n\nWebotsHelper\n\n WebotsHelper (name=None, mode=1)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Webots"
    ]
  },
  {
    "objectID": "network.html",
    "href": "network.html",
    "title": "Network",
    "section": "",
    "text": "source\n\nServer\n\n Server (host='localhost', port=6666, buf_size=1024)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nClient\n\n Client (host='localhost', port=6666, buf_size=1024)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nClientConnectionManager\n\n ClientConnectionManager (host='localhost', port=6666, buf_size=1024)\n\nA utility for managing a client socket connection.\n\nsource\n\n\nServerConnectionManager\n\n ServerConnectionManager (host='localhost', port=6666, buf_size=1024)\n\nA utility for managing a client socket connection.",
    "crumbs": [
      "Network"
    ]
  },
  {
    "objectID": "arc.html",
    "href": "arc.html",
    "title": "ARC environment classes",
    "section": "",
    "text": "source\n\n\n\n ARCFitnessFactory ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\n\nsource\n\n\n\n BaseARCFitness ()\n\nBase class of an ARCFitness. This class is not used directly by developers, but defines the functionality common to all.\n\n\n\n\n\nsource\n\n\n\n SumSquareOfDiff ()\n\nA function that sums the square of the diffrences of two arrays.\n\n\n\n\n\nsource\n\n\n\n AverageMaxOfDiff ()\n\nA function that sums the square of the diffrences of two arrays.\n\n\n\n\n\nsource\n\n\n\n Euclidean ()\n\nA function that sums the square of the diffrences of two arrays.\n\n# import random\n# random.seed(1)\nnp.random.seed(1)\n# Create a 2-dimensional 3 by 3 numpy array of random floats from 0 to 9\nrandom_array = np.random.uniform(4, 5, (3, 3))\nprint(random_array)\narray_of_fours = np.full((3, 3), 4)\nprint(array_of_fours)\neuc = Euclidean()\nmetric = euc(array_of_fours, random_array,  ['cells'])\nprint(metric)\nnp.random.seed(2)\nrandom_array = np.random.uniform(4.49, 4.5, (3, 3))\nprint(random_array)\nmetric = euc(array_of_fours, random_array,  ['cells'])\nprint(metric)\n\n[[4.417022   4.72032449 4.00011437]\n [4.30233257 4.14675589 4.09233859]\n [4.18626021 4.34556073 4.39676747]]\n[[4 4 4]\n [4 4 4]\n [4 4 4]]\n1.0610244787055576\n[[4.49435995 4.49025926 4.49549662]\n [4.49435322 4.49420368 4.49330335]\n [4.49204649 4.49619271 4.49299655]]\n0.49619270966350637",
    "crumbs": [
      "ARC environment classes"
    ]
  },
  {
    "objectID": "arc.html#factory",
    "href": "arc.html#factory",
    "title": "ARC environment classes",
    "section": "",
    "text": "source\n\n\n\n ARCFitnessFactory ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "ARC environment classes"
    ]
  },
  {
    "objectID": "arc.html#basearcfitness",
    "href": "arc.html#basearcfitness",
    "title": "ARC environment classes",
    "section": "",
    "text": "source\n\n\n\n BaseARCFitness ()\n\nBase class of an ARCFitness. This class is not used directly by developers, but defines the functionality common to all.",
    "crumbs": [
      "ARC environment classes"
    ]
  },
  {
    "objectID": "arc.html#sumsquareofdiff",
    "href": "arc.html#sumsquareofdiff",
    "title": "ARC environment classes",
    "section": "",
    "text": "source\n\n\n\n SumSquareOfDiff ()\n\nA function that sums the square of the diffrences of two arrays.",
    "crumbs": [
      "ARC environment classes"
    ]
  },
  {
    "objectID": "arc.html#averagemaxofdiff",
    "href": "arc.html#averagemaxofdiff",
    "title": "ARC environment classes",
    "section": "",
    "text": "source\n\n\n\n AverageMaxOfDiff ()\n\nA function that sums the square of the diffrences of two arrays.",
    "crumbs": [
      "ARC environment classes"
    ]
  },
  {
    "objectID": "arc.html#euclidean",
    "href": "arc.html#euclidean",
    "title": "ARC environment classes",
    "section": "",
    "text": "source\n\n\n\n Euclidean ()\n\nA function that sums the square of the diffrences of two arrays.\n\n# import random\n# random.seed(1)\nnp.random.seed(1)\n# Create a 2-dimensional 3 by 3 numpy array of random floats from 0 to 9\nrandom_array = np.random.uniform(4, 5, (3, 3))\nprint(random_array)\narray_of_fours = np.full((3, 3), 4)\nprint(array_of_fours)\neuc = Euclidean()\nmetric = euc(array_of_fours, random_array,  ['cells'])\nprint(metric)\nnp.random.seed(2)\nrandom_array = np.random.uniform(4.49, 4.5, (3, 3))\nprint(random_array)\nmetric = euc(array_of_fours, random_array,  ['cells'])\nprint(metric)\n\n[[4.417022   4.72032449 4.00011437]\n [4.30233257 4.14675589 4.09233859]\n [4.18626021 4.34556073 4.39676747]]\n[[4 4 4]\n [4 4 4]\n [4 4 4]]\n1.0610244787055576\n[[4.49435995 4.49025926 4.49549662]\n [4.49435322 4.49420368 4.49330335]\n [4.49204649 4.49619271 4.49299655]]\n0.49619270966350637",
    "crumbs": [
      "ARC environment classes"
    ]
  },
  {
    "objectID": "arc.html#example",
    "href": "arc.html#example",
    "title": "ARC environment classes",
    "section": "Example",
    "text": "Example\n\n# import pygame\n# # Example usage:\n# if os.name == 'nt': \n#     props = {'dir': 'C:\\\\packages\\\\arc-prize-2024', 'file_prefix':'arc-agi_training_', 'code':'007bbfb7', 'control_set': ['dims'], 'input_set': ['env'],'dataset': 'train'}\n#     file_name = os.path.join(props['dir'], props['file_prefix']) + 'challenges.json' \n#     challenges_manager = ChallengesDataManager(file_name)\n#     data = challenges_manager.get_data_for_key(props['code'])\n#     print(data)\n#     # arc_dict={}\n#     # arc_dict['data'] = data\n#     arc_env = ARCEnv()\n#     arc_env.initialise(props, data)\n#     arc_env.render()\n#     #    print(state, fitness, done)\n#     # print(arc_env.dimensions)\n#     for i in range(6):\n#         state, fitness, done, info = arc_env.step([1])\n#         # print(state, fitness, done)\n#         print(state, fitness, done, info)\n#         arc_env.render()\n#         sleep(1)\n\n\n# sleep(2)\n# arc_env.close()",
    "crumbs": [
      "ARC environment classes"
    ]
  },
  {
    "objectID": "errors.html",
    "href": "errors.html",
    "title": "Errors",
    "section": "",
    "text": "from unittest import TestCase",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#baseerrortype",
    "href": "errors.html#baseerrortype",
    "title": "Errors",
    "section": "BaseErrorType",
    "text": "BaseErrorType\n\nsource\n\nBaseErrorType\n\n BaseErrorType (flip_error_response=False)\n\nBase class of a type error response. This class is not used direclty by developers, but defines the interface common to all.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#rootsumsquarederror",
    "href": "errors.html#rootsumsquarederror",
    "title": "Errors",
    "section": "RootSumSquaredError",
    "text": "RootSumSquaredError\n\nsource\n\nRootSumSquaredError\n\n RootSumSquaredError (flip_error_response=False)\n\nThe square root of the sum of the square of the errors.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#rootmeansquareerror",
    "href": "errors.html#rootmeansquareerror",
    "title": "Errors",
    "section": "RootMeanSquareError",
    "text": "RootMeanSquareError\n\nsource\n\nRootMeanSquareError\n\n RootMeanSquareError (flip_error_response=False)\n\nThe square root of the mean of the sum of the square of the errors.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#summederror",
    "href": "errors.html#summederror",
    "title": "Errors",
    "section": "SummedError",
    "text": "SummedError\n\nsource\n\nSummedError\n\n SummedError (flip_error_response=False)\n\nSum of all errors.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#currenterror",
    "href": "errors.html#currenterror",
    "title": "Errors",
    "section": "CurrentError",
    "text": "CurrentError\n\nsource\n\nCurrentError\n\n CurrentError (flip_error_response=False)\n\nThe current error, rather than a function of the historical values.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#currentrmserror",
    "href": "errors.html#currentrmserror",
    "title": "Errors",
    "section": "CurrentRMSError",
    "text": "CurrentRMSError\n\nsource\n\nCurrentRMSError\n\n CurrentRMSError (flip_error_response=False)\n\nThe current RMS error, rather than a function of the historical values.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#smootherror",
    "href": "errors.html#smootherror",
    "title": "Errors",
    "section": "SmoothError",
    "text": "SmoothError\n\nsource\n\nSmoothError\n\n SmoothError (flip_error_response=False)\n\nThe exponential smoothed value of the error.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#movingsumerror",
    "href": "errors.html#movingsumerror",
    "title": "Errors",
    "section": "MovingSumError",
    "text": "MovingSumError\n\nsource\n\nMovingSumError\n\n MovingSumError (flip_error_response=False)\n\nThe moving sum of the error.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#movingaverageerror",
    "href": "errors.html#movingaverageerror",
    "title": "Errors",
    "section": "MovingAverageError",
    "text": "MovingAverageError\n\nsource\n\nMovingAverageError\n\n MovingAverageError (flip_error_response=False)\n\nThe moving average of the error.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#welfordvarianceerror",
    "href": "errors.html#welfordvarianceerror",
    "title": "Errors",
    "section": "WelfordVarianceError",
    "text": "WelfordVarianceError\n\nsource\n\nWelfordVarianceError\n\n WelfordVarianceError (flip_error_response=False,\n                       population_variance=False)\n\n*Welford’s online algorithm for computing sample variance.\nThis numerically stable algorithm computes the running variance without storing all previous values. It’s particularly useful for streaming data and avoids numerical precision issues that can occur with naive variance calculations.\nThe algorithm maintains: - count: number of observations - mean: running mean - M2: sum of squared differences from the mean\nVariance Types: - Sample variance: M2 / (count - 1) - Uses Bessel’s correction (N-1) to provide an unbiased estimate when the data represents a sample from a larger population. This accounts for the loss of one degree of freedom from estimating the mean. - Population variance: M2 / count - Divides by N when the data represents the entire population of interest, not just a sample.\nThe choice depends on whether your data is: - A sample from a larger population → use sample variance (default) - The complete population → use population variance*",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#errorresponsefactory",
    "href": "errors.html#errorresponsefactory",
    "title": "Errors",
    "section": "ErrorResponseFactory",
    "text": "ErrorResponseFactory\n\nsource\n\nErrorResponseFactory\n\n ErrorResponseFactory ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#errorcollectorfactory",
    "href": "errors.html#errorcollectorfactory",
    "title": "Errors",
    "section": "ErrorCollectorFactory",
    "text": "ErrorCollectorFactory\n\nsource\n\nErrorCollectorFactory\n\n ErrorCollectorFactory ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#baseerrorcollector",
    "href": "errors.html#baseerrorcollector",
    "title": "Errors",
    "section": "BaseErrorCollector",
    "text": "BaseErrorCollector\n\nsource\n\nBaseErrorCollector\n\n BaseErrorCollector (limit, error_response, min=True)\n\nBase class of an error collector. This class is not used direclty by developers, but defines the interface common to all.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#totalerror",
    "href": "errors.html#totalerror",
    "title": "Errors",
    "section": "TotalError",
    "text": "TotalError\n\nsource\n\nTotalError\n\n TotalError (limit=None, error_response=None, min=None, **cargs)\n\nA class to collect all the errors of the control system run.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#toperror",
    "href": "errors.html#toperror",
    "title": "Errors",
    "section": "TopError",
    "text": "TopError\n\nsource\n\nTopError\n\n TopError (limit=None, error_response=None, min=None, **cargs)\n\nA class to collect all the errors of the top-level nodes.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#inputserror",
    "href": "errors.html#inputserror",
    "title": "Errors",
    "section": "InputsError",
    "text": "InputsError\n\nsource\n\nInputsError\n\n InputsError (limit=None, error_response=None, min=None, **cargs)\n\nA class to collect the values of the input values.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#referencedinputserror",
    "href": "errors.html#referencedinputserror",
    "title": "Errors",
    "section": "ReferencedInputsError",
    "text": "ReferencedInputsError\n\nsource\n\nReferencedInputsError\n\n ReferencedInputsError (limit=None, error_response=None, min=None,\n                        **cargs)\n\nA class to collect the values of the input values subtracted from reference values.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#rewarderror",
    "href": "errors.html#rewarderror",
    "title": "Errors",
    "section": "RewardError",
    "text": "RewardError\n\nsource\n\nRewardError\n\n RewardError (limit=None, error_response=None, min=None, **cargs)\n\nA class that collects the reward value of the control system run.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "errors.html#fitnesserror",
    "href": "errors.html#fitnesserror",
    "title": "Errors",
    "section": "FitnessError",
    "text": "FitnessError\n\nsource\n\nFitnessError\n\n FitnessError (limit=None, error_response=None, min=None, **cargs)\n\nA class that collects the fitness value of the control system run.",
    "crumbs": [
      "Errors"
    ]
  },
  {
    "objectID": "unittests_run_hierarchies.html",
    "href": "unittests_run_hierarchies.html",
    "title": "unittests_run_hierarchies",
    "section": "",
    "text": "import unittest\nfrom os import sep\nfrom pct.putils import Timer\nfrom pct.hierarchy import PCTHierarchy\nfrom pct.environment_processing import EnvironmentProcessingFactory\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[4], line 3\n      1 import unittest\n      2 from os import sep\n----&gt; 3 from pct.putils import Timer\n      4 from pct.hierarchy import PCTHierarchy\n      5 from pct.environment_processing import EnvironmentProcessingFactory\n\nModuleNotFoundError: No module named 'pct'\n\n\n\n\nclass TestRunWindTurbine(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        pass\n\n    def test_run_s_0538_03(self):\n\n        # file = \"testfiles\" + sep + \"data\" + sep + \"ga\" + sep + \"WindTurbine\"+sep+\"ga--1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f.properties\"\n        file = \"testfiles\" + sep +  \"WindTurbine\"+sep+\"ga--1362.401-s003-4x3-m005-WT0538-bddf277b0f729cc630efacf91b9f494f.properties\"\n        timer = Timer()\n        timer.start()\n        _, score = PCTHierarchy.run_from_file(file, env_props=None, seed=1, render=False, move=None, min=True, history=False, \n                                                    hpct_verbose= False, runs=None, plots_dir=None, early_termination=False)\n        print(f'Score={score:0.3f}')\n        timer.stop()\n        print(f'Mean time: {timer.mean()}')\n\n        self.assertAlmostEqual(score, -1362.401471117955 )\n\n    def test_run_v_0416_01(self):\n\n        # file = \"testfiles\" + sep + \"data\" + sep + \"ga\" + sep + \"WindTurbine\"+sep+ \"ga--2629.009-s001-5x5-m002-WT0416-31ecb19201d49e8c6f9dd1e172bd6944.properties\"\n        file = \"testfiles\" + sep  + \"WindTurbine\"+sep+ \"ga--2629.009-s001-5x5-m002-WT0416-31ecb19201d49e8c6f9dd1e172bd6944.properties\"\n        timer = Timer()\n        timer.start()\n        _, score = PCTHierarchy.run_from_file(file, env_props=None, seed=1, render=False, move=None, min=True, history=False, \n                                                    hpct_verbose= False, runs=None, plots_dir=None, early_termination=False)\n        print(f'Score={score:0.3f}')\n        timer.stop()\n        print(f'Mean time: {timer.mean()}')\n\n        self.assertAlmostEqual(score, -2629.008509888531 )\n\n\nres = unittest.main(argv=[''], verbosity=3, exit=False)\n\ntest_run_s_0538_03 (__main__.TestRunWindTurbine) ... ok\ntest_run_v_0416_01 (__main__.TestRunWindTurbine) ... \n\n\nScore=-1362.401\nMean time: 1.0409185000000036\n\n\nok\n\n----------------------------------------------------------------------\nRan 2 tests in 1.447s\n\nOK\n\n\nScore=-2629.009\nMean time: 0.4043508999999972\n\n\n\nassert len(res.result.failures) == 0\nassert len(res.result.errors) == 0",
    "crumbs": [
      "unittests_run_hierarchies"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Perceptual Control Theory",
    "section": "",
    "text": "With this library you can create and run simple or complex hierarchies of perceptual control systems as well as make use of the power of the Python platform and its rich set of packages.\nIn the context of this library a single control system comprising a perceptual, reference, comparator and output function is called a Node. The functions therein can be configured by the user.\nA hierarchy is defined by a collection of nodes.",
    "crumbs": [
      "Perceptual Control Theory"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Perceptual Control Theory",
    "section": "Install",
    "text": "Install\npip install pct",
    "crumbs": [
      "Perceptual Control Theory"
    ]
  },
  {
    "objectID": "index.html#import",
    "href": "index.html#import",
    "title": "Perceptual Control Theory",
    "section": "Import",
    "text": "Import\nExamples of importing the library functionality.\nimport pct as p\nfrom pct.hierarchy import Hierarchy\nfrom pct import *",
    "crumbs": [
      "Perceptual Control Theory"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Perceptual Control Theory",
    "section": "How to use",
    "text": "How to use\nImport modules from the PCT library.\n\nfrom pct.nodes import PCTNode\n\nFor the purposes of this example define a world model. This would not be required if the real world is used, or a simulation such as OpenAI Gym.\n\ndef velocity_model(velocity,  force , mass):\n    velocity = velocity + force / mass\n    return velocity\n\n# World value\nmass = 50\n\nCreate a PCTNode, a control system unit comprising a reference, perception, comparator and output function. The default value for the reference is 1. With the history flag set, the data for each iteration is recorded for later plotting.\n\npctnode = PCTNode(history=True)\n\nCall the node repeatedly to control the perception of velocity. With the verbose flag set, the control values are printed. In this case the printed values are the iteration number, the (velocity) reference, the perception, the error and the (force) output.\n\nfor i in range(40):\n    print(i, end=\" \")\n    force = pctnode(verbose=True)\n    velocity = velocity_model(pctnode.get_perception_value(), force, mass)\n    pctnode.set_perception_value(velocity)\n\n0 0.000 0.000 0.000 0.000 \n1 0.000 0.000 0.000 0.000 \n2 0.000 0.000 0.000 0.000 \n3 0.000 0.000 0.000 0.000 \n4 0.000 0.000 0.000 0.000 \n5 0.000 0.000 0.000 0.000 \n6 0.000 0.000 0.000 0.000 \n7 0.000 0.000 0.000 0.000 \n8 0.000 0.000 0.000 0.000 \n9 0.000 0.000 0.000 0.000 \n10 0.000 0.000 0.000 0.000 \n11 0.000 0.000 0.000 0.000 \n12 0.000 0.000 0.000 0.000 \n13 0.000 0.000 0.000 0.000 \n14 0.000 0.000 0.000 0.000 \n15 0.000 0.000 0.000 0.000 \n16 0.000 0.000 0.000 0.000 \n17 0.000 0.000 0.000 0.000 \n18 0.000 0.000 0.000 0.000 \n19 0.000 0.000 0.000 0.000 \n20 0.000 0.000 0.000 0.000 \n21 0.000 0.000 0.000 0.000 \n22 0.000 0.000 0.000 0.000 \n23 0.000 0.000 0.000 0.000 \n24 0.000 0.000 0.000 0.000 \n25 0.000 0.000 0.000 0.000 \n26 0.000 0.000 0.000 0.000 \n27 0.000 0.000 0.000 0.000 \n28 0.000 0.000 0.000 0.000 \n29 0.000 0.000 0.000 0.000 \n30 0.000 0.000 0.000 0.000 \n31 0.000 0.000 0.000 0.000 \n32 0.000 0.000 0.000 0.000 \n33 0.000 0.000 0.000 0.000 \n34 0.000 0.000 0.000 0.000 \n35 0.000 0.000 0.000 0.000 \n36 0.000 0.000 0.000 0.000 \n37 0.000 0.000 0.000 0.000 \n38 0.000 0.000 0.000 0.000 \n39 0.000 0.000 0.000 0.000 \n\n\nUsing the plotly library plot the data. The graph shows the perception being controlled to match the reference value.\nimport plotly.graph_objects as go\nfig = go.Figure(layout_title_text=\"Velocity Goal\")\nfig.add_trace(go.Scatter(y=pctnode.history.data['refcoll']['constant'], name=\"ref\"))\nfig.add_trace(go.Scatter(y=pctnode.history.data['percoll']['variable'], name=\"perc\"))\nThis following code is only for the purposes of displaying image of the graph generated by the above code.\n\nfrom IPython.display import Image\n\n\nImage(url='http://www.perceptualrobots.com/wp-content/uploads/2020/08/pct_node_plot.png')\n\n\n\n\nThis shows a very basic example of the use of the PCT library. For more advanced functionality see the API documentation at https://perceptualrobots.github.io/pct/.",
    "crumbs": [
      "Perceptual Control Theory"
    ]
  },
  {
    "objectID": "hierarchy.html",
    "href": "hierarchy.html",
    "title": "Hierarchy",
    "section": "",
    "text": "Defining the PCTHierarchy\n\nsource\n\n\n\n PCTHierarchy (levels=0, cols=0, pre=None, post=None, name='pcthierarchy',\n               clear_names=True, links='single', history=False,\n               build=True, error_collector=None, namespace=None, **pargs)\n\nA hierarchical perceptual control system, of PCTNodes.",
    "crumbs": [
      "Hierarchy"
    ]
  },
  {
    "objectID": "hierarchy.html#defining-the-hierarchy",
    "href": "hierarchy.html#defining-the-hierarchy",
    "title": "Hierarchy",
    "section": "",
    "text": "Defining the PCTHierarchy\n\nsource\n\n\n\n PCTHierarchy (levels=0, cols=0, pre=None, post=None, name='pcthierarchy',\n               clear_names=True, links='single', history=False,\n               build=True, error_collector=None, namespace=None, **pargs)\n\nA hierarchical perceptual control system, of PCTNodes.",
    "crumbs": [
      "Hierarchy"
    ]
  }
]